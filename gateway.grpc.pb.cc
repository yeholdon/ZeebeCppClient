// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gateway.proto

#include "gateway.pb.h"
#include "gateway.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gateway_protocol {

static const char* Gateway_method_names[] = {
  "/gateway_protocol.Gateway/ActivateJobs",
  "/gateway_protocol.Gateway/CancelProcessInstance",
  "/gateway_protocol.Gateway/CompleteJob",
  "/gateway_protocol.Gateway/CreateProcessInstance",
  "/gateway_protocol.Gateway/CreateProcessInstanceWithResult",
  "/gateway_protocol.Gateway/DeployProcess",
  "/gateway_protocol.Gateway/DeployResource",
  "/gateway_protocol.Gateway/FailJob",
  "/gateway_protocol.Gateway/ThrowError",
  "/gateway_protocol.Gateway/PublishMessage",
  "/gateway_protocol.Gateway/ResolveIncident",
  "/gateway_protocol.Gateway/SetVariables",
  "/gateway_protocol.Gateway/Topology",
  "/gateway_protocol.Gateway/UpdateJobRetries",
  "/gateway_protocol.Gateway/ModifyProcessInstance",
};

std::unique_ptr< Gateway::Stub> Gateway::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Gateway::Stub> stub(new Gateway::Stub(channel, options));
  return stub;
}

Gateway::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ActivateJobs_(Gateway_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CancelProcessInstance_(Gateway_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteJob_(Gateway_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProcessInstance_(Gateway_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProcessInstanceWithResult_(Gateway_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeployProcess_(Gateway_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeployResource_(Gateway_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FailJob_(Gateway_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ThrowError_(Gateway_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PublishMessage_(Gateway_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResolveIncident_(Gateway_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVariables_(Gateway_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Topology_(Gateway_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateJobRetries_(Gateway_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyProcessInstance_(Gateway_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::gateway_protocol::ActivateJobsResponse>* Gateway::Stub::ActivateJobsRaw(::grpc::ClientContext* context, const ::gateway_protocol::ActivateJobsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::gateway_protocol::ActivateJobsResponse>::Create(channel_.get(), rpcmethod_ActivateJobs_, context, request);
}

void Gateway::Stub::async::ActivateJobs(::grpc::ClientContext* context, const ::gateway_protocol::ActivateJobsRequest* request, ::grpc::ClientReadReactor< ::gateway_protocol::ActivateJobsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::gateway_protocol::ActivateJobsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ActivateJobs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::gateway_protocol::ActivateJobsResponse>* Gateway::Stub::AsyncActivateJobsRaw(::grpc::ClientContext* context, const ::gateway_protocol::ActivateJobsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gateway_protocol::ActivateJobsResponse>::Create(channel_.get(), cq, rpcmethod_ActivateJobs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gateway_protocol::ActivateJobsResponse>* Gateway::Stub::PrepareAsyncActivateJobsRaw(::grpc::ClientContext* context, const ::gateway_protocol::ActivateJobsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gateway_protocol::ActivateJobsResponse>::Create(channel_.get(), cq, rpcmethod_ActivateJobs_, context, request, false, nullptr);
}

::grpc::Status Gateway::Stub::CancelProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::CancelProcessInstanceRequest& request, ::gateway_protocol::CancelProcessInstanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::CancelProcessInstanceRequest, ::gateway_protocol::CancelProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelProcessInstance_, context, request, response);
}

void Gateway::Stub::async::CancelProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::CancelProcessInstanceRequest* request, ::gateway_protocol::CancelProcessInstanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::CancelProcessInstanceRequest, ::gateway_protocol::CancelProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelProcessInstance_, context, request, response, std::move(f));
}

void Gateway::Stub::async::CancelProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::CancelProcessInstanceRequest* request, ::gateway_protocol::CancelProcessInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelProcessInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::CancelProcessInstanceResponse>* Gateway::Stub::PrepareAsyncCancelProcessInstanceRaw(::grpc::ClientContext* context, const ::gateway_protocol::CancelProcessInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::CancelProcessInstanceResponse, ::gateway_protocol::CancelProcessInstanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelProcessInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::CancelProcessInstanceResponse>* Gateway::Stub::AsyncCancelProcessInstanceRaw(::grpc::ClientContext* context, const ::gateway_protocol::CancelProcessInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelProcessInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::CompleteJob(::grpc::ClientContext* context, const ::gateway_protocol::CompleteJobRequest& request, ::gateway_protocol::CompleteJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::CompleteJobRequest, ::gateway_protocol::CompleteJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CompleteJob_, context, request, response);
}

void Gateway::Stub::async::CompleteJob(::grpc::ClientContext* context, const ::gateway_protocol::CompleteJobRequest* request, ::gateway_protocol::CompleteJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::CompleteJobRequest, ::gateway_protocol::CompleteJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteJob_, context, request, response, std::move(f));
}

void Gateway::Stub::async::CompleteJob(::grpc::ClientContext* context, const ::gateway_protocol::CompleteJobRequest* request, ::gateway_protocol::CompleteJobResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::CompleteJobResponse>* Gateway::Stub::PrepareAsyncCompleteJobRaw(::grpc::ClientContext* context, const ::gateway_protocol::CompleteJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::CompleteJobResponse, ::gateway_protocol::CompleteJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CompleteJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::CompleteJobResponse>* Gateway::Stub::AsyncCompleteJobRaw(::grpc::ClientContext* context, const ::gateway_protocol::CompleteJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCompleteJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::CreateProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceRequest& request, ::gateway_protocol::CreateProcessInstanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::CreateProcessInstanceRequest, ::gateway_protocol::CreateProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProcessInstance_, context, request, response);
}

void Gateway::Stub::async::CreateProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceRequest* request, ::gateway_protocol::CreateProcessInstanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::CreateProcessInstanceRequest, ::gateway_protocol::CreateProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProcessInstance_, context, request, response, std::move(f));
}

void Gateway::Stub::async::CreateProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceRequest* request, ::gateway_protocol::CreateProcessInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProcessInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::CreateProcessInstanceResponse>* Gateway::Stub::PrepareAsyncCreateProcessInstanceRaw(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::CreateProcessInstanceResponse, ::gateway_protocol::CreateProcessInstanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProcessInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::CreateProcessInstanceResponse>* Gateway::Stub::AsyncCreateProcessInstanceRaw(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProcessInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::CreateProcessInstanceWithResult(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceWithResultRequest& request, ::gateway_protocol::CreateProcessInstanceWithResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::CreateProcessInstanceWithResultRequest, ::gateway_protocol::CreateProcessInstanceWithResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProcessInstanceWithResult_, context, request, response);
}

void Gateway::Stub::async::CreateProcessInstanceWithResult(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceWithResultRequest* request, ::gateway_protocol::CreateProcessInstanceWithResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::CreateProcessInstanceWithResultRequest, ::gateway_protocol::CreateProcessInstanceWithResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProcessInstanceWithResult_, context, request, response, std::move(f));
}

void Gateway::Stub::async::CreateProcessInstanceWithResult(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceWithResultRequest* request, ::gateway_protocol::CreateProcessInstanceWithResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProcessInstanceWithResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::CreateProcessInstanceWithResultResponse>* Gateway::Stub::PrepareAsyncCreateProcessInstanceWithResultRaw(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceWithResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::CreateProcessInstanceWithResultResponse, ::gateway_protocol::CreateProcessInstanceWithResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProcessInstanceWithResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::CreateProcessInstanceWithResultResponse>* Gateway::Stub::AsyncCreateProcessInstanceWithResultRaw(::grpc::ClientContext* context, const ::gateway_protocol::CreateProcessInstanceWithResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProcessInstanceWithResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::DeployProcess(::grpc::ClientContext* context, const ::gateway_protocol::DeployProcessRequest& request, ::gateway_protocol::DeployProcessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::DeployProcessRequest, ::gateway_protocol::DeployProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeployProcess_, context, request, response);
}

void Gateway::Stub::async::DeployProcess(::grpc::ClientContext* context, const ::gateway_protocol::DeployProcessRequest* request, ::gateway_protocol::DeployProcessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::DeployProcessRequest, ::gateway_protocol::DeployProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployProcess_, context, request, response, std::move(f));
}

void Gateway::Stub::async::DeployProcess(::grpc::ClientContext* context, const ::gateway_protocol::DeployProcessRequest* request, ::gateway_protocol::DeployProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployProcess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::DeployProcessResponse>* Gateway::Stub::PrepareAsyncDeployProcessRaw(::grpc::ClientContext* context, const ::gateway_protocol::DeployProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::DeployProcessResponse, ::gateway_protocol::DeployProcessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeployProcess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::DeployProcessResponse>* Gateway::Stub::AsyncDeployProcessRaw(::grpc::ClientContext* context, const ::gateway_protocol::DeployProcessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeployProcessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::DeployResource(::grpc::ClientContext* context, const ::gateway_protocol::DeployResourceRequest& request, ::gateway_protocol::DeployResourceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::DeployResourceRequest, ::gateway_protocol::DeployResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeployResource_, context, request, response);
}

void Gateway::Stub::async::DeployResource(::grpc::ClientContext* context, const ::gateway_protocol::DeployResourceRequest* request, ::gateway_protocol::DeployResourceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::DeployResourceRequest, ::gateway_protocol::DeployResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployResource_, context, request, response, std::move(f));
}

void Gateway::Stub::async::DeployResource(::grpc::ClientContext* context, const ::gateway_protocol::DeployResourceRequest* request, ::gateway_protocol::DeployResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::DeployResourceResponse>* Gateway::Stub::PrepareAsyncDeployResourceRaw(::grpc::ClientContext* context, const ::gateway_protocol::DeployResourceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::DeployResourceResponse, ::gateway_protocol::DeployResourceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeployResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::DeployResourceResponse>* Gateway::Stub::AsyncDeployResourceRaw(::grpc::ClientContext* context, const ::gateway_protocol::DeployResourceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeployResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::FailJob(::grpc::ClientContext* context, const ::gateway_protocol::FailJobRequest& request, ::gateway_protocol::FailJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::FailJobRequest, ::gateway_protocol::FailJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FailJob_, context, request, response);
}

void Gateway::Stub::async::FailJob(::grpc::ClientContext* context, const ::gateway_protocol::FailJobRequest* request, ::gateway_protocol::FailJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::FailJobRequest, ::gateway_protocol::FailJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FailJob_, context, request, response, std::move(f));
}

void Gateway::Stub::async::FailJob(::grpc::ClientContext* context, const ::gateway_protocol::FailJobRequest* request, ::gateway_protocol::FailJobResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FailJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::FailJobResponse>* Gateway::Stub::PrepareAsyncFailJobRaw(::grpc::ClientContext* context, const ::gateway_protocol::FailJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::FailJobResponse, ::gateway_protocol::FailJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FailJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::FailJobResponse>* Gateway::Stub::AsyncFailJobRaw(::grpc::ClientContext* context, const ::gateway_protocol::FailJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFailJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::ThrowError(::grpc::ClientContext* context, const ::gateway_protocol::ThrowErrorRequest& request, ::gateway_protocol::ThrowErrorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::ThrowErrorRequest, ::gateway_protocol::ThrowErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ThrowError_, context, request, response);
}

void Gateway::Stub::async::ThrowError(::grpc::ClientContext* context, const ::gateway_protocol::ThrowErrorRequest* request, ::gateway_protocol::ThrowErrorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::ThrowErrorRequest, ::gateway_protocol::ThrowErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ThrowError_, context, request, response, std::move(f));
}

void Gateway::Stub::async::ThrowError(::grpc::ClientContext* context, const ::gateway_protocol::ThrowErrorRequest* request, ::gateway_protocol::ThrowErrorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ThrowError_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::ThrowErrorResponse>* Gateway::Stub::PrepareAsyncThrowErrorRaw(::grpc::ClientContext* context, const ::gateway_protocol::ThrowErrorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::ThrowErrorResponse, ::gateway_protocol::ThrowErrorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ThrowError_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::ThrowErrorResponse>* Gateway::Stub::AsyncThrowErrorRaw(::grpc::ClientContext* context, const ::gateway_protocol::ThrowErrorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncThrowErrorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::PublishMessage(::grpc::ClientContext* context, const ::gateway_protocol::PublishMessageRequest& request, ::gateway_protocol::PublishMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::PublishMessageRequest, ::gateway_protocol::PublishMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PublishMessage_, context, request, response);
}

void Gateway::Stub::async::PublishMessage(::grpc::ClientContext* context, const ::gateway_protocol::PublishMessageRequest* request, ::gateway_protocol::PublishMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::PublishMessageRequest, ::gateway_protocol::PublishMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishMessage_, context, request, response, std::move(f));
}

void Gateway::Stub::async::PublishMessage(::grpc::ClientContext* context, const ::gateway_protocol::PublishMessageRequest* request, ::gateway_protocol::PublishMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::PublishMessageResponse>* Gateway::Stub::PrepareAsyncPublishMessageRaw(::grpc::ClientContext* context, const ::gateway_protocol::PublishMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::PublishMessageResponse, ::gateway_protocol::PublishMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PublishMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::PublishMessageResponse>* Gateway::Stub::AsyncPublishMessageRaw(::grpc::ClientContext* context, const ::gateway_protocol::PublishMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::ResolveIncident(::grpc::ClientContext* context, const ::gateway_protocol::ResolveIncidentRequest& request, ::gateway_protocol::ResolveIncidentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::ResolveIncidentRequest, ::gateway_protocol::ResolveIncidentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResolveIncident_, context, request, response);
}

void Gateway::Stub::async::ResolveIncident(::grpc::ClientContext* context, const ::gateway_protocol::ResolveIncidentRequest* request, ::gateway_protocol::ResolveIncidentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::ResolveIncidentRequest, ::gateway_protocol::ResolveIncidentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResolveIncident_, context, request, response, std::move(f));
}

void Gateway::Stub::async::ResolveIncident(::grpc::ClientContext* context, const ::gateway_protocol::ResolveIncidentRequest* request, ::gateway_protocol::ResolveIncidentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResolveIncident_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::ResolveIncidentResponse>* Gateway::Stub::PrepareAsyncResolveIncidentRaw(::grpc::ClientContext* context, const ::gateway_protocol::ResolveIncidentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::ResolveIncidentResponse, ::gateway_protocol::ResolveIncidentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResolveIncident_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::ResolveIncidentResponse>* Gateway::Stub::AsyncResolveIncidentRaw(::grpc::ClientContext* context, const ::gateway_protocol::ResolveIncidentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResolveIncidentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::SetVariables(::grpc::ClientContext* context, const ::gateway_protocol::SetVariablesRequest& request, ::gateway_protocol::SetVariablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::SetVariablesRequest, ::gateway_protocol::SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVariables_, context, request, response);
}

void Gateway::Stub::async::SetVariables(::grpc::ClientContext* context, const ::gateway_protocol::SetVariablesRequest* request, ::gateway_protocol::SetVariablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::SetVariablesRequest, ::gateway_protocol::SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVariables_, context, request, response, std::move(f));
}

void Gateway::Stub::async::SetVariables(::grpc::ClientContext* context, const ::gateway_protocol::SetVariablesRequest* request, ::gateway_protocol::SetVariablesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVariables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::SetVariablesResponse>* Gateway::Stub::PrepareAsyncSetVariablesRaw(::grpc::ClientContext* context, const ::gateway_protocol::SetVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::SetVariablesResponse, ::gateway_protocol::SetVariablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVariables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::SetVariablesResponse>* Gateway::Stub::AsyncSetVariablesRaw(::grpc::ClientContext* context, const ::gateway_protocol::SetVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVariablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::Topology(::grpc::ClientContext* context, const ::gateway_protocol::TopologyRequest& request, ::gateway_protocol::TopologyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::TopologyRequest, ::gateway_protocol::TopologyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Topology_, context, request, response);
}

void Gateway::Stub::async::Topology(::grpc::ClientContext* context, const ::gateway_protocol::TopologyRequest* request, ::gateway_protocol::TopologyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::TopologyRequest, ::gateway_protocol::TopologyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Topology_, context, request, response, std::move(f));
}

void Gateway::Stub::async::Topology(::grpc::ClientContext* context, const ::gateway_protocol::TopologyRequest* request, ::gateway_protocol::TopologyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Topology_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::TopologyResponse>* Gateway::Stub::PrepareAsyncTopologyRaw(::grpc::ClientContext* context, const ::gateway_protocol::TopologyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::TopologyResponse, ::gateway_protocol::TopologyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Topology_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::TopologyResponse>* Gateway::Stub::AsyncTopologyRaw(::grpc::ClientContext* context, const ::gateway_protocol::TopologyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTopologyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::UpdateJobRetries(::grpc::ClientContext* context, const ::gateway_protocol::UpdateJobRetriesRequest& request, ::gateway_protocol::UpdateJobRetriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::UpdateJobRetriesRequest, ::gateway_protocol::UpdateJobRetriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateJobRetries_, context, request, response);
}

void Gateway::Stub::async::UpdateJobRetries(::grpc::ClientContext* context, const ::gateway_protocol::UpdateJobRetriesRequest* request, ::gateway_protocol::UpdateJobRetriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::UpdateJobRetriesRequest, ::gateway_protocol::UpdateJobRetriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateJobRetries_, context, request, response, std::move(f));
}

void Gateway::Stub::async::UpdateJobRetries(::grpc::ClientContext* context, const ::gateway_protocol::UpdateJobRetriesRequest* request, ::gateway_protocol::UpdateJobRetriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateJobRetries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::UpdateJobRetriesResponse>* Gateway::Stub::PrepareAsyncUpdateJobRetriesRaw(::grpc::ClientContext* context, const ::gateway_protocol::UpdateJobRetriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::UpdateJobRetriesResponse, ::gateway_protocol::UpdateJobRetriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateJobRetries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::UpdateJobRetriesResponse>* Gateway::Stub::AsyncUpdateJobRetriesRaw(::grpc::ClientContext* context, const ::gateway_protocol::UpdateJobRetriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateJobRetriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gateway::Stub::ModifyProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::ModifyProcessInstanceRequest& request, ::gateway_protocol::ModifyProcessInstanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gateway_protocol::ModifyProcessInstanceRequest, ::gateway_protocol::ModifyProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModifyProcessInstance_, context, request, response);
}

void Gateway::Stub::async::ModifyProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::ModifyProcessInstanceRequest* request, ::gateway_protocol::ModifyProcessInstanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gateway_protocol::ModifyProcessInstanceRequest, ::gateway_protocol::ModifyProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyProcessInstance_, context, request, response, std::move(f));
}

void Gateway::Stub::async::ModifyProcessInstance(::grpc::ClientContext* context, const ::gateway_protocol::ModifyProcessInstanceRequest* request, ::gateway_protocol::ModifyProcessInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyProcessInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::ModifyProcessInstanceResponse>* Gateway::Stub::PrepareAsyncModifyProcessInstanceRaw(::grpc::ClientContext* context, const ::gateway_protocol::ModifyProcessInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gateway_protocol::ModifyProcessInstanceResponse, ::gateway_protocol::ModifyProcessInstanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModifyProcessInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gateway_protocol::ModifyProcessInstanceResponse>* Gateway::Stub::AsyncModifyProcessInstanceRaw(::grpc::ClientContext* context, const ::gateway_protocol::ModifyProcessInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModifyProcessInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

Gateway::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Gateway::Service, ::gateway_protocol::ActivateJobsRequest, ::gateway_protocol::ActivateJobsResponse>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::ActivateJobsRequest* req,
             ::grpc::ServerWriter<::gateway_protocol::ActivateJobsResponse>* writer) {
               return service->ActivateJobs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::CancelProcessInstanceRequest, ::gateway_protocol::CancelProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::CancelProcessInstanceRequest* req,
             ::gateway_protocol::CancelProcessInstanceResponse* resp) {
               return service->CancelProcessInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::CompleteJobRequest, ::gateway_protocol::CompleteJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::CompleteJobRequest* req,
             ::gateway_protocol::CompleteJobResponse* resp) {
               return service->CompleteJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::CreateProcessInstanceRequest, ::gateway_protocol::CreateProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::CreateProcessInstanceRequest* req,
             ::gateway_protocol::CreateProcessInstanceResponse* resp) {
               return service->CreateProcessInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::CreateProcessInstanceWithResultRequest, ::gateway_protocol::CreateProcessInstanceWithResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::CreateProcessInstanceWithResultRequest* req,
             ::gateway_protocol::CreateProcessInstanceWithResultResponse* resp) {
               return service->CreateProcessInstanceWithResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::DeployProcessRequest, ::gateway_protocol::DeployProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::DeployProcessRequest* req,
             ::gateway_protocol::DeployProcessResponse* resp) {
               return service->DeployProcess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::DeployResourceRequest, ::gateway_protocol::DeployResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::DeployResourceRequest* req,
             ::gateway_protocol::DeployResourceResponse* resp) {
               return service->DeployResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::FailJobRequest, ::gateway_protocol::FailJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::FailJobRequest* req,
             ::gateway_protocol::FailJobResponse* resp) {
               return service->FailJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::ThrowErrorRequest, ::gateway_protocol::ThrowErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::ThrowErrorRequest* req,
             ::gateway_protocol::ThrowErrorResponse* resp) {
               return service->ThrowError(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::PublishMessageRequest, ::gateway_protocol::PublishMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::PublishMessageRequest* req,
             ::gateway_protocol::PublishMessageResponse* resp) {
               return service->PublishMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::ResolveIncidentRequest, ::gateway_protocol::ResolveIncidentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::ResolveIncidentRequest* req,
             ::gateway_protocol::ResolveIncidentResponse* resp) {
               return service->ResolveIncident(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::SetVariablesRequest, ::gateway_protocol::SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::SetVariablesRequest* req,
             ::gateway_protocol::SetVariablesResponse* resp) {
               return service->SetVariables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::TopologyRequest, ::gateway_protocol::TopologyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::TopologyRequest* req,
             ::gateway_protocol::TopologyResponse* resp) {
               return service->Topology(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::UpdateJobRetriesRequest, ::gateway_protocol::UpdateJobRetriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::UpdateJobRetriesRequest* req,
             ::gateway_protocol::UpdateJobRetriesResponse* resp) {
               return service->UpdateJobRetries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gateway_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gateway::Service, ::gateway_protocol::ModifyProcessInstanceRequest, ::gateway_protocol::ModifyProcessInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gateway::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gateway_protocol::ModifyProcessInstanceRequest* req,
             ::gateway_protocol::ModifyProcessInstanceResponse* resp) {
               return service->ModifyProcessInstance(ctx, req, resp);
             }, this)));
}

Gateway::Service::~Service() {
}

::grpc::Status Gateway::Service::ActivateJobs(::grpc::ServerContext* context, const ::gateway_protocol::ActivateJobsRequest* request, ::grpc::ServerWriter< ::gateway_protocol::ActivateJobsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::CancelProcessInstance(::grpc::ServerContext* context, const ::gateway_protocol::CancelProcessInstanceRequest* request, ::gateway_protocol::CancelProcessInstanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::CompleteJob(::grpc::ServerContext* context, const ::gateway_protocol::CompleteJobRequest* request, ::gateway_protocol::CompleteJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::CreateProcessInstance(::grpc::ServerContext* context, const ::gateway_protocol::CreateProcessInstanceRequest* request, ::gateway_protocol::CreateProcessInstanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::CreateProcessInstanceWithResult(::grpc::ServerContext* context, const ::gateway_protocol::CreateProcessInstanceWithResultRequest* request, ::gateway_protocol::CreateProcessInstanceWithResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::DeployProcess(::grpc::ServerContext* context, const ::gateway_protocol::DeployProcessRequest* request, ::gateway_protocol::DeployProcessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::DeployResource(::grpc::ServerContext* context, const ::gateway_protocol::DeployResourceRequest* request, ::gateway_protocol::DeployResourceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::FailJob(::grpc::ServerContext* context, const ::gateway_protocol::FailJobRequest* request, ::gateway_protocol::FailJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::ThrowError(::grpc::ServerContext* context, const ::gateway_protocol::ThrowErrorRequest* request, ::gateway_protocol::ThrowErrorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::PublishMessage(::grpc::ServerContext* context, const ::gateway_protocol::PublishMessageRequest* request, ::gateway_protocol::PublishMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::ResolveIncident(::grpc::ServerContext* context, const ::gateway_protocol::ResolveIncidentRequest* request, ::gateway_protocol::ResolveIncidentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::SetVariables(::grpc::ServerContext* context, const ::gateway_protocol::SetVariablesRequest* request, ::gateway_protocol::SetVariablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::Topology(::grpc::ServerContext* context, const ::gateway_protocol::TopologyRequest* request, ::gateway_protocol::TopologyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::UpdateJobRetries(::grpc::ServerContext* context, const ::gateway_protocol::UpdateJobRetriesRequest* request, ::gateway_protocol::UpdateJobRetriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gateway::Service::ModifyProcessInstance(::grpc::ServerContext* context, const ::gateway_protocol::ModifyProcessInstanceRequest* request, ::gateway_protocol::ModifyProcessInstanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gateway_protocol

