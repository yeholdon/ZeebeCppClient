// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gateway_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gateway_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gateway_2eproto;
namespace gateway_protocol {
class ActivateJobsRequest;
struct ActivateJobsRequestDefaultTypeInternal;
extern ActivateJobsRequestDefaultTypeInternal _ActivateJobsRequest_default_instance_;
class ActivateJobsResponse;
struct ActivateJobsResponseDefaultTypeInternal;
extern ActivateJobsResponseDefaultTypeInternal _ActivateJobsResponse_default_instance_;
class ActivatedJob;
struct ActivatedJobDefaultTypeInternal;
extern ActivatedJobDefaultTypeInternal _ActivatedJob_default_instance_;
class BrokerInfo;
struct BrokerInfoDefaultTypeInternal;
extern BrokerInfoDefaultTypeInternal _BrokerInfo_default_instance_;
class CancelProcessInstanceRequest;
struct CancelProcessInstanceRequestDefaultTypeInternal;
extern CancelProcessInstanceRequestDefaultTypeInternal _CancelProcessInstanceRequest_default_instance_;
class CancelProcessInstanceResponse;
struct CancelProcessInstanceResponseDefaultTypeInternal;
extern CancelProcessInstanceResponseDefaultTypeInternal _CancelProcessInstanceResponse_default_instance_;
class CompleteJobRequest;
struct CompleteJobRequestDefaultTypeInternal;
extern CompleteJobRequestDefaultTypeInternal _CompleteJobRequest_default_instance_;
class CompleteJobResponse;
struct CompleteJobResponseDefaultTypeInternal;
extern CompleteJobResponseDefaultTypeInternal _CompleteJobResponse_default_instance_;
class CreateProcessInstanceRequest;
struct CreateProcessInstanceRequestDefaultTypeInternal;
extern CreateProcessInstanceRequestDefaultTypeInternal _CreateProcessInstanceRequest_default_instance_;
class CreateProcessInstanceResponse;
struct CreateProcessInstanceResponseDefaultTypeInternal;
extern CreateProcessInstanceResponseDefaultTypeInternal _CreateProcessInstanceResponse_default_instance_;
class CreateProcessInstanceWithResultRequest;
struct CreateProcessInstanceWithResultRequestDefaultTypeInternal;
extern CreateProcessInstanceWithResultRequestDefaultTypeInternal _CreateProcessInstanceWithResultRequest_default_instance_;
class CreateProcessInstanceWithResultResponse;
struct CreateProcessInstanceWithResultResponseDefaultTypeInternal;
extern CreateProcessInstanceWithResultResponseDefaultTypeInternal _CreateProcessInstanceWithResultResponse_default_instance_;
class DecisionMetadata;
struct DecisionMetadataDefaultTypeInternal;
extern DecisionMetadataDefaultTypeInternal _DecisionMetadata_default_instance_;
class DecisionRequirementsMetadata;
struct DecisionRequirementsMetadataDefaultTypeInternal;
extern DecisionRequirementsMetadataDefaultTypeInternal _DecisionRequirementsMetadata_default_instance_;
class DeployProcessRequest;
struct DeployProcessRequestDefaultTypeInternal;
extern DeployProcessRequestDefaultTypeInternal _DeployProcessRequest_default_instance_;
class DeployProcessResponse;
struct DeployProcessResponseDefaultTypeInternal;
extern DeployProcessResponseDefaultTypeInternal _DeployProcessResponse_default_instance_;
class DeployResourceRequest;
struct DeployResourceRequestDefaultTypeInternal;
extern DeployResourceRequestDefaultTypeInternal _DeployResourceRequest_default_instance_;
class DeployResourceResponse;
struct DeployResourceResponseDefaultTypeInternal;
extern DeployResourceResponseDefaultTypeInternal _DeployResourceResponse_default_instance_;
class Deployment;
struct DeploymentDefaultTypeInternal;
extern DeploymentDefaultTypeInternal _Deployment_default_instance_;
class FailJobRequest;
struct FailJobRequestDefaultTypeInternal;
extern FailJobRequestDefaultTypeInternal _FailJobRequest_default_instance_;
class FailJobResponse;
struct FailJobResponseDefaultTypeInternal;
extern FailJobResponseDefaultTypeInternal _FailJobResponse_default_instance_;
class ModifyProcessInstanceRequest;
struct ModifyProcessInstanceRequestDefaultTypeInternal;
extern ModifyProcessInstanceRequestDefaultTypeInternal _ModifyProcessInstanceRequest_default_instance_;
class ModifyProcessInstanceRequest_ActivateInstruction;
struct ModifyProcessInstanceRequest_ActivateInstructionDefaultTypeInternal;
extern ModifyProcessInstanceRequest_ActivateInstructionDefaultTypeInternal _ModifyProcessInstanceRequest_ActivateInstruction_default_instance_;
class ModifyProcessInstanceRequest_TerminateInstruction;
struct ModifyProcessInstanceRequest_TerminateInstructionDefaultTypeInternal;
extern ModifyProcessInstanceRequest_TerminateInstructionDefaultTypeInternal _ModifyProcessInstanceRequest_TerminateInstruction_default_instance_;
class ModifyProcessInstanceRequest_VariableInstruction;
struct ModifyProcessInstanceRequest_VariableInstructionDefaultTypeInternal;
extern ModifyProcessInstanceRequest_VariableInstructionDefaultTypeInternal _ModifyProcessInstanceRequest_VariableInstruction_default_instance_;
class ModifyProcessInstanceResponse;
struct ModifyProcessInstanceResponseDefaultTypeInternal;
extern ModifyProcessInstanceResponseDefaultTypeInternal _ModifyProcessInstanceResponse_default_instance_;
class Partition;
struct PartitionDefaultTypeInternal;
extern PartitionDefaultTypeInternal _Partition_default_instance_;
class ProcessInstanceCreationStartInstruction;
struct ProcessInstanceCreationStartInstructionDefaultTypeInternal;
extern ProcessInstanceCreationStartInstructionDefaultTypeInternal _ProcessInstanceCreationStartInstruction_default_instance_;
class ProcessMetadata;
struct ProcessMetadataDefaultTypeInternal;
extern ProcessMetadataDefaultTypeInternal _ProcessMetadata_default_instance_;
class ProcessRequestObject;
struct ProcessRequestObjectDefaultTypeInternal;
extern ProcessRequestObjectDefaultTypeInternal _ProcessRequestObject_default_instance_;
class PublishMessageRequest;
struct PublishMessageRequestDefaultTypeInternal;
extern PublishMessageRequestDefaultTypeInternal _PublishMessageRequest_default_instance_;
class PublishMessageResponse;
struct PublishMessageResponseDefaultTypeInternal;
extern PublishMessageResponseDefaultTypeInternal _PublishMessageResponse_default_instance_;
class ResolveIncidentRequest;
struct ResolveIncidentRequestDefaultTypeInternal;
extern ResolveIncidentRequestDefaultTypeInternal _ResolveIncidentRequest_default_instance_;
class ResolveIncidentResponse;
struct ResolveIncidentResponseDefaultTypeInternal;
extern ResolveIncidentResponseDefaultTypeInternal _ResolveIncidentResponse_default_instance_;
class Resource;
struct ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class SetVariablesRequest;
struct SetVariablesRequestDefaultTypeInternal;
extern SetVariablesRequestDefaultTypeInternal _SetVariablesRequest_default_instance_;
class SetVariablesResponse;
struct SetVariablesResponseDefaultTypeInternal;
extern SetVariablesResponseDefaultTypeInternal _SetVariablesResponse_default_instance_;
class ThrowErrorRequest;
struct ThrowErrorRequestDefaultTypeInternal;
extern ThrowErrorRequestDefaultTypeInternal _ThrowErrorRequest_default_instance_;
class ThrowErrorResponse;
struct ThrowErrorResponseDefaultTypeInternal;
extern ThrowErrorResponseDefaultTypeInternal _ThrowErrorResponse_default_instance_;
class TopologyRequest;
struct TopologyRequestDefaultTypeInternal;
extern TopologyRequestDefaultTypeInternal _TopologyRequest_default_instance_;
class TopologyResponse;
struct TopologyResponseDefaultTypeInternal;
extern TopologyResponseDefaultTypeInternal _TopologyResponse_default_instance_;
class UpdateJobRetriesRequest;
struct UpdateJobRetriesRequestDefaultTypeInternal;
extern UpdateJobRetriesRequestDefaultTypeInternal _UpdateJobRetriesRequest_default_instance_;
class UpdateJobRetriesResponse;
struct UpdateJobRetriesResponseDefaultTypeInternal;
extern UpdateJobRetriesResponseDefaultTypeInternal _UpdateJobRetriesResponse_default_instance_;
}  // namespace gateway_protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::gateway_protocol::ActivateJobsRequest* Arena::CreateMaybeMessage<::gateway_protocol::ActivateJobsRequest>(Arena*);
template<> ::gateway_protocol::ActivateJobsResponse* Arena::CreateMaybeMessage<::gateway_protocol::ActivateJobsResponse>(Arena*);
template<> ::gateway_protocol::ActivatedJob* Arena::CreateMaybeMessage<::gateway_protocol::ActivatedJob>(Arena*);
template<> ::gateway_protocol::BrokerInfo* Arena::CreateMaybeMessage<::gateway_protocol::BrokerInfo>(Arena*);
template<> ::gateway_protocol::CancelProcessInstanceRequest* Arena::CreateMaybeMessage<::gateway_protocol::CancelProcessInstanceRequest>(Arena*);
template<> ::gateway_protocol::CancelProcessInstanceResponse* Arena::CreateMaybeMessage<::gateway_protocol::CancelProcessInstanceResponse>(Arena*);
template<> ::gateway_protocol::CompleteJobRequest* Arena::CreateMaybeMessage<::gateway_protocol::CompleteJobRequest>(Arena*);
template<> ::gateway_protocol::CompleteJobResponse* Arena::CreateMaybeMessage<::gateway_protocol::CompleteJobResponse>(Arena*);
template<> ::gateway_protocol::CreateProcessInstanceRequest* Arena::CreateMaybeMessage<::gateway_protocol::CreateProcessInstanceRequest>(Arena*);
template<> ::gateway_protocol::CreateProcessInstanceResponse* Arena::CreateMaybeMessage<::gateway_protocol::CreateProcessInstanceResponse>(Arena*);
template<> ::gateway_protocol::CreateProcessInstanceWithResultRequest* Arena::CreateMaybeMessage<::gateway_protocol::CreateProcessInstanceWithResultRequest>(Arena*);
template<> ::gateway_protocol::CreateProcessInstanceWithResultResponse* Arena::CreateMaybeMessage<::gateway_protocol::CreateProcessInstanceWithResultResponse>(Arena*);
template<> ::gateway_protocol::DecisionMetadata* Arena::CreateMaybeMessage<::gateway_protocol::DecisionMetadata>(Arena*);
template<> ::gateway_protocol::DecisionRequirementsMetadata* Arena::CreateMaybeMessage<::gateway_protocol::DecisionRequirementsMetadata>(Arena*);
template<> ::gateway_protocol::DeployProcessRequest* Arena::CreateMaybeMessage<::gateway_protocol::DeployProcessRequest>(Arena*);
template<> ::gateway_protocol::DeployProcessResponse* Arena::CreateMaybeMessage<::gateway_protocol::DeployProcessResponse>(Arena*);
template<> ::gateway_protocol::DeployResourceRequest* Arena::CreateMaybeMessage<::gateway_protocol::DeployResourceRequest>(Arena*);
template<> ::gateway_protocol::DeployResourceResponse* Arena::CreateMaybeMessage<::gateway_protocol::DeployResourceResponse>(Arena*);
template<> ::gateway_protocol::Deployment* Arena::CreateMaybeMessage<::gateway_protocol::Deployment>(Arena*);
template<> ::gateway_protocol::FailJobRequest* Arena::CreateMaybeMessage<::gateway_protocol::FailJobRequest>(Arena*);
template<> ::gateway_protocol::FailJobResponse* Arena::CreateMaybeMessage<::gateway_protocol::FailJobResponse>(Arena*);
template<> ::gateway_protocol::ModifyProcessInstanceRequest* Arena::CreateMaybeMessage<::gateway_protocol::ModifyProcessInstanceRequest>(Arena*);
template<> ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction* Arena::CreateMaybeMessage<::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction>(Arena*);
template<> ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction* Arena::CreateMaybeMessage<::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction>(Arena*);
template<> ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction* Arena::CreateMaybeMessage<::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction>(Arena*);
template<> ::gateway_protocol::ModifyProcessInstanceResponse* Arena::CreateMaybeMessage<::gateway_protocol::ModifyProcessInstanceResponse>(Arena*);
template<> ::gateway_protocol::Partition* Arena::CreateMaybeMessage<::gateway_protocol::Partition>(Arena*);
template<> ::gateway_protocol::ProcessInstanceCreationStartInstruction* Arena::CreateMaybeMessage<::gateway_protocol::ProcessInstanceCreationStartInstruction>(Arena*);
template<> ::gateway_protocol::ProcessMetadata* Arena::CreateMaybeMessage<::gateway_protocol::ProcessMetadata>(Arena*);
template<> ::gateway_protocol::ProcessRequestObject* Arena::CreateMaybeMessage<::gateway_protocol::ProcessRequestObject>(Arena*);
template<> ::gateway_protocol::PublishMessageRequest* Arena::CreateMaybeMessage<::gateway_protocol::PublishMessageRequest>(Arena*);
template<> ::gateway_protocol::PublishMessageResponse* Arena::CreateMaybeMessage<::gateway_protocol::PublishMessageResponse>(Arena*);
template<> ::gateway_protocol::ResolveIncidentRequest* Arena::CreateMaybeMessage<::gateway_protocol::ResolveIncidentRequest>(Arena*);
template<> ::gateway_protocol::ResolveIncidentResponse* Arena::CreateMaybeMessage<::gateway_protocol::ResolveIncidentResponse>(Arena*);
template<> ::gateway_protocol::Resource* Arena::CreateMaybeMessage<::gateway_protocol::Resource>(Arena*);
template<> ::gateway_protocol::SetVariablesRequest* Arena::CreateMaybeMessage<::gateway_protocol::SetVariablesRequest>(Arena*);
template<> ::gateway_protocol::SetVariablesResponse* Arena::CreateMaybeMessage<::gateway_protocol::SetVariablesResponse>(Arena*);
template<> ::gateway_protocol::ThrowErrorRequest* Arena::CreateMaybeMessage<::gateway_protocol::ThrowErrorRequest>(Arena*);
template<> ::gateway_protocol::ThrowErrorResponse* Arena::CreateMaybeMessage<::gateway_protocol::ThrowErrorResponse>(Arena*);
template<> ::gateway_protocol::TopologyRequest* Arena::CreateMaybeMessage<::gateway_protocol::TopologyRequest>(Arena*);
template<> ::gateway_protocol::TopologyResponse* Arena::CreateMaybeMessage<::gateway_protocol::TopologyResponse>(Arena*);
template<> ::gateway_protocol::UpdateJobRetriesRequest* Arena::CreateMaybeMessage<::gateway_protocol::UpdateJobRetriesRequest>(Arena*);
template<> ::gateway_protocol::UpdateJobRetriesResponse* Arena::CreateMaybeMessage<::gateway_protocol::UpdateJobRetriesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gateway_protocol {

enum Partition_PartitionBrokerRole : int {
  Partition_PartitionBrokerRole_LEADER = 0,
  Partition_PartitionBrokerRole_FOLLOWER = 1,
  Partition_PartitionBrokerRole_INACTIVE = 2,
  Partition_PartitionBrokerRole_Partition_PartitionBrokerRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Partition_PartitionBrokerRole_Partition_PartitionBrokerRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Partition_PartitionBrokerRole_IsValid(int value);
constexpr Partition_PartitionBrokerRole Partition_PartitionBrokerRole_PartitionBrokerRole_MIN = Partition_PartitionBrokerRole_LEADER;
constexpr Partition_PartitionBrokerRole Partition_PartitionBrokerRole_PartitionBrokerRole_MAX = Partition_PartitionBrokerRole_INACTIVE;
constexpr int Partition_PartitionBrokerRole_PartitionBrokerRole_ARRAYSIZE = Partition_PartitionBrokerRole_PartitionBrokerRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Partition_PartitionBrokerRole_descriptor();
template<typename T>
inline const std::string& Partition_PartitionBrokerRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Partition_PartitionBrokerRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Partition_PartitionBrokerRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Partition_PartitionBrokerRole_descriptor(), enum_t_value);
}
inline bool Partition_PartitionBrokerRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Partition_PartitionBrokerRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Partition_PartitionBrokerRole>(
    Partition_PartitionBrokerRole_descriptor(), name, value);
}
enum Partition_PartitionBrokerHealth : int {
  Partition_PartitionBrokerHealth_HEALTHY = 0,
  Partition_PartitionBrokerHealth_UNHEALTHY = 1,
  Partition_PartitionBrokerHealth_DEAD = 2,
  Partition_PartitionBrokerHealth_Partition_PartitionBrokerHealth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Partition_PartitionBrokerHealth_Partition_PartitionBrokerHealth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Partition_PartitionBrokerHealth_IsValid(int value);
constexpr Partition_PartitionBrokerHealth Partition_PartitionBrokerHealth_PartitionBrokerHealth_MIN = Partition_PartitionBrokerHealth_HEALTHY;
constexpr Partition_PartitionBrokerHealth Partition_PartitionBrokerHealth_PartitionBrokerHealth_MAX = Partition_PartitionBrokerHealth_DEAD;
constexpr int Partition_PartitionBrokerHealth_PartitionBrokerHealth_ARRAYSIZE = Partition_PartitionBrokerHealth_PartitionBrokerHealth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Partition_PartitionBrokerHealth_descriptor();
template<typename T>
inline const std::string& Partition_PartitionBrokerHealth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Partition_PartitionBrokerHealth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Partition_PartitionBrokerHealth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Partition_PartitionBrokerHealth_descriptor(), enum_t_value);
}
inline bool Partition_PartitionBrokerHealth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Partition_PartitionBrokerHealth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Partition_PartitionBrokerHealth>(
    Partition_PartitionBrokerHealth_descriptor(), name, value);
}
// ===================================================================

class ActivateJobsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ActivateJobsRequest) */ {
 public:
  inline ActivateJobsRequest() : ActivateJobsRequest(nullptr) {}
  ~ActivateJobsRequest() override;
  explicit PROTOBUF_CONSTEXPR ActivateJobsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivateJobsRequest(const ActivateJobsRequest& from);
  ActivateJobsRequest(ActivateJobsRequest&& from) noexcept
    : ActivateJobsRequest() {
    *this = ::std::move(from);
  }

  inline ActivateJobsRequest& operator=(const ActivateJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateJobsRequest& operator=(ActivateJobsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivateJobsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivateJobsRequest* internal_default_instance() {
    return reinterpret_cast<const ActivateJobsRequest*>(
               &_ActivateJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActivateJobsRequest& a, ActivateJobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateJobsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateJobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateJobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateJobsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivateJobsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActivateJobsRequest& from) {
    ActivateJobsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivateJobsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ActivateJobsRequest";
  }
  protected:
  explicit ActivateJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFetchVariableFieldNumber = 5,
    kTypeFieldNumber = 1,
    kWorkerFieldNumber = 2,
    kTimeoutFieldNumber = 3,
    kRequestTimeoutFieldNumber = 6,
    kMaxJobsToActivateFieldNumber = 4,
  };
  // repeated string fetchVariable = 5;
  int fetchvariable_size() const;
  private:
  int _internal_fetchvariable_size() const;
  public:
  void clear_fetchvariable();
  const std::string& fetchvariable(int index) const;
  std::string* mutable_fetchvariable(int index);
  void set_fetchvariable(int index, const std::string& value);
  void set_fetchvariable(int index, std::string&& value);
  void set_fetchvariable(int index, const char* value);
  void set_fetchvariable(int index, const char* value, size_t size);
  std::string* add_fetchvariable();
  void add_fetchvariable(const std::string& value);
  void add_fetchvariable(std::string&& value);
  void add_fetchvariable(const char* value);
  void add_fetchvariable(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fetchvariable() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fetchvariable();
  private:
  const std::string& _internal_fetchvariable(int index) const;
  std::string* _internal_add_fetchvariable();
  public:

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string worker = 2;
  void clear_worker();
  const std::string& worker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worker();
  PROTOBUF_NODISCARD std::string* release_worker();
  void set_allocated_worker(std::string* worker);
  private:
  const std::string& _internal_worker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worker(const std::string& value);
  std::string* _internal_mutable_worker();
  public:

  // int64 timeout = 3;
  void clear_timeout();
  int64_t timeout() const;
  void set_timeout(int64_t value);
  private:
  int64_t _internal_timeout() const;
  void _internal_set_timeout(int64_t value);
  public:

  // int64 requestTimeout = 6;
  void clear_requesttimeout();
  int64_t requesttimeout() const;
  void set_requesttimeout(int64_t value);
  private:
  int64_t _internal_requesttimeout() const;
  void _internal_set_requesttimeout(int64_t value);
  public:

  // int32 maxJobsToActivate = 4;
  void clear_maxjobstoactivate();
  int32_t maxjobstoactivate() const;
  void set_maxjobstoactivate(int32_t value);
  private:
  int32_t _internal_maxjobstoactivate() const;
  void _internal_set_maxjobstoactivate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ActivateJobsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fetchvariable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_;
    int64_t timeout_;
    int64_t requesttimeout_;
    int32_t maxjobstoactivate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ActivateJobsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ActivateJobsResponse) */ {
 public:
  inline ActivateJobsResponse() : ActivateJobsResponse(nullptr) {}
  ~ActivateJobsResponse() override;
  explicit PROTOBUF_CONSTEXPR ActivateJobsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivateJobsResponse(const ActivateJobsResponse& from);
  ActivateJobsResponse(ActivateJobsResponse&& from) noexcept
    : ActivateJobsResponse() {
    *this = ::std::move(from);
  }

  inline ActivateJobsResponse& operator=(const ActivateJobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateJobsResponse& operator=(ActivateJobsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivateJobsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivateJobsResponse* internal_default_instance() {
    return reinterpret_cast<const ActivateJobsResponse*>(
               &_ActivateJobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActivateJobsResponse& a, ActivateJobsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateJobsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateJobsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateJobsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateJobsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivateJobsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActivateJobsResponse& from) {
    ActivateJobsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivateJobsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ActivateJobsResponse";
  }
  protected:
  explicit ActivateJobsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobsFieldNumber = 1,
  };
  // repeated .gateway_protocol.ActivatedJob jobs = 1;
  int jobs_size() const;
  private:
  int _internal_jobs_size() const;
  public:
  void clear_jobs();
  ::gateway_protocol::ActivatedJob* mutable_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ActivatedJob >*
      mutable_jobs();
  private:
  const ::gateway_protocol::ActivatedJob& _internal_jobs(int index) const;
  ::gateway_protocol::ActivatedJob* _internal_add_jobs();
  public:
  const ::gateway_protocol::ActivatedJob& jobs(int index) const;
  ::gateway_protocol::ActivatedJob* add_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ActivatedJob >&
      jobs() const;

  // @@protoc_insertion_point(class_scope:gateway_protocol.ActivateJobsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ActivatedJob > jobs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ActivatedJob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ActivatedJob) */ {
 public:
  inline ActivatedJob() : ActivatedJob(nullptr) {}
  ~ActivatedJob() override;
  explicit PROTOBUF_CONSTEXPR ActivatedJob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivatedJob(const ActivatedJob& from);
  ActivatedJob(ActivatedJob&& from) noexcept
    : ActivatedJob() {
    *this = ::std::move(from);
  }

  inline ActivatedJob& operator=(const ActivatedJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivatedJob& operator=(ActivatedJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivatedJob& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivatedJob* internal_default_instance() {
    return reinterpret_cast<const ActivatedJob*>(
               &_ActivatedJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActivatedJob& a, ActivatedJob& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivatedJob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivatedJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivatedJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivatedJob>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivatedJob& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActivatedJob& from) {
    ActivatedJob::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivatedJob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ActivatedJob";
  }
  protected:
  explicit ActivatedJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kBpmnProcessIdFieldNumber = 4,
    kElementIdFieldNumber = 7,
    kCustomHeadersFieldNumber = 9,
    kWorkerFieldNumber = 10,
    kVariablesFieldNumber = 13,
    kKeyFieldNumber = 1,
    kProcessInstanceKeyFieldNumber = 3,
    kProcessDefinitionKeyFieldNumber = 6,
    kElementInstanceKeyFieldNumber = 8,
    kProcessDefinitionVersionFieldNumber = 5,
    kRetriesFieldNumber = 11,
    kDeadlineFieldNumber = 12,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string bpmnProcessId = 4;
  void clear_bpmnprocessid();
  const std::string& bpmnprocessid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bpmnprocessid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bpmnprocessid();
  PROTOBUF_NODISCARD std::string* release_bpmnprocessid();
  void set_allocated_bpmnprocessid(std::string* bpmnprocessid);
  private:
  const std::string& _internal_bpmnprocessid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bpmnprocessid(const std::string& value);
  std::string* _internal_mutable_bpmnprocessid();
  public:

  // string elementId = 7;
  void clear_elementid();
  const std::string& elementid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_elementid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_elementid();
  PROTOBUF_NODISCARD std::string* release_elementid();
  void set_allocated_elementid(std::string* elementid);
  private:
  const std::string& _internal_elementid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_elementid(const std::string& value);
  std::string* _internal_mutable_elementid();
  public:

  // string customHeaders = 9;
  void clear_customheaders();
  const std::string& customheaders() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customheaders(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customheaders();
  PROTOBUF_NODISCARD std::string* release_customheaders();
  void set_allocated_customheaders(std::string* customheaders);
  private:
  const std::string& _internal_customheaders() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customheaders(const std::string& value);
  std::string* _internal_mutable_customheaders();
  public:

  // string worker = 10;
  void clear_worker();
  const std::string& worker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worker();
  PROTOBUF_NODISCARD std::string* release_worker();
  void set_allocated_worker(std::string* worker);
  private:
  const std::string& _internal_worker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worker(const std::string& value);
  std::string* _internal_mutable_worker();
  public:

  // string variables = 13;
  void clear_variables();
  const std::string& variables() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variables(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variables();
  PROTOBUF_NODISCARD std::string* release_variables();
  void set_allocated_variables(std::string* variables);
  private:
  const std::string& _internal_variables() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variables(const std::string& value);
  std::string* _internal_mutable_variables();
  public:

  // int64 key = 1;
  void clear_key();
  int64_t key() const;
  void set_key(int64_t value);
  private:
  int64_t _internal_key() const;
  void _internal_set_key(int64_t value);
  public:

  // int64 processInstanceKey = 3;
  void clear_processinstancekey();
  int64_t processinstancekey() const;
  void set_processinstancekey(int64_t value);
  private:
  int64_t _internal_processinstancekey() const;
  void _internal_set_processinstancekey(int64_t value);
  public:

  // int64 processDefinitionKey = 6;
  void clear_processdefinitionkey();
  int64_t processdefinitionkey() const;
  void set_processdefinitionkey(int64_t value);
  private:
  int64_t _internal_processdefinitionkey() const;
  void _internal_set_processdefinitionkey(int64_t value);
  public:

  // int64 elementInstanceKey = 8;
  void clear_elementinstancekey();
  int64_t elementinstancekey() const;
  void set_elementinstancekey(int64_t value);
  private:
  int64_t _internal_elementinstancekey() const;
  void _internal_set_elementinstancekey(int64_t value);
  public:

  // int32 processDefinitionVersion = 5;
  void clear_processdefinitionversion();
  int32_t processdefinitionversion() const;
  void set_processdefinitionversion(int32_t value);
  private:
  int32_t _internal_processdefinitionversion() const;
  void _internal_set_processdefinitionversion(int32_t value);
  public:

  // int32 retries = 11;
  void clear_retries();
  int32_t retries() const;
  void set_retries(int32_t value);
  private:
  int32_t _internal_retries() const;
  void _internal_set_retries(int32_t value);
  public:

  // int64 deadline = 12;
  void clear_deadline();
  int64_t deadline() const;
  void set_deadline(int64_t value);
  private:
  int64_t _internal_deadline() const;
  void _internal_set_deadline(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ActivatedJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bpmnprocessid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr elementid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customheaders_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variables_;
    int64_t key_;
    int64_t processinstancekey_;
    int64_t processdefinitionkey_;
    int64_t elementinstancekey_;
    int32_t processdefinitionversion_;
    int32_t retries_;
    int64_t deadline_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CancelProcessInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.CancelProcessInstanceRequest) */ {
 public:
  inline CancelProcessInstanceRequest() : CancelProcessInstanceRequest(nullptr) {}
  ~CancelProcessInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR CancelProcessInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelProcessInstanceRequest(const CancelProcessInstanceRequest& from);
  CancelProcessInstanceRequest(CancelProcessInstanceRequest&& from) noexcept
    : CancelProcessInstanceRequest() {
    *this = ::std::move(from);
  }

  inline CancelProcessInstanceRequest& operator=(const CancelProcessInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelProcessInstanceRequest& operator=(CancelProcessInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelProcessInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelProcessInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const CancelProcessInstanceRequest*>(
               &_CancelProcessInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelProcessInstanceRequest& a, CancelProcessInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelProcessInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelProcessInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelProcessInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelProcessInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelProcessInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelProcessInstanceRequest& from) {
    CancelProcessInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelProcessInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.CancelProcessInstanceRequest";
  }
  protected:
  explicit CancelProcessInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessInstanceKeyFieldNumber = 1,
  };
  // int64 processInstanceKey = 1;
  void clear_processinstancekey();
  int64_t processinstancekey() const;
  void set_processinstancekey(int64_t value);
  private:
  int64_t _internal_processinstancekey() const;
  void _internal_set_processinstancekey(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.CancelProcessInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t processinstancekey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CancelProcessInstanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gateway_protocol.CancelProcessInstanceResponse) */ {
 public:
  inline CancelProcessInstanceResponse() : CancelProcessInstanceResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CancelProcessInstanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelProcessInstanceResponse(const CancelProcessInstanceResponse& from);
  CancelProcessInstanceResponse(CancelProcessInstanceResponse&& from) noexcept
    : CancelProcessInstanceResponse() {
    *this = ::std::move(from);
  }

  inline CancelProcessInstanceResponse& operator=(const CancelProcessInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelProcessInstanceResponse& operator=(CancelProcessInstanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelProcessInstanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelProcessInstanceResponse* internal_default_instance() {
    return reinterpret_cast<const CancelProcessInstanceResponse*>(
               &_CancelProcessInstanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CancelProcessInstanceResponse& a, CancelProcessInstanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelProcessInstanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelProcessInstanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelProcessInstanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelProcessInstanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelProcessInstanceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelProcessInstanceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.CancelProcessInstanceResponse";
  }
  protected:
  explicit CancelProcessInstanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gateway_protocol.CancelProcessInstanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CompleteJobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.CompleteJobRequest) */ {
 public:
  inline CompleteJobRequest() : CompleteJobRequest(nullptr) {}
  ~CompleteJobRequest() override;
  explicit PROTOBUF_CONSTEXPR CompleteJobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteJobRequest(const CompleteJobRequest& from);
  CompleteJobRequest(CompleteJobRequest&& from) noexcept
    : CompleteJobRequest() {
    *this = ::std::move(from);
  }

  inline CompleteJobRequest& operator=(const CompleteJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteJobRequest& operator=(CompleteJobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompleteJobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteJobRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteJobRequest*>(
               &_CompleteJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CompleteJobRequest& a, CompleteJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteJobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompleteJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompleteJobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompleteJobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompleteJobRequest& from) {
    CompleteJobRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteJobRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.CompleteJobRequest";
  }
  protected:
  explicit CompleteJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 2,
    kJobKeyFieldNumber = 1,
  };
  // string variables = 2;
  void clear_variables();
  const std::string& variables() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variables(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variables();
  PROTOBUF_NODISCARD std::string* release_variables();
  void set_allocated_variables(std::string* variables);
  private:
  const std::string& _internal_variables() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variables(const std::string& value);
  std::string* _internal_mutable_variables();
  public:

  // int64 jobKey = 1;
  void clear_jobkey();
  int64_t jobkey() const;
  void set_jobkey(int64_t value);
  private:
  int64_t _internal_jobkey() const;
  void _internal_set_jobkey(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.CompleteJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variables_;
    int64_t jobkey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CompleteJobResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gateway_protocol.CompleteJobResponse) */ {
 public:
  inline CompleteJobResponse() : CompleteJobResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CompleteJobResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteJobResponse(const CompleteJobResponse& from);
  CompleteJobResponse(CompleteJobResponse&& from) noexcept
    : CompleteJobResponse() {
    *this = ::std::move(from);
  }

  inline CompleteJobResponse& operator=(const CompleteJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteJobResponse& operator=(CompleteJobResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompleteJobResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteJobResponse* internal_default_instance() {
    return reinterpret_cast<const CompleteJobResponse*>(
               &_CompleteJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CompleteJobResponse& a, CompleteJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteJobResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompleteJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompleteJobResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CompleteJobResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CompleteJobResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.CompleteJobResponse";
  }
  protected:
  explicit CompleteJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gateway_protocol.CompleteJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CreateProcessInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.CreateProcessInstanceRequest) */ {
 public:
  inline CreateProcessInstanceRequest() : CreateProcessInstanceRequest(nullptr) {}
  ~CreateProcessInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateProcessInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProcessInstanceRequest(const CreateProcessInstanceRequest& from);
  CreateProcessInstanceRequest(CreateProcessInstanceRequest&& from) noexcept
    : CreateProcessInstanceRequest() {
    *this = ::std::move(from);
  }

  inline CreateProcessInstanceRequest& operator=(const CreateProcessInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProcessInstanceRequest& operator=(CreateProcessInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProcessInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProcessInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProcessInstanceRequest*>(
               &_CreateProcessInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateProcessInstanceRequest& a, CreateProcessInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProcessInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProcessInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProcessInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProcessInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProcessInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProcessInstanceRequest& from) {
    CreateProcessInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProcessInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.CreateProcessInstanceRequest";
  }
  protected:
  explicit CreateProcessInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartInstructionsFieldNumber = 5,
    kBpmnProcessIdFieldNumber = 2,
    kVariablesFieldNumber = 4,
    kProcessDefinitionKeyFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // repeated .gateway_protocol.ProcessInstanceCreationStartInstruction startInstructions = 5;
  int startinstructions_size() const;
  private:
  int _internal_startinstructions_size() const;
  public:
  void clear_startinstructions();
  ::gateway_protocol::ProcessInstanceCreationStartInstruction* mutable_startinstructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessInstanceCreationStartInstruction >*
      mutable_startinstructions();
  private:
  const ::gateway_protocol::ProcessInstanceCreationStartInstruction& _internal_startinstructions(int index) const;
  ::gateway_protocol::ProcessInstanceCreationStartInstruction* _internal_add_startinstructions();
  public:
  const ::gateway_protocol::ProcessInstanceCreationStartInstruction& startinstructions(int index) const;
  ::gateway_protocol::ProcessInstanceCreationStartInstruction* add_startinstructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessInstanceCreationStartInstruction >&
      startinstructions() const;

  // string bpmnProcessId = 2;
  void clear_bpmnprocessid();
  const std::string& bpmnprocessid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bpmnprocessid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bpmnprocessid();
  PROTOBUF_NODISCARD std::string* release_bpmnprocessid();
  void set_allocated_bpmnprocessid(std::string* bpmnprocessid);
  private:
  const std::string& _internal_bpmnprocessid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bpmnprocessid(const std::string& value);
  std::string* _internal_mutable_bpmnprocessid();
  public:

  // string variables = 4;
  void clear_variables();
  const std::string& variables() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variables(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variables();
  PROTOBUF_NODISCARD std::string* release_variables();
  void set_allocated_variables(std::string* variables);
  private:
  const std::string& _internal_variables() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variables(const std::string& value);
  std::string* _internal_mutable_variables();
  public:

  // int64 processDefinitionKey = 1;
  void clear_processdefinitionkey();
  int64_t processdefinitionkey() const;
  void set_processdefinitionkey(int64_t value);
  private:
  int64_t _internal_processdefinitionkey() const;
  void _internal_set_processdefinitionkey(int64_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.CreateProcessInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessInstanceCreationStartInstruction > startinstructions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bpmnprocessid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variables_;
    int64_t processdefinitionkey_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ProcessInstanceCreationStartInstruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ProcessInstanceCreationStartInstruction) */ {
 public:
  inline ProcessInstanceCreationStartInstruction() : ProcessInstanceCreationStartInstruction(nullptr) {}
  ~ProcessInstanceCreationStartInstruction() override;
  explicit PROTOBUF_CONSTEXPR ProcessInstanceCreationStartInstruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessInstanceCreationStartInstruction(const ProcessInstanceCreationStartInstruction& from);
  ProcessInstanceCreationStartInstruction(ProcessInstanceCreationStartInstruction&& from) noexcept
    : ProcessInstanceCreationStartInstruction() {
    *this = ::std::move(from);
  }

  inline ProcessInstanceCreationStartInstruction& operator=(const ProcessInstanceCreationStartInstruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessInstanceCreationStartInstruction& operator=(ProcessInstanceCreationStartInstruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessInstanceCreationStartInstruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessInstanceCreationStartInstruction* internal_default_instance() {
    return reinterpret_cast<const ProcessInstanceCreationStartInstruction*>(
               &_ProcessInstanceCreationStartInstruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProcessInstanceCreationStartInstruction& a, ProcessInstanceCreationStartInstruction& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessInstanceCreationStartInstruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessInstanceCreationStartInstruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessInstanceCreationStartInstruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessInstanceCreationStartInstruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessInstanceCreationStartInstruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessInstanceCreationStartInstruction& from) {
    ProcessInstanceCreationStartInstruction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessInstanceCreationStartInstruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ProcessInstanceCreationStartInstruction";
  }
  protected:
  explicit ProcessInstanceCreationStartInstruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementIdFieldNumber = 1,
  };
  // string elementId = 1;
  void clear_elementid();
  const std::string& elementid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_elementid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_elementid();
  PROTOBUF_NODISCARD std::string* release_elementid();
  void set_allocated_elementid(std::string* elementid);
  private:
  const std::string& _internal_elementid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_elementid(const std::string& value);
  std::string* _internal_mutable_elementid();
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ProcessInstanceCreationStartInstruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr elementid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CreateProcessInstanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.CreateProcessInstanceResponse) */ {
 public:
  inline CreateProcessInstanceResponse() : CreateProcessInstanceResponse(nullptr) {}
  ~CreateProcessInstanceResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateProcessInstanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProcessInstanceResponse(const CreateProcessInstanceResponse& from);
  CreateProcessInstanceResponse(CreateProcessInstanceResponse&& from) noexcept
    : CreateProcessInstanceResponse() {
    *this = ::std::move(from);
  }

  inline CreateProcessInstanceResponse& operator=(const CreateProcessInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProcessInstanceResponse& operator=(CreateProcessInstanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProcessInstanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProcessInstanceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProcessInstanceResponse*>(
               &_CreateProcessInstanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateProcessInstanceResponse& a, CreateProcessInstanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProcessInstanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProcessInstanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProcessInstanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProcessInstanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProcessInstanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProcessInstanceResponse& from) {
    CreateProcessInstanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProcessInstanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.CreateProcessInstanceResponse";
  }
  protected:
  explicit CreateProcessInstanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBpmnProcessIdFieldNumber = 2,
    kProcessDefinitionKeyFieldNumber = 1,
    kProcessInstanceKeyFieldNumber = 4,
    kVersionFieldNumber = 3,
  };
  // string bpmnProcessId = 2;
  void clear_bpmnprocessid();
  const std::string& bpmnprocessid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bpmnprocessid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bpmnprocessid();
  PROTOBUF_NODISCARD std::string* release_bpmnprocessid();
  void set_allocated_bpmnprocessid(std::string* bpmnprocessid);
  private:
  const std::string& _internal_bpmnprocessid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bpmnprocessid(const std::string& value);
  std::string* _internal_mutable_bpmnprocessid();
  public:

  // int64 processDefinitionKey = 1;
  void clear_processdefinitionkey();
  int64_t processdefinitionkey() const;
  void set_processdefinitionkey(int64_t value);
  private:
  int64_t _internal_processdefinitionkey() const;
  void _internal_set_processdefinitionkey(int64_t value);
  public:

  // int64 processInstanceKey = 4;
  void clear_processinstancekey();
  int64_t processinstancekey() const;
  void set_processinstancekey(int64_t value);
  private:
  int64_t _internal_processinstancekey() const;
  void _internal_set_processinstancekey(int64_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.CreateProcessInstanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bpmnprocessid_;
    int64_t processdefinitionkey_;
    int64_t processinstancekey_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CreateProcessInstanceWithResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.CreateProcessInstanceWithResultRequest) */ {
 public:
  inline CreateProcessInstanceWithResultRequest() : CreateProcessInstanceWithResultRequest(nullptr) {}
  ~CreateProcessInstanceWithResultRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateProcessInstanceWithResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProcessInstanceWithResultRequest(const CreateProcessInstanceWithResultRequest& from);
  CreateProcessInstanceWithResultRequest(CreateProcessInstanceWithResultRequest&& from) noexcept
    : CreateProcessInstanceWithResultRequest() {
    *this = ::std::move(from);
  }

  inline CreateProcessInstanceWithResultRequest& operator=(const CreateProcessInstanceWithResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProcessInstanceWithResultRequest& operator=(CreateProcessInstanceWithResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProcessInstanceWithResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProcessInstanceWithResultRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProcessInstanceWithResultRequest*>(
               &_CreateProcessInstanceWithResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateProcessInstanceWithResultRequest& a, CreateProcessInstanceWithResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProcessInstanceWithResultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProcessInstanceWithResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProcessInstanceWithResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProcessInstanceWithResultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProcessInstanceWithResultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProcessInstanceWithResultRequest& from) {
    CreateProcessInstanceWithResultRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProcessInstanceWithResultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.CreateProcessInstanceWithResultRequest";
  }
  protected:
  explicit CreateProcessInstanceWithResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFetchVariablesFieldNumber = 3,
    kRequestFieldNumber = 1,
    kRequestTimeoutFieldNumber = 2,
  };
  // repeated string fetchVariables = 3;
  int fetchvariables_size() const;
  private:
  int _internal_fetchvariables_size() const;
  public:
  void clear_fetchvariables();
  const std::string& fetchvariables(int index) const;
  std::string* mutable_fetchvariables(int index);
  void set_fetchvariables(int index, const std::string& value);
  void set_fetchvariables(int index, std::string&& value);
  void set_fetchvariables(int index, const char* value);
  void set_fetchvariables(int index, const char* value, size_t size);
  std::string* add_fetchvariables();
  void add_fetchvariables(const std::string& value);
  void add_fetchvariables(std::string&& value);
  void add_fetchvariables(const char* value);
  void add_fetchvariables(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fetchvariables() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fetchvariables();
  private:
  const std::string& _internal_fetchvariables(int index) const;
  std::string* _internal_add_fetchvariables();
  public:

  // .gateway_protocol.CreateProcessInstanceRequest request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::gateway_protocol::CreateProcessInstanceRequest& request() const;
  PROTOBUF_NODISCARD ::gateway_protocol::CreateProcessInstanceRequest* release_request();
  ::gateway_protocol::CreateProcessInstanceRequest* mutable_request();
  void set_allocated_request(::gateway_protocol::CreateProcessInstanceRequest* request);
  private:
  const ::gateway_protocol::CreateProcessInstanceRequest& _internal_request() const;
  ::gateway_protocol::CreateProcessInstanceRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::gateway_protocol::CreateProcessInstanceRequest* request);
  ::gateway_protocol::CreateProcessInstanceRequest* unsafe_arena_release_request();

  // int64 requestTimeout = 2;
  void clear_requesttimeout();
  int64_t requesttimeout() const;
  void set_requesttimeout(int64_t value);
  private:
  int64_t _internal_requesttimeout() const;
  void _internal_set_requesttimeout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.CreateProcessInstanceWithResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fetchvariables_;
    ::gateway_protocol::CreateProcessInstanceRequest* request_;
    int64_t requesttimeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CreateProcessInstanceWithResultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.CreateProcessInstanceWithResultResponse) */ {
 public:
  inline CreateProcessInstanceWithResultResponse() : CreateProcessInstanceWithResultResponse(nullptr) {}
  ~CreateProcessInstanceWithResultResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateProcessInstanceWithResultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProcessInstanceWithResultResponse(const CreateProcessInstanceWithResultResponse& from);
  CreateProcessInstanceWithResultResponse(CreateProcessInstanceWithResultResponse&& from) noexcept
    : CreateProcessInstanceWithResultResponse() {
    *this = ::std::move(from);
  }

  inline CreateProcessInstanceWithResultResponse& operator=(const CreateProcessInstanceWithResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProcessInstanceWithResultResponse& operator=(CreateProcessInstanceWithResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProcessInstanceWithResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProcessInstanceWithResultResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProcessInstanceWithResultResponse*>(
               &_CreateProcessInstanceWithResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateProcessInstanceWithResultResponse& a, CreateProcessInstanceWithResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProcessInstanceWithResultResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProcessInstanceWithResultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProcessInstanceWithResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProcessInstanceWithResultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProcessInstanceWithResultResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProcessInstanceWithResultResponse& from) {
    CreateProcessInstanceWithResultResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProcessInstanceWithResultResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.CreateProcessInstanceWithResultResponse";
  }
  protected:
  explicit CreateProcessInstanceWithResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBpmnProcessIdFieldNumber = 2,
    kVariablesFieldNumber = 5,
    kProcessDefinitionKeyFieldNumber = 1,
    kProcessInstanceKeyFieldNumber = 4,
    kVersionFieldNumber = 3,
  };
  // string bpmnProcessId = 2;
  void clear_bpmnprocessid();
  const std::string& bpmnprocessid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bpmnprocessid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bpmnprocessid();
  PROTOBUF_NODISCARD std::string* release_bpmnprocessid();
  void set_allocated_bpmnprocessid(std::string* bpmnprocessid);
  private:
  const std::string& _internal_bpmnprocessid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bpmnprocessid(const std::string& value);
  std::string* _internal_mutable_bpmnprocessid();
  public:

  // string variables = 5;
  void clear_variables();
  const std::string& variables() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variables(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variables();
  PROTOBUF_NODISCARD std::string* release_variables();
  void set_allocated_variables(std::string* variables);
  private:
  const std::string& _internal_variables() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variables(const std::string& value);
  std::string* _internal_mutable_variables();
  public:

  // int64 processDefinitionKey = 1;
  void clear_processdefinitionkey();
  int64_t processdefinitionkey() const;
  void set_processdefinitionkey(int64_t value);
  private:
  int64_t _internal_processdefinitionkey() const;
  void _internal_set_processdefinitionkey(int64_t value);
  public:

  // int64 processInstanceKey = 4;
  void clear_processinstancekey();
  int64_t processinstancekey() const;
  void set_processinstancekey(int64_t value);
  private:
  int64_t _internal_processinstancekey() const;
  void _internal_set_processinstancekey(int64_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.CreateProcessInstanceWithResultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bpmnprocessid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variables_;
    int64_t processdefinitionkey_;
    int64_t processinstancekey_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class DeployProcessRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.DeployProcessRequest) */ {
 public:
  inline DeployProcessRequest() : DeployProcessRequest(nullptr) {}
  ~DeployProcessRequest() override;
  explicit PROTOBUF_CONSTEXPR DeployProcessRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployProcessRequest(const DeployProcessRequest& from);
  DeployProcessRequest(DeployProcessRequest&& from) noexcept
    : DeployProcessRequest() {
    *this = ::std::move(from);
  }

  inline DeployProcessRequest& operator=(const DeployProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployProcessRequest& operator=(DeployProcessRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployProcessRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployProcessRequest* internal_default_instance() {
    return reinterpret_cast<const DeployProcessRequest*>(
               &_DeployProcessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeployProcessRequest& a, DeployProcessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployProcessRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployProcessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployProcessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployProcessRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployProcessRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeployProcessRequest& from) {
    DeployProcessRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployProcessRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.DeployProcessRequest";
  }
  protected:
  explicit DeployProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
  };
  // repeated .gateway_protocol.ProcessRequestObject processes = 1;
  int processes_size() const;
  private:
  int _internal_processes_size() const;
  public:
  void clear_processes();
  ::gateway_protocol::ProcessRequestObject* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessRequestObject >*
      mutable_processes();
  private:
  const ::gateway_protocol::ProcessRequestObject& _internal_processes(int index) const;
  ::gateway_protocol::ProcessRequestObject* _internal_add_processes();
  public:
  const ::gateway_protocol::ProcessRequestObject& processes(int index) const;
  ::gateway_protocol::ProcessRequestObject* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessRequestObject >&
      processes() const;

  // @@protoc_insertion_point(class_scope:gateway_protocol.DeployProcessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessRequestObject > processes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ProcessRequestObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ProcessRequestObject) */ {
 public:
  inline ProcessRequestObject() : ProcessRequestObject(nullptr) {}
  ~ProcessRequestObject() override;
  explicit PROTOBUF_CONSTEXPR ProcessRequestObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequestObject(const ProcessRequestObject& from);
  ProcessRequestObject(ProcessRequestObject&& from) noexcept
    : ProcessRequestObject() {
    *this = ::std::move(from);
  }

  inline ProcessRequestObject& operator=(const ProcessRequestObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequestObject& operator=(ProcessRequestObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequestObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRequestObject* internal_default_instance() {
    return reinterpret_cast<const ProcessRequestObject*>(
               &_ProcessRequestObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProcessRequestObject& a, ProcessRequestObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequestObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequestObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequestObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequestObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequestObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessRequestObject& from) {
    ProcessRequestObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequestObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ProcessRequestObject";
  }
  protected:
  explicit ProcessRequestObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDefinitionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes definition = 2;
  void clear_definition();
  const std::string& definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_definition();
  PROTOBUF_NODISCARD std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  private:
  const std::string& _internal_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ProcessRequestObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class DeployProcessResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.DeployProcessResponse) */ {
 public:
  inline DeployProcessResponse() : DeployProcessResponse(nullptr) {}
  ~DeployProcessResponse() override;
  explicit PROTOBUF_CONSTEXPR DeployProcessResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployProcessResponse(const DeployProcessResponse& from);
  DeployProcessResponse(DeployProcessResponse&& from) noexcept
    : DeployProcessResponse() {
    *this = ::std::move(from);
  }

  inline DeployProcessResponse& operator=(const DeployProcessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployProcessResponse& operator=(DeployProcessResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployProcessResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployProcessResponse* internal_default_instance() {
    return reinterpret_cast<const DeployProcessResponse*>(
               &_DeployProcessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeployProcessResponse& a, DeployProcessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployProcessResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployProcessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployProcessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployProcessResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployProcessResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeployProcessResponse& from) {
    DeployProcessResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployProcessResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.DeployProcessResponse";
  }
  protected:
  explicit DeployProcessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .gateway_protocol.ProcessMetadata processes = 2;
  int processes_size() const;
  private:
  int _internal_processes_size() const;
  public:
  void clear_processes();
  ::gateway_protocol::ProcessMetadata* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessMetadata >*
      mutable_processes();
  private:
  const ::gateway_protocol::ProcessMetadata& _internal_processes(int index) const;
  ::gateway_protocol::ProcessMetadata* _internal_add_processes();
  public:
  const ::gateway_protocol::ProcessMetadata& processes(int index) const;
  ::gateway_protocol::ProcessMetadata* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessMetadata >&
      processes() const;

  // int64 key = 1;
  void clear_key();
  int64_t key() const;
  void set_key(int64_t value);
  private:
  int64_t _internal_key() const;
  void _internal_set_key(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.DeployProcessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessMetadata > processes_;
    int64_t key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class DeployResourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.DeployResourceRequest) */ {
 public:
  inline DeployResourceRequest() : DeployResourceRequest(nullptr) {}
  ~DeployResourceRequest() override;
  explicit PROTOBUF_CONSTEXPR DeployResourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployResourceRequest(const DeployResourceRequest& from);
  DeployResourceRequest(DeployResourceRequest&& from) noexcept
    : DeployResourceRequest() {
    *this = ::std::move(from);
  }

  inline DeployResourceRequest& operator=(const DeployResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployResourceRequest& operator=(DeployResourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployResourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployResourceRequest* internal_default_instance() {
    return reinterpret_cast<const DeployResourceRequest*>(
               &_DeployResourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeployResourceRequest& a, DeployResourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployResourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployResourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployResourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployResourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployResourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeployResourceRequest& from) {
    DeployResourceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployResourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.DeployResourceRequest";
  }
  protected:
  explicit DeployResourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
  };
  // repeated .gateway_protocol.Resource resources = 1;
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  ::gateway_protocol::Resource* mutable_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Resource >*
      mutable_resources();
  private:
  const ::gateway_protocol::Resource& _internal_resources(int index) const;
  ::gateway_protocol::Resource* _internal_add_resources();
  public:
  const ::gateway_protocol::Resource& resources(int index) const;
  ::gateway_protocol::Resource* add_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Resource >&
      resources() const;

  // @@protoc_insertion_point(class_scope:gateway_protocol.DeployResourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Resource > resources_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class Resource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.Resource) */ {
 public:
  inline Resource() : Resource(nullptr) {}
  ~Resource() override;
  explicit PROTOBUF_CONSTEXPR Resource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Resource(const Resource& from);
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Resource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Resource& from) {
    Resource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.Resource";
  }
  protected:
  explicit Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class DeployResourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.DeployResourceResponse) */ {
 public:
  inline DeployResourceResponse() : DeployResourceResponse(nullptr) {}
  ~DeployResourceResponse() override;
  explicit PROTOBUF_CONSTEXPR DeployResourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployResourceResponse(const DeployResourceResponse& from);
  DeployResourceResponse(DeployResourceResponse&& from) noexcept
    : DeployResourceResponse() {
    *this = ::std::move(from);
  }

  inline DeployResourceResponse& operator=(const DeployResourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployResourceResponse& operator=(DeployResourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployResourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployResourceResponse* internal_default_instance() {
    return reinterpret_cast<const DeployResourceResponse*>(
               &_DeployResourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeployResourceResponse& a, DeployResourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployResourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployResourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployResourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployResourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployResourceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeployResourceResponse& from) {
    DeployResourceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployResourceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.DeployResourceResponse";
  }
  protected:
  explicit DeployResourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeploymentsFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .gateway_protocol.Deployment deployments = 2;
  int deployments_size() const;
  private:
  int _internal_deployments_size() const;
  public:
  void clear_deployments();
  ::gateway_protocol::Deployment* mutable_deployments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Deployment >*
      mutable_deployments();
  private:
  const ::gateway_protocol::Deployment& _internal_deployments(int index) const;
  ::gateway_protocol::Deployment* _internal_add_deployments();
  public:
  const ::gateway_protocol::Deployment& deployments(int index) const;
  ::gateway_protocol::Deployment* add_deployments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Deployment >&
      deployments() const;

  // int64 key = 1;
  void clear_key();
  int64_t key() const;
  void set_key(int64_t value);
  private:
  int64_t _internal_key() const;
  void _internal_set_key(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.DeployResourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Deployment > deployments_;
    int64_t key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class Deployment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.Deployment) */ {
 public:
  inline Deployment() : Deployment(nullptr) {}
  ~Deployment() override;
  explicit PROTOBUF_CONSTEXPR Deployment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deployment(const Deployment& from);
  Deployment(Deployment&& from) noexcept
    : Deployment() {
    *this = ::std::move(from);
  }

  inline Deployment& operator=(const Deployment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deployment& operator=(Deployment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deployment& default_instance() {
    return *internal_default_instance();
  }
  enum MetadataCase {
    kProcess = 1,
    kDecision = 2,
    kDecisionRequirements = 3,
    METADATA_NOT_SET = 0,
  };

  static inline const Deployment* internal_default_instance() {
    return reinterpret_cast<const Deployment*>(
               &_Deployment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Deployment& a, Deployment& b) {
    a.Swap(&b);
  }
  inline void Swap(Deployment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deployment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Deployment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Deployment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Deployment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Deployment& from) {
    Deployment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deployment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.Deployment";
  }
  protected:
  explicit Deployment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 1,
    kDecisionFieldNumber = 2,
    kDecisionRequirementsFieldNumber = 3,
  };
  // .gateway_protocol.ProcessMetadata process = 1;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::gateway_protocol::ProcessMetadata& process() const;
  PROTOBUF_NODISCARD ::gateway_protocol::ProcessMetadata* release_process();
  ::gateway_protocol::ProcessMetadata* mutable_process();
  void set_allocated_process(::gateway_protocol::ProcessMetadata* process);
  private:
  const ::gateway_protocol::ProcessMetadata& _internal_process() const;
  ::gateway_protocol::ProcessMetadata* _internal_mutable_process();
  public:
  void unsafe_arena_set_allocated_process(
      ::gateway_protocol::ProcessMetadata* process);
  ::gateway_protocol::ProcessMetadata* unsafe_arena_release_process();

  // .gateway_protocol.DecisionMetadata decision = 2;
  bool has_decision() const;
  private:
  bool _internal_has_decision() const;
  public:
  void clear_decision();
  const ::gateway_protocol::DecisionMetadata& decision() const;
  PROTOBUF_NODISCARD ::gateway_protocol::DecisionMetadata* release_decision();
  ::gateway_protocol::DecisionMetadata* mutable_decision();
  void set_allocated_decision(::gateway_protocol::DecisionMetadata* decision);
  private:
  const ::gateway_protocol::DecisionMetadata& _internal_decision() const;
  ::gateway_protocol::DecisionMetadata* _internal_mutable_decision();
  public:
  void unsafe_arena_set_allocated_decision(
      ::gateway_protocol::DecisionMetadata* decision);
  ::gateway_protocol::DecisionMetadata* unsafe_arena_release_decision();

  // .gateway_protocol.DecisionRequirementsMetadata decisionRequirements = 3;
  bool has_decisionrequirements() const;
  private:
  bool _internal_has_decisionrequirements() const;
  public:
  void clear_decisionrequirements();
  const ::gateway_protocol::DecisionRequirementsMetadata& decisionrequirements() const;
  PROTOBUF_NODISCARD ::gateway_protocol::DecisionRequirementsMetadata* release_decisionrequirements();
  ::gateway_protocol::DecisionRequirementsMetadata* mutable_decisionrequirements();
  void set_allocated_decisionrequirements(::gateway_protocol::DecisionRequirementsMetadata* decisionrequirements);
  private:
  const ::gateway_protocol::DecisionRequirementsMetadata& _internal_decisionrequirements() const;
  ::gateway_protocol::DecisionRequirementsMetadata* _internal_mutable_decisionrequirements();
  public:
  void unsafe_arena_set_allocated_decisionrequirements(
      ::gateway_protocol::DecisionRequirementsMetadata* decisionrequirements);
  ::gateway_protocol::DecisionRequirementsMetadata* unsafe_arena_release_decisionrequirements();

  void clear_Metadata();
  MetadataCase Metadata_case() const;
  // @@protoc_insertion_point(class_scope:gateway_protocol.Deployment)
 private:
  class _Internal;
  void set_has_process();
  void set_has_decision();
  void set_has_decisionrequirements();

  inline bool has_Metadata() const;
  inline void clear_has_Metadata();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MetadataUnion {
      constexpr MetadataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::gateway_protocol::ProcessMetadata* process_;
      ::gateway_protocol::DecisionMetadata* decision_;
      ::gateway_protocol::DecisionRequirementsMetadata* decisionrequirements_;
    } Metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ProcessMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ProcessMetadata) */ {
 public:
  inline ProcessMetadata() : ProcessMetadata(nullptr) {}
  ~ProcessMetadata() override;
  explicit PROTOBUF_CONSTEXPR ProcessMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessMetadata(const ProcessMetadata& from);
  ProcessMetadata(ProcessMetadata&& from) noexcept
    : ProcessMetadata() {
    *this = ::std::move(from);
  }

  inline ProcessMetadata& operator=(const ProcessMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessMetadata& operator=(ProcessMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessMetadata* internal_default_instance() {
    return reinterpret_cast<const ProcessMetadata*>(
               &_ProcessMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ProcessMetadata& a, ProcessMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessMetadata& from) {
    ProcessMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ProcessMetadata";
  }
  protected:
  explicit ProcessMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBpmnProcessIdFieldNumber = 1,
    kResourceNameFieldNumber = 4,
    kProcessDefinitionKeyFieldNumber = 3,
    kVersionFieldNumber = 2,
  };
  // string bpmnProcessId = 1;
  void clear_bpmnprocessid();
  const std::string& bpmnprocessid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bpmnprocessid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bpmnprocessid();
  PROTOBUF_NODISCARD std::string* release_bpmnprocessid();
  void set_allocated_bpmnprocessid(std::string* bpmnprocessid);
  private:
  const std::string& _internal_bpmnprocessid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bpmnprocessid(const std::string& value);
  std::string* _internal_mutable_bpmnprocessid();
  public:

  // string resourceName = 4;
  void clear_resourcename();
  const std::string& resourcename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resourcename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resourcename();
  PROTOBUF_NODISCARD std::string* release_resourcename();
  void set_allocated_resourcename(std::string* resourcename);
  private:
  const std::string& _internal_resourcename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resourcename(const std::string& value);
  std::string* _internal_mutable_resourcename();
  public:

  // int64 processDefinitionKey = 3;
  void clear_processdefinitionkey();
  int64_t processdefinitionkey() const;
  void set_processdefinitionkey(int64_t value);
  private:
  int64_t _internal_processdefinitionkey() const;
  void _internal_set_processdefinitionkey(int64_t value);
  public:

  // int32 version = 2;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ProcessMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bpmnprocessid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourcename_;
    int64_t processdefinitionkey_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class DecisionMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.DecisionMetadata) */ {
 public:
  inline DecisionMetadata() : DecisionMetadata(nullptr) {}
  ~DecisionMetadata() override;
  explicit PROTOBUF_CONSTEXPR DecisionMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecisionMetadata(const DecisionMetadata& from);
  DecisionMetadata(DecisionMetadata&& from) noexcept
    : DecisionMetadata() {
    *this = ::std::move(from);
  }

  inline DecisionMetadata& operator=(const DecisionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionMetadata& operator=(DecisionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecisionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecisionMetadata* internal_default_instance() {
    return reinterpret_cast<const DecisionMetadata*>(
               &_DecisionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DecisionMetadata& a, DecisionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecisionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecisionMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DecisionMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DecisionMetadata& from) {
    DecisionMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecisionMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.DecisionMetadata";
  }
  protected:
  explicit DecisionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmnDecisionIdFieldNumber = 1,
    kDmnDecisionNameFieldNumber = 2,
    kDmnDecisionRequirementsIdFieldNumber = 5,
    kDecisionKeyFieldNumber = 4,
    kDecisionRequirementsKeyFieldNumber = 6,
    kVersionFieldNumber = 3,
  };
  // string dmnDecisionId = 1;
  void clear_dmndecisionid();
  const std::string& dmndecisionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dmndecisionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dmndecisionid();
  PROTOBUF_NODISCARD std::string* release_dmndecisionid();
  void set_allocated_dmndecisionid(std::string* dmndecisionid);
  private:
  const std::string& _internal_dmndecisionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dmndecisionid(const std::string& value);
  std::string* _internal_mutable_dmndecisionid();
  public:

  // string dmnDecisionName = 2;
  void clear_dmndecisionname();
  const std::string& dmndecisionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dmndecisionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dmndecisionname();
  PROTOBUF_NODISCARD std::string* release_dmndecisionname();
  void set_allocated_dmndecisionname(std::string* dmndecisionname);
  private:
  const std::string& _internal_dmndecisionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dmndecisionname(const std::string& value);
  std::string* _internal_mutable_dmndecisionname();
  public:

  // string dmnDecisionRequirementsId = 5;
  void clear_dmndecisionrequirementsid();
  const std::string& dmndecisionrequirementsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dmndecisionrequirementsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dmndecisionrequirementsid();
  PROTOBUF_NODISCARD std::string* release_dmndecisionrequirementsid();
  void set_allocated_dmndecisionrequirementsid(std::string* dmndecisionrequirementsid);
  private:
  const std::string& _internal_dmndecisionrequirementsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dmndecisionrequirementsid(const std::string& value);
  std::string* _internal_mutable_dmndecisionrequirementsid();
  public:

  // int64 decisionKey = 4;
  void clear_decisionkey();
  int64_t decisionkey() const;
  void set_decisionkey(int64_t value);
  private:
  int64_t _internal_decisionkey() const;
  void _internal_set_decisionkey(int64_t value);
  public:

  // int64 decisionRequirementsKey = 6;
  void clear_decisionrequirementskey();
  int64_t decisionrequirementskey() const;
  void set_decisionrequirementskey(int64_t value);
  private:
  int64_t _internal_decisionrequirementskey() const;
  void _internal_set_decisionrequirementskey(int64_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.DecisionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dmndecisionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dmndecisionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dmndecisionrequirementsid_;
    int64_t decisionkey_;
    int64_t decisionrequirementskey_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class DecisionRequirementsMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.DecisionRequirementsMetadata) */ {
 public:
  inline DecisionRequirementsMetadata() : DecisionRequirementsMetadata(nullptr) {}
  ~DecisionRequirementsMetadata() override;
  explicit PROTOBUF_CONSTEXPR DecisionRequirementsMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecisionRequirementsMetadata(const DecisionRequirementsMetadata& from);
  DecisionRequirementsMetadata(DecisionRequirementsMetadata&& from) noexcept
    : DecisionRequirementsMetadata() {
    *this = ::std::move(from);
  }

  inline DecisionRequirementsMetadata& operator=(const DecisionRequirementsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionRequirementsMetadata& operator=(DecisionRequirementsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecisionRequirementsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecisionRequirementsMetadata* internal_default_instance() {
    return reinterpret_cast<const DecisionRequirementsMetadata*>(
               &_DecisionRequirementsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DecisionRequirementsMetadata& a, DecisionRequirementsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionRequirementsMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionRequirementsMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecisionRequirementsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecisionRequirementsMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DecisionRequirementsMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DecisionRequirementsMetadata& from) {
    DecisionRequirementsMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecisionRequirementsMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.DecisionRequirementsMetadata";
  }
  protected:
  explicit DecisionRequirementsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmnDecisionRequirementsIdFieldNumber = 1,
    kDmnDecisionRequirementsNameFieldNumber = 2,
    kResourceNameFieldNumber = 5,
    kDecisionRequirementsKeyFieldNumber = 4,
    kVersionFieldNumber = 3,
  };
  // string dmnDecisionRequirementsId = 1;
  void clear_dmndecisionrequirementsid();
  const std::string& dmndecisionrequirementsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dmndecisionrequirementsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dmndecisionrequirementsid();
  PROTOBUF_NODISCARD std::string* release_dmndecisionrequirementsid();
  void set_allocated_dmndecisionrequirementsid(std::string* dmndecisionrequirementsid);
  private:
  const std::string& _internal_dmndecisionrequirementsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dmndecisionrequirementsid(const std::string& value);
  std::string* _internal_mutable_dmndecisionrequirementsid();
  public:

  // string dmnDecisionRequirementsName = 2;
  void clear_dmndecisionrequirementsname();
  const std::string& dmndecisionrequirementsname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dmndecisionrequirementsname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dmndecisionrequirementsname();
  PROTOBUF_NODISCARD std::string* release_dmndecisionrequirementsname();
  void set_allocated_dmndecisionrequirementsname(std::string* dmndecisionrequirementsname);
  private:
  const std::string& _internal_dmndecisionrequirementsname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dmndecisionrequirementsname(const std::string& value);
  std::string* _internal_mutable_dmndecisionrequirementsname();
  public:

  // string resourceName = 5;
  void clear_resourcename();
  const std::string& resourcename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resourcename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resourcename();
  PROTOBUF_NODISCARD std::string* release_resourcename();
  void set_allocated_resourcename(std::string* resourcename);
  private:
  const std::string& _internal_resourcename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resourcename(const std::string& value);
  std::string* _internal_mutable_resourcename();
  public:

  // int64 decisionRequirementsKey = 4;
  void clear_decisionrequirementskey();
  int64_t decisionrequirementskey() const;
  void set_decisionrequirementskey(int64_t value);
  private:
  int64_t _internal_decisionrequirementskey() const;
  void _internal_set_decisionrequirementskey(int64_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.DecisionRequirementsMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dmndecisionrequirementsid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dmndecisionrequirementsname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourcename_;
    int64_t decisionrequirementskey_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class FailJobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.FailJobRequest) */ {
 public:
  inline FailJobRequest() : FailJobRequest(nullptr) {}
  ~FailJobRequest() override;
  explicit PROTOBUF_CONSTEXPR FailJobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FailJobRequest(const FailJobRequest& from);
  FailJobRequest(FailJobRequest&& from) noexcept
    : FailJobRequest() {
    *this = ::std::move(from);
  }

  inline FailJobRequest& operator=(const FailJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FailJobRequest& operator=(FailJobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FailJobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FailJobRequest* internal_default_instance() {
    return reinterpret_cast<const FailJobRequest*>(
               &_FailJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FailJobRequest& a, FailJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FailJobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FailJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FailJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FailJobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FailJobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FailJobRequest& from) {
    FailJobRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FailJobRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.FailJobRequest";
  }
  protected:
  explicit FailJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kJobKeyFieldNumber = 1,
    kRetryBackOffFieldNumber = 4,
    kRetriesFieldNumber = 2,
  };
  // string errorMessage = 3;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // int64 jobKey = 1;
  void clear_jobkey();
  int64_t jobkey() const;
  void set_jobkey(int64_t value);
  private:
  int64_t _internal_jobkey() const;
  void _internal_set_jobkey(int64_t value);
  public:

  // int64 retryBackOff = 4;
  void clear_retrybackoff();
  int64_t retrybackoff() const;
  void set_retrybackoff(int64_t value);
  private:
  int64_t _internal_retrybackoff() const;
  void _internal_set_retrybackoff(int64_t value);
  public:

  // int32 retries = 2;
  void clear_retries();
  int32_t retries() const;
  void set_retries(int32_t value);
  private:
  int32_t _internal_retries() const;
  void _internal_set_retries(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.FailJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    int64_t jobkey_;
    int64_t retrybackoff_;
    int32_t retries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class FailJobResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gateway_protocol.FailJobResponse) */ {
 public:
  inline FailJobResponse() : FailJobResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FailJobResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FailJobResponse(const FailJobResponse& from);
  FailJobResponse(FailJobResponse&& from) noexcept
    : FailJobResponse() {
    *this = ::std::move(from);
  }

  inline FailJobResponse& operator=(const FailJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FailJobResponse& operator=(FailJobResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FailJobResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FailJobResponse* internal_default_instance() {
    return reinterpret_cast<const FailJobResponse*>(
               &_FailJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FailJobResponse& a, FailJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FailJobResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FailJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FailJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FailJobResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FailJobResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FailJobResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.FailJobResponse";
  }
  protected:
  explicit FailJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gateway_protocol.FailJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ThrowErrorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ThrowErrorRequest) */ {
 public:
  inline ThrowErrorRequest() : ThrowErrorRequest(nullptr) {}
  ~ThrowErrorRequest() override;
  explicit PROTOBUF_CONSTEXPR ThrowErrorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThrowErrorRequest(const ThrowErrorRequest& from);
  ThrowErrorRequest(ThrowErrorRequest&& from) noexcept
    : ThrowErrorRequest() {
    *this = ::std::move(from);
  }

  inline ThrowErrorRequest& operator=(const ThrowErrorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThrowErrorRequest& operator=(ThrowErrorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThrowErrorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThrowErrorRequest* internal_default_instance() {
    return reinterpret_cast<const ThrowErrorRequest*>(
               &_ThrowErrorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ThrowErrorRequest& a, ThrowErrorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ThrowErrorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThrowErrorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThrowErrorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThrowErrorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThrowErrorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThrowErrorRequest& from) {
    ThrowErrorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThrowErrorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ThrowErrorRequest";
  }
  protected:
  explicit ThrowErrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 2,
    kErrorMessageFieldNumber = 3,
    kJobKeyFieldNumber = 1,
  };
  // string errorCode = 2;
  void clear_errorcode();
  const std::string& errorcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errorcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errorcode();
  PROTOBUF_NODISCARD std::string* release_errorcode();
  void set_allocated_errorcode(std::string* errorcode);
  private:
  const std::string& _internal_errorcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errorcode(const std::string& value);
  std::string* _internal_mutable_errorcode();
  public:

  // string errorMessage = 3;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // int64 jobKey = 1;
  void clear_jobkey();
  int64_t jobkey() const;
  void set_jobkey(int64_t value);
  private:
  int64_t _internal_jobkey() const;
  void _internal_set_jobkey(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ThrowErrorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    int64_t jobkey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ThrowErrorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gateway_protocol.ThrowErrorResponse) */ {
 public:
  inline ThrowErrorResponse() : ThrowErrorResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ThrowErrorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThrowErrorResponse(const ThrowErrorResponse& from);
  ThrowErrorResponse(ThrowErrorResponse&& from) noexcept
    : ThrowErrorResponse() {
    *this = ::std::move(from);
  }

  inline ThrowErrorResponse& operator=(const ThrowErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThrowErrorResponse& operator=(ThrowErrorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThrowErrorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThrowErrorResponse* internal_default_instance() {
    return reinterpret_cast<const ThrowErrorResponse*>(
               &_ThrowErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ThrowErrorResponse& a, ThrowErrorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ThrowErrorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThrowErrorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThrowErrorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThrowErrorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ThrowErrorResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ThrowErrorResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ThrowErrorResponse";
  }
  protected:
  explicit ThrowErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gateway_protocol.ThrowErrorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class PublishMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.PublishMessageRequest) */ {
 public:
  inline PublishMessageRequest() : PublishMessageRequest(nullptr) {}
  ~PublishMessageRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMessageRequest(const PublishMessageRequest& from);
  PublishMessageRequest(PublishMessageRequest&& from) noexcept
    : PublishMessageRequest() {
    *this = ::std::move(from);
  }

  inline PublishMessageRequest& operator=(const PublishMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMessageRequest& operator=(PublishMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMessageRequest* internal_default_instance() {
    return reinterpret_cast<const PublishMessageRequest*>(
               &_PublishMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PublishMessageRequest& a, PublishMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishMessageRequest& from) {
    PublishMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.PublishMessageRequest";
  }
  protected:
  explicit PublishMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCorrelationKeyFieldNumber = 2,
    kMessageIdFieldNumber = 4,
    kVariablesFieldNumber = 5,
    kTimeToLiveFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string correlationKey = 2;
  void clear_correlationkey();
  const std::string& correlationkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_correlationkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_correlationkey();
  PROTOBUF_NODISCARD std::string* release_correlationkey();
  void set_allocated_correlationkey(std::string* correlationkey);
  private:
  const std::string& _internal_correlationkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_correlationkey(const std::string& value);
  std::string* _internal_mutable_correlationkey();
  public:

  // string messageId = 4;
  void clear_messageid();
  const std::string& messageid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_messageid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* messageid);
  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(const std::string& value);
  std::string* _internal_mutable_messageid();
  public:

  // string variables = 5;
  void clear_variables();
  const std::string& variables() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variables(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variables();
  PROTOBUF_NODISCARD std::string* release_variables();
  void set_allocated_variables(std::string* variables);
  private:
  const std::string& _internal_variables() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variables(const std::string& value);
  std::string* _internal_mutable_variables();
  public:

  // int64 timeToLive = 3;
  void clear_timetolive();
  int64_t timetolive() const;
  void set_timetolive(int64_t value);
  private:
  int64_t _internal_timetolive() const;
  void _internal_set_timetolive(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.PublishMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlationkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variables_;
    int64_t timetolive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class PublishMessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.PublishMessageResponse) */ {
 public:
  inline PublishMessageResponse() : PublishMessageResponse(nullptr) {}
  ~PublishMessageResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMessageResponse(const PublishMessageResponse& from);
  PublishMessageResponse(PublishMessageResponse&& from) noexcept
    : PublishMessageResponse() {
    *this = ::std::move(from);
  }

  inline PublishMessageResponse& operator=(const PublishMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMessageResponse& operator=(PublishMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMessageResponse* internal_default_instance() {
    return reinterpret_cast<const PublishMessageResponse*>(
               &_PublishMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PublishMessageResponse& a, PublishMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishMessageResponse& from) {
    PublishMessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.PublishMessageResponse";
  }
  protected:
  explicit PublishMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // int64 key = 1;
  void clear_key();
  int64_t key() const;
  void set_key(int64_t value);
  private:
  int64_t _internal_key() const;
  void _internal_set_key(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.PublishMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ResolveIncidentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ResolveIncidentRequest) */ {
 public:
  inline ResolveIncidentRequest() : ResolveIncidentRequest(nullptr) {}
  ~ResolveIncidentRequest() override;
  explicit PROTOBUF_CONSTEXPR ResolveIncidentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResolveIncidentRequest(const ResolveIncidentRequest& from);
  ResolveIncidentRequest(ResolveIncidentRequest&& from) noexcept
    : ResolveIncidentRequest() {
    *this = ::std::move(from);
  }

  inline ResolveIncidentRequest& operator=(const ResolveIncidentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveIncidentRequest& operator=(ResolveIncidentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveIncidentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveIncidentRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveIncidentRequest*>(
               &_ResolveIncidentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ResolveIncidentRequest& a, ResolveIncidentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveIncidentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveIncidentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveIncidentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolveIncidentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResolveIncidentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResolveIncidentRequest& from) {
    ResolveIncidentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveIncidentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ResolveIncidentRequest";
  }
  protected:
  explicit ResolveIncidentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncidentKeyFieldNumber = 1,
  };
  // int64 incidentKey = 1;
  void clear_incidentkey();
  int64_t incidentkey() const;
  void set_incidentkey(int64_t value);
  private:
  int64_t _internal_incidentkey() const;
  void _internal_set_incidentkey(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ResolveIncidentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t incidentkey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ResolveIncidentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gateway_protocol.ResolveIncidentResponse) */ {
 public:
  inline ResolveIncidentResponse() : ResolveIncidentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ResolveIncidentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResolveIncidentResponse(const ResolveIncidentResponse& from);
  ResolveIncidentResponse(ResolveIncidentResponse&& from) noexcept
    : ResolveIncidentResponse() {
    *this = ::std::move(from);
  }

  inline ResolveIncidentResponse& operator=(const ResolveIncidentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveIncidentResponse& operator=(ResolveIncidentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveIncidentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveIncidentResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveIncidentResponse*>(
               &_ResolveIncidentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ResolveIncidentResponse& a, ResolveIncidentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveIncidentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveIncidentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveIncidentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolveIncidentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResolveIncidentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResolveIncidentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ResolveIncidentResponse";
  }
  protected:
  explicit ResolveIncidentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gateway_protocol.ResolveIncidentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class TopologyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gateway_protocol.TopologyRequest) */ {
 public:
  inline TopologyRequest() : TopologyRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TopologyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopologyRequest(const TopologyRequest& from);
  TopologyRequest(TopologyRequest&& from) noexcept
    : TopologyRequest() {
    *this = ::std::move(from);
  }

  inline TopologyRequest& operator=(const TopologyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopologyRequest& operator=(TopologyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopologyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopologyRequest* internal_default_instance() {
    return reinterpret_cast<const TopologyRequest*>(
               &_TopologyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TopologyRequest& a, TopologyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TopologyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopologyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopologyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopologyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TopologyRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TopologyRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.TopologyRequest";
  }
  protected:
  explicit TopologyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gateway_protocol.TopologyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class TopologyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.TopologyResponse) */ {
 public:
  inline TopologyResponse() : TopologyResponse(nullptr) {}
  ~TopologyResponse() override;
  explicit PROTOBUF_CONSTEXPR TopologyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopologyResponse(const TopologyResponse& from);
  TopologyResponse(TopologyResponse&& from) noexcept
    : TopologyResponse() {
    *this = ::std::move(from);
  }

  inline TopologyResponse& operator=(const TopologyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopologyResponse& operator=(TopologyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopologyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopologyResponse* internal_default_instance() {
    return reinterpret_cast<const TopologyResponse*>(
               &_TopologyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TopologyResponse& a, TopologyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TopologyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopologyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopologyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopologyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopologyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopologyResponse& from) {
    TopologyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopologyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.TopologyResponse";
  }
  protected:
  explicit TopologyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokersFieldNumber = 1,
    kGatewayVersionFieldNumber = 5,
    kClusterSizeFieldNumber = 2,
    kPartitionsCountFieldNumber = 3,
    kReplicationFactorFieldNumber = 4,
  };
  // repeated .gateway_protocol.BrokerInfo brokers = 1;
  int brokers_size() const;
  private:
  int _internal_brokers_size() const;
  public:
  void clear_brokers();
  ::gateway_protocol::BrokerInfo* mutable_brokers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::BrokerInfo >*
      mutable_brokers();
  private:
  const ::gateway_protocol::BrokerInfo& _internal_brokers(int index) const;
  ::gateway_protocol::BrokerInfo* _internal_add_brokers();
  public:
  const ::gateway_protocol::BrokerInfo& brokers(int index) const;
  ::gateway_protocol::BrokerInfo* add_brokers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::BrokerInfo >&
      brokers() const;

  // string gatewayVersion = 5;
  void clear_gatewayversion();
  const std::string& gatewayversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gatewayversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gatewayversion();
  PROTOBUF_NODISCARD std::string* release_gatewayversion();
  void set_allocated_gatewayversion(std::string* gatewayversion);
  private:
  const std::string& _internal_gatewayversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gatewayversion(const std::string& value);
  std::string* _internal_mutable_gatewayversion();
  public:

  // int32 clusterSize = 2;
  void clear_clustersize();
  int32_t clustersize() const;
  void set_clustersize(int32_t value);
  private:
  int32_t _internal_clustersize() const;
  void _internal_set_clustersize(int32_t value);
  public:

  // int32 partitionsCount = 3;
  void clear_partitionscount();
  int32_t partitionscount() const;
  void set_partitionscount(int32_t value);
  private:
  int32_t _internal_partitionscount() const;
  void _internal_set_partitionscount(int32_t value);
  public:

  // int32 replicationFactor = 4;
  void clear_replicationfactor();
  int32_t replicationfactor() const;
  void set_replicationfactor(int32_t value);
  private:
  int32_t _internal_replicationfactor() const;
  void _internal_set_replicationfactor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.TopologyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::BrokerInfo > brokers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gatewayversion_;
    int32_t clustersize_;
    int32_t partitionscount_;
    int32_t replicationfactor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class BrokerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.BrokerInfo) */ {
 public:
  inline BrokerInfo() : BrokerInfo(nullptr) {}
  ~BrokerInfo() override;
  explicit PROTOBUF_CONSTEXPR BrokerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerInfo(const BrokerInfo& from);
  BrokerInfo(BrokerInfo&& from) noexcept
    : BrokerInfo() {
    *this = ::std::move(from);
  }

  inline BrokerInfo& operator=(const BrokerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerInfo& operator=(BrokerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerInfo* internal_default_instance() {
    return reinterpret_cast<const BrokerInfo*>(
               &_BrokerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(BrokerInfo& a, BrokerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrokerInfo& from) {
    BrokerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.BrokerInfo";
  }
  protected:
  explicit BrokerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsFieldNumber = 4,
    kHostFieldNumber = 2,
    kVersionFieldNumber = 5,
    kNodeIdFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // repeated .gateway_protocol.Partition partitions = 4;
  int partitions_size() const;
  private:
  int _internal_partitions_size() const;
  public:
  void clear_partitions();
  ::gateway_protocol::Partition* mutable_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Partition >*
      mutable_partitions();
  private:
  const ::gateway_protocol::Partition& _internal_partitions(int index) const;
  ::gateway_protocol::Partition* _internal_add_partitions();
  public:
  const ::gateway_protocol::Partition& partitions(int index) const;
  ::gateway_protocol::Partition* add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Partition >&
      partitions() const;

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int32 nodeId = 1;
  void clear_nodeid();
  int32_t nodeid() const;
  void set_nodeid(int32_t value);
  private:
  int32_t _internal_nodeid() const;
  void _internal_set_nodeid(int32_t value);
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.BrokerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Partition > partitions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    int32_t nodeid_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class Partition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.Partition) */ {
 public:
  inline Partition() : Partition(nullptr) {}
  ~Partition() override;
  explicit PROTOBUF_CONSTEXPR Partition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Partition(const Partition& from);
  Partition(Partition&& from) noexcept
    : Partition() {
    *this = ::std::move(from);
  }

  inline Partition& operator=(const Partition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Partition& operator=(Partition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Partition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Partition* internal_default_instance() {
    return reinterpret_cast<const Partition*>(
               &_Partition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Partition& a, Partition& b) {
    a.Swap(&b);
  }
  inline void Swap(Partition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Partition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Partition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Partition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Partition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Partition& from) {
    Partition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Partition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.Partition";
  }
  protected:
  explicit Partition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Partition_PartitionBrokerRole PartitionBrokerRole;
  static constexpr PartitionBrokerRole LEADER =
    Partition_PartitionBrokerRole_LEADER;
  static constexpr PartitionBrokerRole FOLLOWER =
    Partition_PartitionBrokerRole_FOLLOWER;
  static constexpr PartitionBrokerRole INACTIVE =
    Partition_PartitionBrokerRole_INACTIVE;
  static inline bool PartitionBrokerRole_IsValid(int value) {
    return Partition_PartitionBrokerRole_IsValid(value);
  }
  static constexpr PartitionBrokerRole PartitionBrokerRole_MIN =
    Partition_PartitionBrokerRole_PartitionBrokerRole_MIN;
  static constexpr PartitionBrokerRole PartitionBrokerRole_MAX =
    Partition_PartitionBrokerRole_PartitionBrokerRole_MAX;
  static constexpr int PartitionBrokerRole_ARRAYSIZE =
    Partition_PartitionBrokerRole_PartitionBrokerRole_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PartitionBrokerRole_descriptor() {
    return Partition_PartitionBrokerRole_descriptor();
  }
  template<typename T>
  static inline const std::string& PartitionBrokerRole_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PartitionBrokerRole>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PartitionBrokerRole_Name.");
    return Partition_PartitionBrokerRole_Name(enum_t_value);
  }
  static inline bool PartitionBrokerRole_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PartitionBrokerRole* value) {
    return Partition_PartitionBrokerRole_Parse(name, value);
  }

  typedef Partition_PartitionBrokerHealth PartitionBrokerHealth;
  static constexpr PartitionBrokerHealth HEALTHY =
    Partition_PartitionBrokerHealth_HEALTHY;
  static constexpr PartitionBrokerHealth UNHEALTHY =
    Partition_PartitionBrokerHealth_UNHEALTHY;
  static constexpr PartitionBrokerHealth DEAD =
    Partition_PartitionBrokerHealth_DEAD;
  static inline bool PartitionBrokerHealth_IsValid(int value) {
    return Partition_PartitionBrokerHealth_IsValid(value);
  }
  static constexpr PartitionBrokerHealth PartitionBrokerHealth_MIN =
    Partition_PartitionBrokerHealth_PartitionBrokerHealth_MIN;
  static constexpr PartitionBrokerHealth PartitionBrokerHealth_MAX =
    Partition_PartitionBrokerHealth_PartitionBrokerHealth_MAX;
  static constexpr int PartitionBrokerHealth_ARRAYSIZE =
    Partition_PartitionBrokerHealth_PartitionBrokerHealth_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PartitionBrokerHealth_descriptor() {
    return Partition_PartitionBrokerHealth_descriptor();
  }
  template<typename T>
  static inline const std::string& PartitionBrokerHealth_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PartitionBrokerHealth>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PartitionBrokerHealth_Name.");
    return Partition_PartitionBrokerHealth_Name(enum_t_value);
  }
  static inline bool PartitionBrokerHealth_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PartitionBrokerHealth* value) {
    return Partition_PartitionBrokerHealth_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIdFieldNumber = 1,
    kRoleFieldNumber = 2,
    kHealthFieldNumber = 3,
  };
  // int32 partitionId = 1;
  void clear_partitionid();
  int32_t partitionid() const;
  void set_partitionid(int32_t value);
  private:
  int32_t _internal_partitionid() const;
  void _internal_set_partitionid(int32_t value);
  public:

  // .gateway_protocol.Partition.PartitionBrokerRole role = 2;
  void clear_role();
  ::gateway_protocol::Partition_PartitionBrokerRole role() const;
  void set_role(::gateway_protocol::Partition_PartitionBrokerRole value);
  private:
  ::gateway_protocol::Partition_PartitionBrokerRole _internal_role() const;
  void _internal_set_role(::gateway_protocol::Partition_PartitionBrokerRole value);
  public:

  // .gateway_protocol.Partition.PartitionBrokerHealth health = 3;
  void clear_health();
  ::gateway_protocol::Partition_PartitionBrokerHealth health() const;
  void set_health(::gateway_protocol::Partition_PartitionBrokerHealth value);
  private:
  ::gateway_protocol::Partition_PartitionBrokerHealth _internal_health() const;
  void _internal_set_health(::gateway_protocol::Partition_PartitionBrokerHealth value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.Partition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t partitionid_;
    int role_;
    int health_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class UpdateJobRetriesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.UpdateJobRetriesRequest) */ {
 public:
  inline UpdateJobRetriesRequest() : UpdateJobRetriesRequest(nullptr) {}
  ~UpdateJobRetriesRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateJobRetriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateJobRetriesRequest(const UpdateJobRetriesRequest& from);
  UpdateJobRetriesRequest(UpdateJobRetriesRequest&& from) noexcept
    : UpdateJobRetriesRequest() {
    *this = ::std::move(from);
  }

  inline UpdateJobRetriesRequest& operator=(const UpdateJobRetriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateJobRetriesRequest& operator=(UpdateJobRetriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateJobRetriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateJobRetriesRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateJobRetriesRequest*>(
               &_UpdateJobRetriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UpdateJobRetriesRequest& a, UpdateJobRetriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateJobRetriesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateJobRetriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateJobRetriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateJobRetriesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateJobRetriesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateJobRetriesRequest& from) {
    UpdateJobRetriesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateJobRetriesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.UpdateJobRetriesRequest";
  }
  protected:
  explicit UpdateJobRetriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobKeyFieldNumber = 1,
    kRetriesFieldNumber = 2,
  };
  // int64 jobKey = 1;
  void clear_jobkey();
  int64_t jobkey() const;
  void set_jobkey(int64_t value);
  private:
  int64_t _internal_jobkey() const;
  void _internal_set_jobkey(int64_t value);
  public:

  // int32 retries = 2;
  void clear_retries();
  int32_t retries() const;
  void set_retries(int32_t value);
  private:
  int32_t _internal_retries() const;
  void _internal_set_retries(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.UpdateJobRetriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t jobkey_;
    int32_t retries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class UpdateJobRetriesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gateway_protocol.UpdateJobRetriesResponse) */ {
 public:
  inline UpdateJobRetriesResponse() : UpdateJobRetriesResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateJobRetriesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateJobRetriesResponse(const UpdateJobRetriesResponse& from);
  UpdateJobRetriesResponse(UpdateJobRetriesResponse&& from) noexcept
    : UpdateJobRetriesResponse() {
    *this = ::std::move(from);
  }

  inline UpdateJobRetriesResponse& operator=(const UpdateJobRetriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateJobRetriesResponse& operator=(UpdateJobRetriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateJobRetriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateJobRetriesResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateJobRetriesResponse*>(
               &_UpdateJobRetriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UpdateJobRetriesResponse& a, UpdateJobRetriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateJobRetriesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateJobRetriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateJobRetriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateJobRetriesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateJobRetriesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateJobRetriesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.UpdateJobRetriesResponse";
  }
  protected:
  explicit UpdateJobRetriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gateway_protocol.UpdateJobRetriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class SetVariablesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.SetVariablesRequest) */ {
 public:
  inline SetVariablesRequest() : SetVariablesRequest(nullptr) {}
  ~SetVariablesRequest() override;
  explicit PROTOBUF_CONSTEXPR SetVariablesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVariablesRequest(const SetVariablesRequest& from);
  SetVariablesRequest(SetVariablesRequest&& from) noexcept
    : SetVariablesRequest() {
    *this = ::std::move(from);
  }

  inline SetVariablesRequest& operator=(const SetVariablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVariablesRequest& operator=(SetVariablesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVariablesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVariablesRequest* internal_default_instance() {
    return reinterpret_cast<const SetVariablesRequest*>(
               &_SetVariablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SetVariablesRequest& a, SetVariablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVariablesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVariablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVariablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVariablesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVariablesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetVariablesRequest& from) {
    SetVariablesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVariablesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.SetVariablesRequest";
  }
  protected:
  explicit SetVariablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 2,
    kElementInstanceKeyFieldNumber = 1,
    kLocalFieldNumber = 3,
  };
  // string variables = 2;
  void clear_variables();
  const std::string& variables() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variables(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variables();
  PROTOBUF_NODISCARD std::string* release_variables();
  void set_allocated_variables(std::string* variables);
  private:
  const std::string& _internal_variables() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variables(const std::string& value);
  std::string* _internal_mutable_variables();
  public:

  // int64 elementInstanceKey = 1;
  void clear_elementinstancekey();
  int64_t elementinstancekey() const;
  void set_elementinstancekey(int64_t value);
  private:
  int64_t _internal_elementinstancekey() const;
  void _internal_set_elementinstancekey(int64_t value);
  public:

  // bool local = 3;
  void clear_local();
  bool local() const;
  void set_local(bool value);
  private:
  bool _internal_local() const;
  void _internal_set_local(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.SetVariablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variables_;
    int64_t elementinstancekey_;
    bool local_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class SetVariablesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.SetVariablesResponse) */ {
 public:
  inline SetVariablesResponse() : SetVariablesResponse(nullptr) {}
  ~SetVariablesResponse() override;
  explicit PROTOBUF_CONSTEXPR SetVariablesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVariablesResponse(const SetVariablesResponse& from);
  SetVariablesResponse(SetVariablesResponse&& from) noexcept
    : SetVariablesResponse() {
    *this = ::std::move(from);
  }

  inline SetVariablesResponse& operator=(const SetVariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVariablesResponse& operator=(SetVariablesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVariablesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVariablesResponse* internal_default_instance() {
    return reinterpret_cast<const SetVariablesResponse*>(
               &_SetVariablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SetVariablesResponse& a, SetVariablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVariablesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVariablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVariablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVariablesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVariablesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetVariablesResponse& from) {
    SetVariablesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVariablesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.SetVariablesResponse";
  }
  protected:
  explicit SetVariablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // int64 key = 1;
  void clear_key();
  int64_t key() const;
  void set_key(int64_t value);
  private:
  int64_t _internal_key() const;
  void _internal_set_key(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.SetVariablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ModifyProcessInstanceRequest_ActivateInstruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction) */ {
 public:
  inline ModifyProcessInstanceRequest_ActivateInstruction() : ModifyProcessInstanceRequest_ActivateInstruction(nullptr) {}
  ~ModifyProcessInstanceRequest_ActivateInstruction() override;
  explicit PROTOBUF_CONSTEXPR ModifyProcessInstanceRequest_ActivateInstruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyProcessInstanceRequest_ActivateInstruction(const ModifyProcessInstanceRequest_ActivateInstruction& from);
  ModifyProcessInstanceRequest_ActivateInstruction(ModifyProcessInstanceRequest_ActivateInstruction&& from) noexcept
    : ModifyProcessInstanceRequest_ActivateInstruction() {
    *this = ::std::move(from);
  }

  inline ModifyProcessInstanceRequest_ActivateInstruction& operator=(const ModifyProcessInstanceRequest_ActivateInstruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyProcessInstanceRequest_ActivateInstruction& operator=(ModifyProcessInstanceRequest_ActivateInstruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyProcessInstanceRequest_ActivateInstruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyProcessInstanceRequest_ActivateInstruction* internal_default_instance() {
    return reinterpret_cast<const ModifyProcessInstanceRequest_ActivateInstruction*>(
               &_ModifyProcessInstanceRequest_ActivateInstruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ModifyProcessInstanceRequest_ActivateInstruction& a, ModifyProcessInstanceRequest_ActivateInstruction& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyProcessInstanceRequest_ActivateInstruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyProcessInstanceRequest_ActivateInstruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyProcessInstanceRequest_ActivateInstruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyProcessInstanceRequest_ActivateInstruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyProcessInstanceRequest_ActivateInstruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyProcessInstanceRequest_ActivateInstruction& from) {
    ModifyProcessInstanceRequest_ActivateInstruction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyProcessInstanceRequest_ActivateInstruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction";
  }
  protected:
  explicit ModifyProcessInstanceRequest_ActivateInstruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableInstructionsFieldNumber = 3,
    kElementIdFieldNumber = 1,
    kAncestorElementInstanceKeyFieldNumber = 2,
  };
  // repeated .gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction variableInstructions = 3;
  int variableinstructions_size() const;
  private:
  int _internal_variableinstructions_size() const;
  public:
  void clear_variableinstructions();
  ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction* mutable_variableinstructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction >*
      mutable_variableinstructions();
  private:
  const ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction& _internal_variableinstructions(int index) const;
  ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction* _internal_add_variableinstructions();
  public:
  const ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction& variableinstructions(int index) const;
  ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction* add_variableinstructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction >&
      variableinstructions() const;

  // string elementId = 1;
  void clear_elementid();
  const std::string& elementid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_elementid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_elementid();
  PROTOBUF_NODISCARD std::string* release_elementid();
  void set_allocated_elementid(std::string* elementid);
  private:
  const std::string& _internal_elementid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_elementid(const std::string& value);
  std::string* _internal_mutable_elementid();
  public:

  // int64 ancestorElementInstanceKey = 2;
  void clear_ancestorelementinstancekey();
  int64_t ancestorelementinstancekey() const;
  void set_ancestorelementinstancekey(int64_t value);
  private:
  int64_t _internal_ancestorelementinstancekey() const;
  void _internal_set_ancestorelementinstancekey(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction > variableinstructions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr elementid_;
    int64_t ancestorelementinstancekey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ModifyProcessInstanceRequest_VariableInstruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction) */ {
 public:
  inline ModifyProcessInstanceRequest_VariableInstruction() : ModifyProcessInstanceRequest_VariableInstruction(nullptr) {}
  ~ModifyProcessInstanceRequest_VariableInstruction() override;
  explicit PROTOBUF_CONSTEXPR ModifyProcessInstanceRequest_VariableInstruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyProcessInstanceRequest_VariableInstruction(const ModifyProcessInstanceRequest_VariableInstruction& from);
  ModifyProcessInstanceRequest_VariableInstruction(ModifyProcessInstanceRequest_VariableInstruction&& from) noexcept
    : ModifyProcessInstanceRequest_VariableInstruction() {
    *this = ::std::move(from);
  }

  inline ModifyProcessInstanceRequest_VariableInstruction& operator=(const ModifyProcessInstanceRequest_VariableInstruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyProcessInstanceRequest_VariableInstruction& operator=(ModifyProcessInstanceRequest_VariableInstruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyProcessInstanceRequest_VariableInstruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyProcessInstanceRequest_VariableInstruction* internal_default_instance() {
    return reinterpret_cast<const ModifyProcessInstanceRequest_VariableInstruction*>(
               &_ModifyProcessInstanceRequest_VariableInstruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ModifyProcessInstanceRequest_VariableInstruction& a, ModifyProcessInstanceRequest_VariableInstruction& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyProcessInstanceRequest_VariableInstruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyProcessInstanceRequest_VariableInstruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyProcessInstanceRequest_VariableInstruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyProcessInstanceRequest_VariableInstruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyProcessInstanceRequest_VariableInstruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyProcessInstanceRequest_VariableInstruction& from) {
    ModifyProcessInstanceRequest_VariableInstruction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyProcessInstanceRequest_VariableInstruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction";
  }
  protected:
  explicit ModifyProcessInstanceRequest_VariableInstruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
    kScopeIdFieldNumber = 2,
  };
  // string variables = 1;
  void clear_variables();
  const std::string& variables() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variables(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variables();
  PROTOBUF_NODISCARD std::string* release_variables();
  void set_allocated_variables(std::string* variables);
  private:
  const std::string& _internal_variables() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variables(const std::string& value);
  std::string* _internal_mutable_variables();
  public:

  // string scopeId = 2;
  void clear_scopeid();
  const std::string& scopeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scopeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scopeid();
  PROTOBUF_NODISCARD std::string* release_scopeid();
  void set_allocated_scopeid(std::string* scopeid);
  private:
  const std::string& _internal_scopeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scopeid(const std::string& value);
  std::string* _internal_mutable_scopeid();
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variables_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scopeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ModifyProcessInstanceRequest_TerminateInstruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ModifyProcessInstanceRequest.TerminateInstruction) */ {
 public:
  inline ModifyProcessInstanceRequest_TerminateInstruction() : ModifyProcessInstanceRequest_TerminateInstruction(nullptr) {}
  ~ModifyProcessInstanceRequest_TerminateInstruction() override;
  explicit PROTOBUF_CONSTEXPR ModifyProcessInstanceRequest_TerminateInstruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyProcessInstanceRequest_TerminateInstruction(const ModifyProcessInstanceRequest_TerminateInstruction& from);
  ModifyProcessInstanceRequest_TerminateInstruction(ModifyProcessInstanceRequest_TerminateInstruction&& from) noexcept
    : ModifyProcessInstanceRequest_TerminateInstruction() {
    *this = ::std::move(from);
  }

  inline ModifyProcessInstanceRequest_TerminateInstruction& operator=(const ModifyProcessInstanceRequest_TerminateInstruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyProcessInstanceRequest_TerminateInstruction& operator=(ModifyProcessInstanceRequest_TerminateInstruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyProcessInstanceRequest_TerminateInstruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyProcessInstanceRequest_TerminateInstruction* internal_default_instance() {
    return reinterpret_cast<const ModifyProcessInstanceRequest_TerminateInstruction*>(
               &_ModifyProcessInstanceRequest_TerminateInstruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ModifyProcessInstanceRequest_TerminateInstruction& a, ModifyProcessInstanceRequest_TerminateInstruction& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyProcessInstanceRequest_TerminateInstruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyProcessInstanceRequest_TerminateInstruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyProcessInstanceRequest_TerminateInstruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyProcessInstanceRequest_TerminateInstruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyProcessInstanceRequest_TerminateInstruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyProcessInstanceRequest_TerminateInstruction& from) {
    ModifyProcessInstanceRequest_TerminateInstruction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyProcessInstanceRequest_TerminateInstruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ModifyProcessInstanceRequest.TerminateInstruction";
  }
  protected:
  explicit ModifyProcessInstanceRequest_TerminateInstruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementInstanceKeyFieldNumber = 1,
  };
  // int64 elementInstanceKey = 1;
  void clear_elementinstancekey();
  int64_t elementinstancekey() const;
  void set_elementinstancekey(int64_t value);
  private:
  int64_t _internal_elementinstancekey() const;
  void _internal_set_elementinstancekey(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ModifyProcessInstanceRequest.TerminateInstruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t elementinstancekey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ModifyProcessInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gateway_protocol.ModifyProcessInstanceRequest) */ {
 public:
  inline ModifyProcessInstanceRequest() : ModifyProcessInstanceRequest(nullptr) {}
  ~ModifyProcessInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR ModifyProcessInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyProcessInstanceRequest(const ModifyProcessInstanceRequest& from);
  ModifyProcessInstanceRequest(ModifyProcessInstanceRequest&& from) noexcept
    : ModifyProcessInstanceRequest() {
    *this = ::std::move(from);
  }

  inline ModifyProcessInstanceRequest& operator=(const ModifyProcessInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyProcessInstanceRequest& operator=(ModifyProcessInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyProcessInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyProcessInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyProcessInstanceRequest*>(
               &_ModifyProcessInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ModifyProcessInstanceRequest& a, ModifyProcessInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyProcessInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyProcessInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyProcessInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyProcessInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyProcessInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyProcessInstanceRequest& from) {
    ModifyProcessInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyProcessInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ModifyProcessInstanceRequest";
  }
  protected:
  explicit ModifyProcessInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModifyProcessInstanceRequest_ActivateInstruction ActivateInstruction;
  typedef ModifyProcessInstanceRequest_VariableInstruction VariableInstruction;
  typedef ModifyProcessInstanceRequest_TerminateInstruction TerminateInstruction;

  // accessors -------------------------------------------------------

  enum : int {
    kActivateInstructionsFieldNumber = 2,
    kTerminateInstructionsFieldNumber = 3,
    kProcessInstanceKeyFieldNumber = 1,
  };
  // repeated .gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction activateInstructions = 2;
  int activateinstructions_size() const;
  private:
  int _internal_activateinstructions_size() const;
  public:
  void clear_activateinstructions();
  ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction* mutable_activateinstructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction >*
      mutable_activateinstructions();
  private:
  const ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction& _internal_activateinstructions(int index) const;
  ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction* _internal_add_activateinstructions();
  public:
  const ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction& activateinstructions(int index) const;
  ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction* add_activateinstructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction >&
      activateinstructions() const;

  // repeated .gateway_protocol.ModifyProcessInstanceRequest.TerminateInstruction terminateInstructions = 3;
  int terminateinstructions_size() const;
  private:
  int _internal_terminateinstructions_size() const;
  public:
  void clear_terminateinstructions();
  ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction* mutable_terminateinstructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction >*
      mutable_terminateinstructions();
  private:
  const ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction& _internal_terminateinstructions(int index) const;
  ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction* _internal_add_terminateinstructions();
  public:
  const ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction& terminateinstructions(int index) const;
  ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction* add_terminateinstructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction >&
      terminateinstructions() const;

  // int64 processInstanceKey = 1;
  void clear_processinstancekey();
  int64_t processinstancekey() const;
  void set_processinstancekey(int64_t value);
  private:
  int64_t _internal_processinstancekey() const;
  void _internal_set_processinstancekey(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gateway_protocol.ModifyProcessInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction > activateinstructions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction > terminateinstructions_;
    int64_t processinstancekey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ModifyProcessInstanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gateway_protocol.ModifyProcessInstanceResponse) */ {
 public:
  inline ModifyProcessInstanceResponse() : ModifyProcessInstanceResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModifyProcessInstanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyProcessInstanceResponse(const ModifyProcessInstanceResponse& from);
  ModifyProcessInstanceResponse(ModifyProcessInstanceResponse&& from) noexcept
    : ModifyProcessInstanceResponse() {
    *this = ::std::move(from);
  }

  inline ModifyProcessInstanceResponse& operator=(const ModifyProcessInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyProcessInstanceResponse& operator=(ModifyProcessInstanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyProcessInstanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyProcessInstanceResponse* internal_default_instance() {
    return reinterpret_cast<const ModifyProcessInstanceResponse*>(
               &_ModifyProcessInstanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ModifyProcessInstanceResponse& a, ModifyProcessInstanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyProcessInstanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyProcessInstanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyProcessInstanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyProcessInstanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModifyProcessInstanceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModifyProcessInstanceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gateway_protocol.ModifyProcessInstanceResponse";
  }
  protected:
  explicit ModifyProcessInstanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gateway_protocol.ModifyProcessInstanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActivateJobsRequest

// string type = 1;
inline void ActivateJobsRequest::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ActivateJobsRequest::type() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivateJobsRequest.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivateJobsRequest::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivateJobsRequest.type)
}
inline std::string* ActivateJobsRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivateJobsRequest.type)
  return _s;
}
inline const std::string& ActivateJobsRequest::_internal_type() const {
  return _impl_.type_.Get();
}
inline void ActivateJobsRequest::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivateJobsRequest::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivateJobsRequest::release_type() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ActivateJobsRequest.type)
  return _impl_.type_.Release();
}
inline void ActivateJobsRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ActivateJobsRequest.type)
}

// string worker = 2;
inline void ActivateJobsRequest::clear_worker() {
  _impl_.worker_.ClearToEmpty();
}
inline const std::string& ActivateJobsRequest::worker() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivateJobsRequest.worker)
  return _internal_worker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivateJobsRequest::set_worker(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worker_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivateJobsRequest.worker)
}
inline std::string* ActivateJobsRequest::mutable_worker() {
  std::string* _s = _internal_mutable_worker();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivateJobsRequest.worker)
  return _s;
}
inline const std::string& ActivateJobsRequest::_internal_worker() const {
  return _impl_.worker_.Get();
}
inline void ActivateJobsRequest::_internal_set_worker(const std::string& value) {
  
  _impl_.worker_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivateJobsRequest::_internal_mutable_worker() {
  
  return _impl_.worker_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivateJobsRequest::release_worker() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ActivateJobsRequest.worker)
  return _impl_.worker_.Release();
}
inline void ActivateJobsRequest::set_allocated_worker(std::string* worker) {
  if (worker != nullptr) {
    
  } else {
    
  }
  _impl_.worker_.SetAllocated(worker, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worker_.IsDefault()) {
    _impl_.worker_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ActivateJobsRequest.worker)
}

// int64 timeout = 3;
inline void ActivateJobsRequest::clear_timeout() {
  _impl_.timeout_ = int64_t{0};
}
inline int64_t ActivateJobsRequest::_internal_timeout() const {
  return _impl_.timeout_;
}
inline int64_t ActivateJobsRequest::timeout() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivateJobsRequest.timeout)
  return _internal_timeout();
}
inline void ActivateJobsRequest::_internal_set_timeout(int64_t value) {
  
  _impl_.timeout_ = value;
}
inline void ActivateJobsRequest::set_timeout(int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivateJobsRequest.timeout)
}

// int32 maxJobsToActivate = 4;
inline void ActivateJobsRequest::clear_maxjobstoactivate() {
  _impl_.maxjobstoactivate_ = 0;
}
inline int32_t ActivateJobsRequest::_internal_maxjobstoactivate() const {
  return _impl_.maxjobstoactivate_;
}
inline int32_t ActivateJobsRequest::maxjobstoactivate() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivateJobsRequest.maxJobsToActivate)
  return _internal_maxjobstoactivate();
}
inline void ActivateJobsRequest::_internal_set_maxjobstoactivate(int32_t value) {
  
  _impl_.maxjobstoactivate_ = value;
}
inline void ActivateJobsRequest::set_maxjobstoactivate(int32_t value) {
  _internal_set_maxjobstoactivate(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivateJobsRequest.maxJobsToActivate)
}

// repeated string fetchVariable = 5;
inline int ActivateJobsRequest::_internal_fetchvariable_size() const {
  return _impl_.fetchvariable_.size();
}
inline int ActivateJobsRequest::fetchvariable_size() const {
  return _internal_fetchvariable_size();
}
inline void ActivateJobsRequest::clear_fetchvariable() {
  _impl_.fetchvariable_.Clear();
}
inline std::string* ActivateJobsRequest::add_fetchvariable() {
  std::string* _s = _internal_add_fetchvariable();
  // @@protoc_insertion_point(field_add_mutable:gateway_protocol.ActivateJobsRequest.fetchVariable)
  return _s;
}
inline const std::string& ActivateJobsRequest::_internal_fetchvariable(int index) const {
  return _impl_.fetchvariable_.Get(index);
}
inline const std::string& ActivateJobsRequest::fetchvariable(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivateJobsRequest.fetchVariable)
  return _internal_fetchvariable(index);
}
inline std::string* ActivateJobsRequest::mutable_fetchvariable(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivateJobsRequest.fetchVariable)
  return _impl_.fetchvariable_.Mutable(index);
}
inline void ActivateJobsRequest::set_fetchvariable(int index, const std::string& value) {
  _impl_.fetchvariable_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivateJobsRequest.fetchVariable)
}
inline void ActivateJobsRequest::set_fetchvariable(int index, std::string&& value) {
  _impl_.fetchvariable_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivateJobsRequest.fetchVariable)
}
inline void ActivateJobsRequest::set_fetchvariable(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fetchvariable_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gateway_protocol.ActivateJobsRequest.fetchVariable)
}
inline void ActivateJobsRequest::set_fetchvariable(int index, const char* value, size_t size) {
  _impl_.fetchvariable_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gateway_protocol.ActivateJobsRequest.fetchVariable)
}
inline std::string* ActivateJobsRequest::_internal_add_fetchvariable() {
  return _impl_.fetchvariable_.Add();
}
inline void ActivateJobsRequest::add_fetchvariable(const std::string& value) {
  _impl_.fetchvariable_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gateway_protocol.ActivateJobsRequest.fetchVariable)
}
inline void ActivateJobsRequest::add_fetchvariable(std::string&& value) {
  _impl_.fetchvariable_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gateway_protocol.ActivateJobsRequest.fetchVariable)
}
inline void ActivateJobsRequest::add_fetchvariable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fetchvariable_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gateway_protocol.ActivateJobsRequest.fetchVariable)
}
inline void ActivateJobsRequest::add_fetchvariable(const char* value, size_t size) {
  _impl_.fetchvariable_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gateway_protocol.ActivateJobsRequest.fetchVariable)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ActivateJobsRequest::fetchvariable() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.ActivateJobsRequest.fetchVariable)
  return _impl_.fetchvariable_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ActivateJobsRequest::mutable_fetchvariable() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.ActivateJobsRequest.fetchVariable)
  return &_impl_.fetchvariable_;
}

// int64 requestTimeout = 6;
inline void ActivateJobsRequest::clear_requesttimeout() {
  _impl_.requesttimeout_ = int64_t{0};
}
inline int64_t ActivateJobsRequest::_internal_requesttimeout() const {
  return _impl_.requesttimeout_;
}
inline int64_t ActivateJobsRequest::requesttimeout() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivateJobsRequest.requestTimeout)
  return _internal_requesttimeout();
}
inline void ActivateJobsRequest::_internal_set_requesttimeout(int64_t value) {
  
  _impl_.requesttimeout_ = value;
}
inline void ActivateJobsRequest::set_requesttimeout(int64_t value) {
  _internal_set_requesttimeout(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivateJobsRequest.requestTimeout)
}

// -------------------------------------------------------------------

// ActivateJobsResponse

// repeated .gateway_protocol.ActivatedJob jobs = 1;
inline int ActivateJobsResponse::_internal_jobs_size() const {
  return _impl_.jobs_.size();
}
inline int ActivateJobsResponse::jobs_size() const {
  return _internal_jobs_size();
}
inline void ActivateJobsResponse::clear_jobs() {
  _impl_.jobs_.Clear();
}
inline ::gateway_protocol::ActivatedJob* ActivateJobsResponse::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivateJobsResponse.jobs)
  return _impl_.jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ActivatedJob >*
ActivateJobsResponse::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.ActivateJobsResponse.jobs)
  return &_impl_.jobs_;
}
inline const ::gateway_protocol::ActivatedJob& ActivateJobsResponse::_internal_jobs(int index) const {
  return _impl_.jobs_.Get(index);
}
inline const ::gateway_protocol::ActivatedJob& ActivateJobsResponse::jobs(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivateJobsResponse.jobs)
  return _internal_jobs(index);
}
inline ::gateway_protocol::ActivatedJob* ActivateJobsResponse::_internal_add_jobs() {
  return _impl_.jobs_.Add();
}
inline ::gateway_protocol::ActivatedJob* ActivateJobsResponse::add_jobs() {
  ::gateway_protocol::ActivatedJob* _add = _internal_add_jobs();
  // @@protoc_insertion_point(field_add:gateway_protocol.ActivateJobsResponse.jobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ActivatedJob >&
ActivateJobsResponse::jobs() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.ActivateJobsResponse.jobs)
  return _impl_.jobs_;
}

// -------------------------------------------------------------------

// ActivatedJob

// int64 key = 1;
inline void ActivatedJob::clear_key() {
  _impl_.key_ = int64_t{0};
}
inline int64_t ActivatedJob::_internal_key() const {
  return _impl_.key_;
}
inline int64_t ActivatedJob::key() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.key)
  return _internal_key();
}
inline void ActivatedJob::_internal_set_key(int64_t value) {
  
  _impl_.key_ = value;
}
inline void ActivatedJob::set_key(int64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.key)
}

// string type = 2;
inline void ActivatedJob::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ActivatedJob::type() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivatedJob::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.type)
}
inline std::string* ActivatedJob::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivatedJob.type)
  return _s;
}
inline const std::string& ActivatedJob::_internal_type() const {
  return _impl_.type_.Get();
}
inline void ActivatedJob::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivatedJob::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivatedJob::release_type() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ActivatedJob.type)
  return _impl_.type_.Release();
}
inline void ActivatedJob::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ActivatedJob.type)
}

// int64 processInstanceKey = 3;
inline void ActivatedJob::clear_processinstancekey() {
  _impl_.processinstancekey_ = int64_t{0};
}
inline int64_t ActivatedJob::_internal_processinstancekey() const {
  return _impl_.processinstancekey_;
}
inline int64_t ActivatedJob::processinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.processInstanceKey)
  return _internal_processinstancekey();
}
inline void ActivatedJob::_internal_set_processinstancekey(int64_t value) {
  
  _impl_.processinstancekey_ = value;
}
inline void ActivatedJob::set_processinstancekey(int64_t value) {
  _internal_set_processinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.processInstanceKey)
}

// string bpmnProcessId = 4;
inline void ActivatedJob::clear_bpmnprocessid() {
  _impl_.bpmnprocessid_.ClearToEmpty();
}
inline const std::string& ActivatedJob::bpmnprocessid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.bpmnProcessId)
  return _internal_bpmnprocessid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivatedJob::set_bpmnprocessid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bpmnprocessid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.bpmnProcessId)
}
inline std::string* ActivatedJob::mutable_bpmnprocessid() {
  std::string* _s = _internal_mutable_bpmnprocessid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivatedJob.bpmnProcessId)
  return _s;
}
inline const std::string& ActivatedJob::_internal_bpmnprocessid() const {
  return _impl_.bpmnprocessid_.Get();
}
inline void ActivatedJob::_internal_set_bpmnprocessid(const std::string& value) {
  
  _impl_.bpmnprocessid_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivatedJob::_internal_mutable_bpmnprocessid() {
  
  return _impl_.bpmnprocessid_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivatedJob::release_bpmnprocessid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ActivatedJob.bpmnProcessId)
  return _impl_.bpmnprocessid_.Release();
}
inline void ActivatedJob::set_allocated_bpmnprocessid(std::string* bpmnprocessid) {
  if (bpmnprocessid != nullptr) {
    
  } else {
    
  }
  _impl_.bpmnprocessid_.SetAllocated(bpmnprocessid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bpmnprocessid_.IsDefault()) {
    _impl_.bpmnprocessid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ActivatedJob.bpmnProcessId)
}

// int32 processDefinitionVersion = 5;
inline void ActivatedJob::clear_processdefinitionversion() {
  _impl_.processdefinitionversion_ = 0;
}
inline int32_t ActivatedJob::_internal_processdefinitionversion() const {
  return _impl_.processdefinitionversion_;
}
inline int32_t ActivatedJob::processdefinitionversion() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.processDefinitionVersion)
  return _internal_processdefinitionversion();
}
inline void ActivatedJob::_internal_set_processdefinitionversion(int32_t value) {
  
  _impl_.processdefinitionversion_ = value;
}
inline void ActivatedJob::set_processdefinitionversion(int32_t value) {
  _internal_set_processdefinitionversion(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.processDefinitionVersion)
}

// int64 processDefinitionKey = 6;
inline void ActivatedJob::clear_processdefinitionkey() {
  _impl_.processdefinitionkey_ = int64_t{0};
}
inline int64_t ActivatedJob::_internal_processdefinitionkey() const {
  return _impl_.processdefinitionkey_;
}
inline int64_t ActivatedJob::processdefinitionkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.processDefinitionKey)
  return _internal_processdefinitionkey();
}
inline void ActivatedJob::_internal_set_processdefinitionkey(int64_t value) {
  
  _impl_.processdefinitionkey_ = value;
}
inline void ActivatedJob::set_processdefinitionkey(int64_t value) {
  _internal_set_processdefinitionkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.processDefinitionKey)
}

// string elementId = 7;
inline void ActivatedJob::clear_elementid() {
  _impl_.elementid_.ClearToEmpty();
}
inline const std::string& ActivatedJob::elementid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.elementId)
  return _internal_elementid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivatedJob::set_elementid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.elementid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.elementId)
}
inline std::string* ActivatedJob::mutable_elementid() {
  std::string* _s = _internal_mutable_elementid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivatedJob.elementId)
  return _s;
}
inline const std::string& ActivatedJob::_internal_elementid() const {
  return _impl_.elementid_.Get();
}
inline void ActivatedJob::_internal_set_elementid(const std::string& value) {
  
  _impl_.elementid_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivatedJob::_internal_mutable_elementid() {
  
  return _impl_.elementid_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivatedJob::release_elementid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ActivatedJob.elementId)
  return _impl_.elementid_.Release();
}
inline void ActivatedJob::set_allocated_elementid(std::string* elementid) {
  if (elementid != nullptr) {
    
  } else {
    
  }
  _impl_.elementid_.SetAllocated(elementid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.elementid_.IsDefault()) {
    _impl_.elementid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ActivatedJob.elementId)
}

// int64 elementInstanceKey = 8;
inline void ActivatedJob::clear_elementinstancekey() {
  _impl_.elementinstancekey_ = int64_t{0};
}
inline int64_t ActivatedJob::_internal_elementinstancekey() const {
  return _impl_.elementinstancekey_;
}
inline int64_t ActivatedJob::elementinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.elementInstanceKey)
  return _internal_elementinstancekey();
}
inline void ActivatedJob::_internal_set_elementinstancekey(int64_t value) {
  
  _impl_.elementinstancekey_ = value;
}
inline void ActivatedJob::set_elementinstancekey(int64_t value) {
  _internal_set_elementinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.elementInstanceKey)
}

// string customHeaders = 9;
inline void ActivatedJob::clear_customheaders() {
  _impl_.customheaders_.ClearToEmpty();
}
inline const std::string& ActivatedJob::customheaders() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.customHeaders)
  return _internal_customheaders();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivatedJob::set_customheaders(ArgT0&& arg0, ArgT... args) {
 
 _impl_.customheaders_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.customHeaders)
}
inline std::string* ActivatedJob::mutable_customheaders() {
  std::string* _s = _internal_mutable_customheaders();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivatedJob.customHeaders)
  return _s;
}
inline const std::string& ActivatedJob::_internal_customheaders() const {
  return _impl_.customheaders_.Get();
}
inline void ActivatedJob::_internal_set_customheaders(const std::string& value) {
  
  _impl_.customheaders_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivatedJob::_internal_mutable_customheaders() {
  
  return _impl_.customheaders_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivatedJob::release_customheaders() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ActivatedJob.customHeaders)
  return _impl_.customheaders_.Release();
}
inline void ActivatedJob::set_allocated_customheaders(std::string* customheaders) {
  if (customheaders != nullptr) {
    
  } else {
    
  }
  _impl_.customheaders_.SetAllocated(customheaders, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.customheaders_.IsDefault()) {
    _impl_.customheaders_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ActivatedJob.customHeaders)
}

// string worker = 10;
inline void ActivatedJob::clear_worker() {
  _impl_.worker_.ClearToEmpty();
}
inline const std::string& ActivatedJob::worker() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.worker)
  return _internal_worker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivatedJob::set_worker(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worker_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.worker)
}
inline std::string* ActivatedJob::mutable_worker() {
  std::string* _s = _internal_mutable_worker();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivatedJob.worker)
  return _s;
}
inline const std::string& ActivatedJob::_internal_worker() const {
  return _impl_.worker_.Get();
}
inline void ActivatedJob::_internal_set_worker(const std::string& value) {
  
  _impl_.worker_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivatedJob::_internal_mutable_worker() {
  
  return _impl_.worker_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivatedJob::release_worker() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ActivatedJob.worker)
  return _impl_.worker_.Release();
}
inline void ActivatedJob::set_allocated_worker(std::string* worker) {
  if (worker != nullptr) {
    
  } else {
    
  }
  _impl_.worker_.SetAllocated(worker, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worker_.IsDefault()) {
    _impl_.worker_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ActivatedJob.worker)
}

// int32 retries = 11;
inline void ActivatedJob::clear_retries() {
  _impl_.retries_ = 0;
}
inline int32_t ActivatedJob::_internal_retries() const {
  return _impl_.retries_;
}
inline int32_t ActivatedJob::retries() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.retries)
  return _internal_retries();
}
inline void ActivatedJob::_internal_set_retries(int32_t value) {
  
  _impl_.retries_ = value;
}
inline void ActivatedJob::set_retries(int32_t value) {
  _internal_set_retries(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.retries)
}

// int64 deadline = 12;
inline void ActivatedJob::clear_deadline() {
  _impl_.deadline_ = int64_t{0};
}
inline int64_t ActivatedJob::_internal_deadline() const {
  return _impl_.deadline_;
}
inline int64_t ActivatedJob::deadline() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.deadline)
  return _internal_deadline();
}
inline void ActivatedJob::_internal_set_deadline(int64_t value) {
  
  _impl_.deadline_ = value;
}
inline void ActivatedJob::set_deadline(int64_t value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.deadline)
}

// string variables = 13;
inline void ActivatedJob::clear_variables() {
  _impl_.variables_.ClearToEmpty();
}
inline const std::string& ActivatedJob::variables() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ActivatedJob.variables)
  return _internal_variables();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivatedJob::set_variables(ArgT0&& arg0, ArgT... args) {
 
 _impl_.variables_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ActivatedJob.variables)
}
inline std::string* ActivatedJob::mutable_variables() {
  std::string* _s = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ActivatedJob.variables)
  return _s;
}
inline const std::string& ActivatedJob::_internal_variables() const {
  return _impl_.variables_.Get();
}
inline void ActivatedJob::_internal_set_variables(const std::string& value) {
  
  _impl_.variables_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivatedJob::_internal_mutable_variables() {
  
  return _impl_.variables_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivatedJob::release_variables() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ActivatedJob.variables)
  return _impl_.variables_.Release();
}
inline void ActivatedJob::set_allocated_variables(std::string* variables) {
  if (variables != nullptr) {
    
  } else {
    
  }
  _impl_.variables_.SetAllocated(variables, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.variables_.IsDefault()) {
    _impl_.variables_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ActivatedJob.variables)
}

// -------------------------------------------------------------------

// CancelProcessInstanceRequest

// int64 processInstanceKey = 1;
inline void CancelProcessInstanceRequest::clear_processinstancekey() {
  _impl_.processinstancekey_ = int64_t{0};
}
inline int64_t CancelProcessInstanceRequest::_internal_processinstancekey() const {
  return _impl_.processinstancekey_;
}
inline int64_t CancelProcessInstanceRequest::processinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CancelProcessInstanceRequest.processInstanceKey)
  return _internal_processinstancekey();
}
inline void CancelProcessInstanceRequest::_internal_set_processinstancekey(int64_t value) {
  
  _impl_.processinstancekey_ = value;
}
inline void CancelProcessInstanceRequest::set_processinstancekey(int64_t value) {
  _internal_set_processinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CancelProcessInstanceRequest.processInstanceKey)
}

// -------------------------------------------------------------------

// CancelProcessInstanceResponse

// -------------------------------------------------------------------

// CompleteJobRequest

// int64 jobKey = 1;
inline void CompleteJobRequest::clear_jobkey() {
  _impl_.jobkey_ = int64_t{0};
}
inline int64_t CompleteJobRequest::_internal_jobkey() const {
  return _impl_.jobkey_;
}
inline int64_t CompleteJobRequest::jobkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CompleteJobRequest.jobKey)
  return _internal_jobkey();
}
inline void CompleteJobRequest::_internal_set_jobkey(int64_t value) {
  
  _impl_.jobkey_ = value;
}
inline void CompleteJobRequest::set_jobkey(int64_t value) {
  _internal_set_jobkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CompleteJobRequest.jobKey)
}

// string variables = 2;
inline void CompleteJobRequest::clear_variables() {
  _impl_.variables_.ClearToEmpty();
}
inline const std::string& CompleteJobRequest::variables() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CompleteJobRequest.variables)
  return _internal_variables();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompleteJobRequest::set_variables(ArgT0&& arg0, ArgT... args) {
 
 _impl_.variables_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.CompleteJobRequest.variables)
}
inline std::string* CompleteJobRequest::mutable_variables() {
  std::string* _s = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CompleteJobRequest.variables)
  return _s;
}
inline const std::string& CompleteJobRequest::_internal_variables() const {
  return _impl_.variables_.Get();
}
inline void CompleteJobRequest::_internal_set_variables(const std::string& value) {
  
  _impl_.variables_.Set(value, GetArenaForAllocation());
}
inline std::string* CompleteJobRequest::_internal_mutable_variables() {
  
  return _impl_.variables_.Mutable(GetArenaForAllocation());
}
inline std::string* CompleteJobRequest::release_variables() {
  // @@protoc_insertion_point(field_release:gateway_protocol.CompleteJobRequest.variables)
  return _impl_.variables_.Release();
}
inline void CompleteJobRequest::set_allocated_variables(std::string* variables) {
  if (variables != nullptr) {
    
  } else {
    
  }
  _impl_.variables_.SetAllocated(variables, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.variables_.IsDefault()) {
    _impl_.variables_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.CompleteJobRequest.variables)
}

// -------------------------------------------------------------------

// CompleteJobResponse

// -------------------------------------------------------------------

// CreateProcessInstanceRequest

// int64 processDefinitionKey = 1;
inline void CreateProcessInstanceRequest::clear_processdefinitionkey() {
  _impl_.processdefinitionkey_ = int64_t{0};
}
inline int64_t CreateProcessInstanceRequest::_internal_processdefinitionkey() const {
  return _impl_.processdefinitionkey_;
}
inline int64_t CreateProcessInstanceRequest::processdefinitionkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceRequest.processDefinitionKey)
  return _internal_processdefinitionkey();
}
inline void CreateProcessInstanceRequest::_internal_set_processdefinitionkey(int64_t value) {
  
  _impl_.processdefinitionkey_ = value;
}
inline void CreateProcessInstanceRequest::set_processdefinitionkey(int64_t value) {
  _internal_set_processdefinitionkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceRequest.processDefinitionKey)
}

// string bpmnProcessId = 2;
inline void CreateProcessInstanceRequest::clear_bpmnprocessid() {
  _impl_.bpmnprocessid_.ClearToEmpty();
}
inline const std::string& CreateProcessInstanceRequest::bpmnprocessid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceRequest.bpmnProcessId)
  return _internal_bpmnprocessid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProcessInstanceRequest::set_bpmnprocessid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bpmnprocessid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceRequest.bpmnProcessId)
}
inline std::string* CreateProcessInstanceRequest::mutable_bpmnprocessid() {
  std::string* _s = _internal_mutable_bpmnprocessid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CreateProcessInstanceRequest.bpmnProcessId)
  return _s;
}
inline const std::string& CreateProcessInstanceRequest::_internal_bpmnprocessid() const {
  return _impl_.bpmnprocessid_.Get();
}
inline void CreateProcessInstanceRequest::_internal_set_bpmnprocessid(const std::string& value) {
  
  _impl_.bpmnprocessid_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceRequest::_internal_mutable_bpmnprocessid() {
  
  return _impl_.bpmnprocessid_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceRequest::release_bpmnprocessid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.CreateProcessInstanceRequest.bpmnProcessId)
  return _impl_.bpmnprocessid_.Release();
}
inline void CreateProcessInstanceRequest::set_allocated_bpmnprocessid(std::string* bpmnprocessid) {
  if (bpmnprocessid != nullptr) {
    
  } else {
    
  }
  _impl_.bpmnprocessid_.SetAllocated(bpmnprocessid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bpmnprocessid_.IsDefault()) {
    _impl_.bpmnprocessid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.CreateProcessInstanceRequest.bpmnProcessId)
}

// int32 version = 3;
inline void CreateProcessInstanceRequest::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t CreateProcessInstanceRequest::_internal_version() const {
  return _impl_.version_;
}
inline int32_t CreateProcessInstanceRequest::version() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceRequest.version)
  return _internal_version();
}
inline void CreateProcessInstanceRequest::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void CreateProcessInstanceRequest::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceRequest.version)
}

// string variables = 4;
inline void CreateProcessInstanceRequest::clear_variables() {
  _impl_.variables_.ClearToEmpty();
}
inline const std::string& CreateProcessInstanceRequest::variables() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceRequest.variables)
  return _internal_variables();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProcessInstanceRequest::set_variables(ArgT0&& arg0, ArgT... args) {
 
 _impl_.variables_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceRequest.variables)
}
inline std::string* CreateProcessInstanceRequest::mutable_variables() {
  std::string* _s = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CreateProcessInstanceRequest.variables)
  return _s;
}
inline const std::string& CreateProcessInstanceRequest::_internal_variables() const {
  return _impl_.variables_.Get();
}
inline void CreateProcessInstanceRequest::_internal_set_variables(const std::string& value) {
  
  _impl_.variables_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceRequest::_internal_mutable_variables() {
  
  return _impl_.variables_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceRequest::release_variables() {
  // @@protoc_insertion_point(field_release:gateway_protocol.CreateProcessInstanceRequest.variables)
  return _impl_.variables_.Release();
}
inline void CreateProcessInstanceRequest::set_allocated_variables(std::string* variables) {
  if (variables != nullptr) {
    
  } else {
    
  }
  _impl_.variables_.SetAllocated(variables, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.variables_.IsDefault()) {
    _impl_.variables_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.CreateProcessInstanceRequest.variables)
}

// repeated .gateway_protocol.ProcessInstanceCreationStartInstruction startInstructions = 5;
inline int CreateProcessInstanceRequest::_internal_startinstructions_size() const {
  return _impl_.startinstructions_.size();
}
inline int CreateProcessInstanceRequest::startinstructions_size() const {
  return _internal_startinstructions_size();
}
inline void CreateProcessInstanceRequest::clear_startinstructions() {
  _impl_.startinstructions_.Clear();
}
inline ::gateway_protocol::ProcessInstanceCreationStartInstruction* CreateProcessInstanceRequest::mutable_startinstructions(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CreateProcessInstanceRequest.startInstructions)
  return _impl_.startinstructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessInstanceCreationStartInstruction >*
CreateProcessInstanceRequest::mutable_startinstructions() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.CreateProcessInstanceRequest.startInstructions)
  return &_impl_.startinstructions_;
}
inline const ::gateway_protocol::ProcessInstanceCreationStartInstruction& CreateProcessInstanceRequest::_internal_startinstructions(int index) const {
  return _impl_.startinstructions_.Get(index);
}
inline const ::gateway_protocol::ProcessInstanceCreationStartInstruction& CreateProcessInstanceRequest::startinstructions(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceRequest.startInstructions)
  return _internal_startinstructions(index);
}
inline ::gateway_protocol::ProcessInstanceCreationStartInstruction* CreateProcessInstanceRequest::_internal_add_startinstructions() {
  return _impl_.startinstructions_.Add();
}
inline ::gateway_protocol::ProcessInstanceCreationStartInstruction* CreateProcessInstanceRequest::add_startinstructions() {
  ::gateway_protocol::ProcessInstanceCreationStartInstruction* _add = _internal_add_startinstructions();
  // @@protoc_insertion_point(field_add:gateway_protocol.CreateProcessInstanceRequest.startInstructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessInstanceCreationStartInstruction >&
CreateProcessInstanceRequest::startinstructions() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.CreateProcessInstanceRequest.startInstructions)
  return _impl_.startinstructions_;
}

// -------------------------------------------------------------------

// ProcessInstanceCreationStartInstruction

// string elementId = 1;
inline void ProcessInstanceCreationStartInstruction::clear_elementid() {
  _impl_.elementid_.ClearToEmpty();
}
inline const std::string& ProcessInstanceCreationStartInstruction::elementid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ProcessInstanceCreationStartInstruction.elementId)
  return _internal_elementid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessInstanceCreationStartInstruction::set_elementid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.elementid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ProcessInstanceCreationStartInstruction.elementId)
}
inline std::string* ProcessInstanceCreationStartInstruction::mutable_elementid() {
  std::string* _s = _internal_mutable_elementid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ProcessInstanceCreationStartInstruction.elementId)
  return _s;
}
inline const std::string& ProcessInstanceCreationStartInstruction::_internal_elementid() const {
  return _impl_.elementid_.Get();
}
inline void ProcessInstanceCreationStartInstruction::_internal_set_elementid(const std::string& value) {
  
  _impl_.elementid_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessInstanceCreationStartInstruction::_internal_mutable_elementid() {
  
  return _impl_.elementid_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessInstanceCreationStartInstruction::release_elementid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ProcessInstanceCreationStartInstruction.elementId)
  return _impl_.elementid_.Release();
}
inline void ProcessInstanceCreationStartInstruction::set_allocated_elementid(std::string* elementid) {
  if (elementid != nullptr) {
    
  } else {
    
  }
  _impl_.elementid_.SetAllocated(elementid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.elementid_.IsDefault()) {
    _impl_.elementid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ProcessInstanceCreationStartInstruction.elementId)
}

// -------------------------------------------------------------------

// CreateProcessInstanceResponse

// int64 processDefinitionKey = 1;
inline void CreateProcessInstanceResponse::clear_processdefinitionkey() {
  _impl_.processdefinitionkey_ = int64_t{0};
}
inline int64_t CreateProcessInstanceResponse::_internal_processdefinitionkey() const {
  return _impl_.processdefinitionkey_;
}
inline int64_t CreateProcessInstanceResponse::processdefinitionkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceResponse.processDefinitionKey)
  return _internal_processdefinitionkey();
}
inline void CreateProcessInstanceResponse::_internal_set_processdefinitionkey(int64_t value) {
  
  _impl_.processdefinitionkey_ = value;
}
inline void CreateProcessInstanceResponse::set_processdefinitionkey(int64_t value) {
  _internal_set_processdefinitionkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceResponse.processDefinitionKey)
}

// string bpmnProcessId = 2;
inline void CreateProcessInstanceResponse::clear_bpmnprocessid() {
  _impl_.bpmnprocessid_.ClearToEmpty();
}
inline const std::string& CreateProcessInstanceResponse::bpmnprocessid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceResponse.bpmnProcessId)
  return _internal_bpmnprocessid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProcessInstanceResponse::set_bpmnprocessid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bpmnprocessid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceResponse.bpmnProcessId)
}
inline std::string* CreateProcessInstanceResponse::mutable_bpmnprocessid() {
  std::string* _s = _internal_mutable_bpmnprocessid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CreateProcessInstanceResponse.bpmnProcessId)
  return _s;
}
inline const std::string& CreateProcessInstanceResponse::_internal_bpmnprocessid() const {
  return _impl_.bpmnprocessid_.Get();
}
inline void CreateProcessInstanceResponse::_internal_set_bpmnprocessid(const std::string& value) {
  
  _impl_.bpmnprocessid_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceResponse::_internal_mutable_bpmnprocessid() {
  
  return _impl_.bpmnprocessid_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceResponse::release_bpmnprocessid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.CreateProcessInstanceResponse.bpmnProcessId)
  return _impl_.bpmnprocessid_.Release();
}
inline void CreateProcessInstanceResponse::set_allocated_bpmnprocessid(std::string* bpmnprocessid) {
  if (bpmnprocessid != nullptr) {
    
  } else {
    
  }
  _impl_.bpmnprocessid_.SetAllocated(bpmnprocessid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bpmnprocessid_.IsDefault()) {
    _impl_.bpmnprocessid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.CreateProcessInstanceResponse.bpmnProcessId)
}

// int32 version = 3;
inline void CreateProcessInstanceResponse::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t CreateProcessInstanceResponse::_internal_version() const {
  return _impl_.version_;
}
inline int32_t CreateProcessInstanceResponse::version() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceResponse.version)
  return _internal_version();
}
inline void CreateProcessInstanceResponse::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void CreateProcessInstanceResponse::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceResponse.version)
}

// int64 processInstanceKey = 4;
inline void CreateProcessInstanceResponse::clear_processinstancekey() {
  _impl_.processinstancekey_ = int64_t{0};
}
inline int64_t CreateProcessInstanceResponse::_internal_processinstancekey() const {
  return _impl_.processinstancekey_;
}
inline int64_t CreateProcessInstanceResponse::processinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceResponse.processInstanceKey)
  return _internal_processinstancekey();
}
inline void CreateProcessInstanceResponse::_internal_set_processinstancekey(int64_t value) {
  
  _impl_.processinstancekey_ = value;
}
inline void CreateProcessInstanceResponse::set_processinstancekey(int64_t value) {
  _internal_set_processinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceResponse.processInstanceKey)
}

// -------------------------------------------------------------------

// CreateProcessInstanceWithResultRequest

// .gateway_protocol.CreateProcessInstanceRequest request = 1;
inline bool CreateProcessInstanceWithResultRequest::_internal_has_request() const {
  return this != internal_default_instance() && _impl_.request_ != nullptr;
}
inline bool CreateProcessInstanceWithResultRequest::has_request() const {
  return _internal_has_request();
}
inline void CreateProcessInstanceWithResultRequest::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
inline const ::gateway_protocol::CreateProcessInstanceRequest& CreateProcessInstanceWithResultRequest::_internal_request() const {
  const ::gateway_protocol::CreateProcessInstanceRequest* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::gateway_protocol::CreateProcessInstanceRequest&>(
      ::gateway_protocol::_CreateProcessInstanceRequest_default_instance_);
}
inline const ::gateway_protocol::CreateProcessInstanceRequest& CreateProcessInstanceWithResultRequest::request() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceWithResultRequest.request)
  return _internal_request();
}
inline void CreateProcessInstanceWithResultRequest::unsafe_arena_set_allocated_request(
    ::gateway_protocol::CreateProcessInstanceRequest* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gateway_protocol.CreateProcessInstanceWithResultRequest.request)
}
inline ::gateway_protocol::CreateProcessInstanceRequest* CreateProcessInstanceWithResultRequest::release_request() {
  
  ::gateway_protocol::CreateProcessInstanceRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gateway_protocol::CreateProcessInstanceRequest* CreateProcessInstanceWithResultRequest::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:gateway_protocol.CreateProcessInstanceWithResultRequest.request)
  
  ::gateway_protocol::CreateProcessInstanceRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::gateway_protocol::CreateProcessInstanceRequest* CreateProcessInstanceWithResultRequest::_internal_mutable_request() {
  
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::gateway_protocol::CreateProcessInstanceRequest>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::gateway_protocol::CreateProcessInstanceRequest* CreateProcessInstanceWithResultRequest::mutable_request() {
  ::gateway_protocol::CreateProcessInstanceRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CreateProcessInstanceWithResultRequest.request)
  return _msg;
}
inline void CreateProcessInstanceWithResultRequest::set_allocated_request(::gateway_protocol::CreateProcessInstanceRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.CreateProcessInstanceWithResultRequest.request)
}

// int64 requestTimeout = 2;
inline void CreateProcessInstanceWithResultRequest::clear_requesttimeout() {
  _impl_.requesttimeout_ = int64_t{0};
}
inline int64_t CreateProcessInstanceWithResultRequest::_internal_requesttimeout() const {
  return _impl_.requesttimeout_;
}
inline int64_t CreateProcessInstanceWithResultRequest::requesttimeout() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceWithResultRequest.requestTimeout)
  return _internal_requesttimeout();
}
inline void CreateProcessInstanceWithResultRequest::_internal_set_requesttimeout(int64_t value) {
  
  _impl_.requesttimeout_ = value;
}
inline void CreateProcessInstanceWithResultRequest::set_requesttimeout(int64_t value) {
  _internal_set_requesttimeout(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceWithResultRequest.requestTimeout)
}

// repeated string fetchVariables = 3;
inline int CreateProcessInstanceWithResultRequest::_internal_fetchvariables_size() const {
  return _impl_.fetchvariables_.size();
}
inline int CreateProcessInstanceWithResultRequest::fetchvariables_size() const {
  return _internal_fetchvariables_size();
}
inline void CreateProcessInstanceWithResultRequest::clear_fetchvariables() {
  _impl_.fetchvariables_.Clear();
}
inline std::string* CreateProcessInstanceWithResultRequest::add_fetchvariables() {
  std::string* _s = _internal_add_fetchvariables();
  // @@protoc_insertion_point(field_add_mutable:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
  return _s;
}
inline const std::string& CreateProcessInstanceWithResultRequest::_internal_fetchvariables(int index) const {
  return _impl_.fetchvariables_.Get(index);
}
inline const std::string& CreateProcessInstanceWithResultRequest::fetchvariables(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
  return _internal_fetchvariables(index);
}
inline std::string* CreateProcessInstanceWithResultRequest::mutable_fetchvariables(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
  return _impl_.fetchvariables_.Mutable(index);
}
inline void CreateProcessInstanceWithResultRequest::set_fetchvariables(int index, const std::string& value) {
  _impl_.fetchvariables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
}
inline void CreateProcessInstanceWithResultRequest::set_fetchvariables(int index, std::string&& value) {
  _impl_.fetchvariables_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
}
inline void CreateProcessInstanceWithResultRequest::set_fetchvariables(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fetchvariables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
}
inline void CreateProcessInstanceWithResultRequest::set_fetchvariables(int index, const char* value, size_t size) {
  _impl_.fetchvariables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
}
inline std::string* CreateProcessInstanceWithResultRequest::_internal_add_fetchvariables() {
  return _impl_.fetchvariables_.Add();
}
inline void CreateProcessInstanceWithResultRequest::add_fetchvariables(const std::string& value) {
  _impl_.fetchvariables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
}
inline void CreateProcessInstanceWithResultRequest::add_fetchvariables(std::string&& value) {
  _impl_.fetchvariables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
}
inline void CreateProcessInstanceWithResultRequest::add_fetchvariables(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fetchvariables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
}
inline void CreateProcessInstanceWithResultRequest::add_fetchvariables(const char* value, size_t size) {
  _impl_.fetchvariables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateProcessInstanceWithResultRequest::fetchvariables() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
  return _impl_.fetchvariables_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateProcessInstanceWithResultRequest::mutable_fetchvariables() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.CreateProcessInstanceWithResultRequest.fetchVariables)
  return &_impl_.fetchvariables_;
}

// -------------------------------------------------------------------

// CreateProcessInstanceWithResultResponse

// int64 processDefinitionKey = 1;
inline void CreateProcessInstanceWithResultResponse::clear_processdefinitionkey() {
  _impl_.processdefinitionkey_ = int64_t{0};
}
inline int64_t CreateProcessInstanceWithResultResponse::_internal_processdefinitionkey() const {
  return _impl_.processdefinitionkey_;
}
inline int64_t CreateProcessInstanceWithResultResponse::processdefinitionkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceWithResultResponse.processDefinitionKey)
  return _internal_processdefinitionkey();
}
inline void CreateProcessInstanceWithResultResponse::_internal_set_processdefinitionkey(int64_t value) {
  
  _impl_.processdefinitionkey_ = value;
}
inline void CreateProcessInstanceWithResultResponse::set_processdefinitionkey(int64_t value) {
  _internal_set_processdefinitionkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceWithResultResponse.processDefinitionKey)
}

// string bpmnProcessId = 2;
inline void CreateProcessInstanceWithResultResponse::clear_bpmnprocessid() {
  _impl_.bpmnprocessid_.ClearToEmpty();
}
inline const std::string& CreateProcessInstanceWithResultResponse::bpmnprocessid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceWithResultResponse.bpmnProcessId)
  return _internal_bpmnprocessid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProcessInstanceWithResultResponse::set_bpmnprocessid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bpmnprocessid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceWithResultResponse.bpmnProcessId)
}
inline std::string* CreateProcessInstanceWithResultResponse::mutable_bpmnprocessid() {
  std::string* _s = _internal_mutable_bpmnprocessid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CreateProcessInstanceWithResultResponse.bpmnProcessId)
  return _s;
}
inline const std::string& CreateProcessInstanceWithResultResponse::_internal_bpmnprocessid() const {
  return _impl_.bpmnprocessid_.Get();
}
inline void CreateProcessInstanceWithResultResponse::_internal_set_bpmnprocessid(const std::string& value) {
  
  _impl_.bpmnprocessid_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceWithResultResponse::_internal_mutable_bpmnprocessid() {
  
  return _impl_.bpmnprocessid_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceWithResultResponse::release_bpmnprocessid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.CreateProcessInstanceWithResultResponse.bpmnProcessId)
  return _impl_.bpmnprocessid_.Release();
}
inline void CreateProcessInstanceWithResultResponse::set_allocated_bpmnprocessid(std::string* bpmnprocessid) {
  if (bpmnprocessid != nullptr) {
    
  } else {
    
  }
  _impl_.bpmnprocessid_.SetAllocated(bpmnprocessid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bpmnprocessid_.IsDefault()) {
    _impl_.bpmnprocessid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.CreateProcessInstanceWithResultResponse.bpmnProcessId)
}

// int32 version = 3;
inline void CreateProcessInstanceWithResultResponse::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t CreateProcessInstanceWithResultResponse::_internal_version() const {
  return _impl_.version_;
}
inline int32_t CreateProcessInstanceWithResultResponse::version() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceWithResultResponse.version)
  return _internal_version();
}
inline void CreateProcessInstanceWithResultResponse::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void CreateProcessInstanceWithResultResponse::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceWithResultResponse.version)
}

// int64 processInstanceKey = 4;
inline void CreateProcessInstanceWithResultResponse::clear_processinstancekey() {
  _impl_.processinstancekey_ = int64_t{0};
}
inline int64_t CreateProcessInstanceWithResultResponse::_internal_processinstancekey() const {
  return _impl_.processinstancekey_;
}
inline int64_t CreateProcessInstanceWithResultResponse::processinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceWithResultResponse.processInstanceKey)
  return _internal_processinstancekey();
}
inline void CreateProcessInstanceWithResultResponse::_internal_set_processinstancekey(int64_t value) {
  
  _impl_.processinstancekey_ = value;
}
inline void CreateProcessInstanceWithResultResponse::set_processinstancekey(int64_t value) {
  _internal_set_processinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceWithResultResponse.processInstanceKey)
}

// string variables = 5;
inline void CreateProcessInstanceWithResultResponse::clear_variables() {
  _impl_.variables_.ClearToEmpty();
}
inline const std::string& CreateProcessInstanceWithResultResponse::variables() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.CreateProcessInstanceWithResultResponse.variables)
  return _internal_variables();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProcessInstanceWithResultResponse::set_variables(ArgT0&& arg0, ArgT... args) {
 
 _impl_.variables_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.CreateProcessInstanceWithResultResponse.variables)
}
inline std::string* CreateProcessInstanceWithResultResponse::mutable_variables() {
  std::string* _s = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.CreateProcessInstanceWithResultResponse.variables)
  return _s;
}
inline const std::string& CreateProcessInstanceWithResultResponse::_internal_variables() const {
  return _impl_.variables_.Get();
}
inline void CreateProcessInstanceWithResultResponse::_internal_set_variables(const std::string& value) {
  
  _impl_.variables_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceWithResultResponse::_internal_mutable_variables() {
  
  return _impl_.variables_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateProcessInstanceWithResultResponse::release_variables() {
  // @@protoc_insertion_point(field_release:gateway_protocol.CreateProcessInstanceWithResultResponse.variables)
  return _impl_.variables_.Release();
}
inline void CreateProcessInstanceWithResultResponse::set_allocated_variables(std::string* variables) {
  if (variables != nullptr) {
    
  } else {
    
  }
  _impl_.variables_.SetAllocated(variables, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.variables_.IsDefault()) {
    _impl_.variables_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.CreateProcessInstanceWithResultResponse.variables)
}

// -------------------------------------------------------------------

// DeployProcessRequest

// repeated .gateway_protocol.ProcessRequestObject processes = 1;
inline int DeployProcessRequest::_internal_processes_size() const {
  return _impl_.processes_.size();
}
inline int DeployProcessRequest::processes_size() const {
  return _internal_processes_size();
}
inline void DeployProcessRequest::clear_processes() {
  _impl_.processes_.Clear();
}
inline ::gateway_protocol::ProcessRequestObject* DeployProcessRequest::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DeployProcessRequest.processes)
  return _impl_.processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessRequestObject >*
DeployProcessRequest::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.DeployProcessRequest.processes)
  return &_impl_.processes_;
}
inline const ::gateway_protocol::ProcessRequestObject& DeployProcessRequest::_internal_processes(int index) const {
  return _impl_.processes_.Get(index);
}
inline const ::gateway_protocol::ProcessRequestObject& DeployProcessRequest::processes(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DeployProcessRequest.processes)
  return _internal_processes(index);
}
inline ::gateway_protocol::ProcessRequestObject* DeployProcessRequest::_internal_add_processes() {
  return _impl_.processes_.Add();
}
inline ::gateway_protocol::ProcessRequestObject* DeployProcessRequest::add_processes() {
  ::gateway_protocol::ProcessRequestObject* _add = _internal_add_processes();
  // @@protoc_insertion_point(field_add:gateway_protocol.DeployProcessRequest.processes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessRequestObject >&
DeployProcessRequest::processes() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.DeployProcessRequest.processes)
  return _impl_.processes_;
}

// -------------------------------------------------------------------

// ProcessRequestObject

// string name = 1;
inline void ProcessRequestObject::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ProcessRequestObject::name() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ProcessRequestObject.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRequestObject::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ProcessRequestObject.name)
}
inline std::string* ProcessRequestObject::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ProcessRequestObject.name)
  return _s;
}
inline const std::string& ProcessRequestObject::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProcessRequestObject::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessRequestObject::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessRequestObject::release_name() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ProcessRequestObject.name)
  return _impl_.name_.Release();
}
inline void ProcessRequestObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ProcessRequestObject.name)
}

// bytes definition = 2;
inline void ProcessRequestObject::clear_definition() {
  _impl_.definition_.ClearToEmpty();
}
inline const std::string& ProcessRequestObject::definition() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ProcessRequestObject.definition)
  return _internal_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRequestObject::set_definition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.definition_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ProcessRequestObject.definition)
}
inline std::string* ProcessRequestObject::mutable_definition() {
  std::string* _s = _internal_mutable_definition();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ProcessRequestObject.definition)
  return _s;
}
inline const std::string& ProcessRequestObject::_internal_definition() const {
  return _impl_.definition_.Get();
}
inline void ProcessRequestObject::_internal_set_definition(const std::string& value) {
  
  _impl_.definition_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessRequestObject::_internal_mutable_definition() {
  
  return _impl_.definition_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessRequestObject::release_definition() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ProcessRequestObject.definition)
  return _impl_.definition_.Release();
}
inline void ProcessRequestObject::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  _impl_.definition_.SetAllocated(definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.definition_.IsDefault()) {
    _impl_.definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ProcessRequestObject.definition)
}

// -------------------------------------------------------------------

// DeployProcessResponse

// int64 key = 1;
inline void DeployProcessResponse::clear_key() {
  _impl_.key_ = int64_t{0};
}
inline int64_t DeployProcessResponse::_internal_key() const {
  return _impl_.key_;
}
inline int64_t DeployProcessResponse::key() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DeployProcessResponse.key)
  return _internal_key();
}
inline void DeployProcessResponse::_internal_set_key(int64_t value) {
  
  _impl_.key_ = value;
}
inline void DeployProcessResponse::set_key(int64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.DeployProcessResponse.key)
}

// repeated .gateway_protocol.ProcessMetadata processes = 2;
inline int DeployProcessResponse::_internal_processes_size() const {
  return _impl_.processes_.size();
}
inline int DeployProcessResponse::processes_size() const {
  return _internal_processes_size();
}
inline void DeployProcessResponse::clear_processes() {
  _impl_.processes_.Clear();
}
inline ::gateway_protocol::ProcessMetadata* DeployProcessResponse::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DeployProcessResponse.processes)
  return _impl_.processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessMetadata >*
DeployProcessResponse::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.DeployProcessResponse.processes)
  return &_impl_.processes_;
}
inline const ::gateway_protocol::ProcessMetadata& DeployProcessResponse::_internal_processes(int index) const {
  return _impl_.processes_.Get(index);
}
inline const ::gateway_protocol::ProcessMetadata& DeployProcessResponse::processes(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DeployProcessResponse.processes)
  return _internal_processes(index);
}
inline ::gateway_protocol::ProcessMetadata* DeployProcessResponse::_internal_add_processes() {
  return _impl_.processes_.Add();
}
inline ::gateway_protocol::ProcessMetadata* DeployProcessResponse::add_processes() {
  ::gateway_protocol::ProcessMetadata* _add = _internal_add_processes();
  // @@protoc_insertion_point(field_add:gateway_protocol.DeployProcessResponse.processes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ProcessMetadata >&
DeployProcessResponse::processes() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.DeployProcessResponse.processes)
  return _impl_.processes_;
}

// -------------------------------------------------------------------

// DeployResourceRequest

// repeated .gateway_protocol.Resource resources = 1;
inline int DeployResourceRequest::_internal_resources_size() const {
  return _impl_.resources_.size();
}
inline int DeployResourceRequest::resources_size() const {
  return _internal_resources_size();
}
inline void DeployResourceRequest::clear_resources() {
  _impl_.resources_.Clear();
}
inline ::gateway_protocol::Resource* DeployResourceRequest::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DeployResourceRequest.resources)
  return _impl_.resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Resource >*
DeployResourceRequest::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.DeployResourceRequest.resources)
  return &_impl_.resources_;
}
inline const ::gateway_protocol::Resource& DeployResourceRequest::_internal_resources(int index) const {
  return _impl_.resources_.Get(index);
}
inline const ::gateway_protocol::Resource& DeployResourceRequest::resources(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DeployResourceRequest.resources)
  return _internal_resources(index);
}
inline ::gateway_protocol::Resource* DeployResourceRequest::_internal_add_resources() {
  return _impl_.resources_.Add();
}
inline ::gateway_protocol::Resource* DeployResourceRequest::add_resources() {
  ::gateway_protocol::Resource* _add = _internal_add_resources();
  // @@protoc_insertion_point(field_add:gateway_protocol.DeployResourceRequest.resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Resource >&
DeployResourceRequest::resources() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.DeployResourceRequest.resources)
  return _impl_.resources_;
}

// -------------------------------------------------------------------

// Resource

// string name = 1;
inline void Resource::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Resource::name() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.Resource.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Resource::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.Resource.name)
}
inline std::string* Resource::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.Resource.name)
  return _s;
}
inline const std::string& Resource::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Resource::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Resource::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Resource::release_name() {
  // @@protoc_insertion_point(field_release:gateway_protocol.Resource.name)
  return _impl_.name_.Release();
}
inline void Resource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.Resource.name)
}

// bytes content = 2;
inline void Resource::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Resource::content() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.Resource.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Resource::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.Resource.content)
}
inline std::string* Resource::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.Resource.content)
  return _s;
}
inline const std::string& Resource::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Resource::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Resource::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Resource::release_content() {
  // @@protoc_insertion_point(field_release:gateway_protocol.Resource.content)
  return _impl_.content_.Release();
}
inline void Resource::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.Resource.content)
}

// -------------------------------------------------------------------

// DeployResourceResponse

// int64 key = 1;
inline void DeployResourceResponse::clear_key() {
  _impl_.key_ = int64_t{0};
}
inline int64_t DeployResourceResponse::_internal_key() const {
  return _impl_.key_;
}
inline int64_t DeployResourceResponse::key() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DeployResourceResponse.key)
  return _internal_key();
}
inline void DeployResourceResponse::_internal_set_key(int64_t value) {
  
  _impl_.key_ = value;
}
inline void DeployResourceResponse::set_key(int64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.DeployResourceResponse.key)
}

// repeated .gateway_protocol.Deployment deployments = 2;
inline int DeployResourceResponse::_internal_deployments_size() const {
  return _impl_.deployments_.size();
}
inline int DeployResourceResponse::deployments_size() const {
  return _internal_deployments_size();
}
inline void DeployResourceResponse::clear_deployments() {
  _impl_.deployments_.Clear();
}
inline ::gateway_protocol::Deployment* DeployResourceResponse::mutable_deployments(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DeployResourceResponse.deployments)
  return _impl_.deployments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Deployment >*
DeployResourceResponse::mutable_deployments() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.DeployResourceResponse.deployments)
  return &_impl_.deployments_;
}
inline const ::gateway_protocol::Deployment& DeployResourceResponse::_internal_deployments(int index) const {
  return _impl_.deployments_.Get(index);
}
inline const ::gateway_protocol::Deployment& DeployResourceResponse::deployments(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DeployResourceResponse.deployments)
  return _internal_deployments(index);
}
inline ::gateway_protocol::Deployment* DeployResourceResponse::_internal_add_deployments() {
  return _impl_.deployments_.Add();
}
inline ::gateway_protocol::Deployment* DeployResourceResponse::add_deployments() {
  ::gateway_protocol::Deployment* _add = _internal_add_deployments();
  // @@protoc_insertion_point(field_add:gateway_protocol.DeployResourceResponse.deployments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Deployment >&
DeployResourceResponse::deployments() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.DeployResourceResponse.deployments)
  return _impl_.deployments_;
}

// -------------------------------------------------------------------

// Deployment

// .gateway_protocol.ProcessMetadata process = 1;
inline bool Deployment::_internal_has_process() const {
  return Metadata_case() == kProcess;
}
inline bool Deployment::has_process() const {
  return _internal_has_process();
}
inline void Deployment::set_has_process() {
  _impl_._oneof_case_[0] = kProcess;
}
inline void Deployment::clear_process() {
  if (_internal_has_process()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Metadata_.process_;
    }
    clear_has_Metadata();
  }
}
inline ::gateway_protocol::ProcessMetadata* Deployment::release_process() {
  // @@protoc_insertion_point(field_release:gateway_protocol.Deployment.process)
  if (_internal_has_process()) {
    clear_has_Metadata();
    ::gateway_protocol::ProcessMetadata* temp = _impl_.Metadata_.process_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Metadata_.process_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gateway_protocol::ProcessMetadata& Deployment::_internal_process() const {
  return _internal_has_process()
      ? *_impl_.Metadata_.process_
      : reinterpret_cast< ::gateway_protocol::ProcessMetadata&>(::gateway_protocol::_ProcessMetadata_default_instance_);
}
inline const ::gateway_protocol::ProcessMetadata& Deployment::process() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.Deployment.process)
  return _internal_process();
}
inline ::gateway_protocol::ProcessMetadata* Deployment::unsafe_arena_release_process() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gateway_protocol.Deployment.process)
  if (_internal_has_process()) {
    clear_has_Metadata();
    ::gateway_protocol::ProcessMetadata* temp = _impl_.Metadata_.process_;
    _impl_.Metadata_.process_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Deployment::unsafe_arena_set_allocated_process(::gateway_protocol::ProcessMetadata* process) {
  clear_Metadata();
  if (process) {
    set_has_process();
    _impl_.Metadata_.process_ = process;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gateway_protocol.Deployment.process)
}
inline ::gateway_protocol::ProcessMetadata* Deployment::_internal_mutable_process() {
  if (!_internal_has_process()) {
    clear_Metadata();
    set_has_process();
    _impl_.Metadata_.process_ = CreateMaybeMessage< ::gateway_protocol::ProcessMetadata >(GetArenaForAllocation());
  }
  return _impl_.Metadata_.process_;
}
inline ::gateway_protocol::ProcessMetadata* Deployment::mutable_process() {
  ::gateway_protocol::ProcessMetadata* _msg = _internal_mutable_process();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.Deployment.process)
  return _msg;
}

// .gateway_protocol.DecisionMetadata decision = 2;
inline bool Deployment::_internal_has_decision() const {
  return Metadata_case() == kDecision;
}
inline bool Deployment::has_decision() const {
  return _internal_has_decision();
}
inline void Deployment::set_has_decision() {
  _impl_._oneof_case_[0] = kDecision;
}
inline void Deployment::clear_decision() {
  if (_internal_has_decision()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Metadata_.decision_;
    }
    clear_has_Metadata();
  }
}
inline ::gateway_protocol::DecisionMetadata* Deployment::release_decision() {
  // @@protoc_insertion_point(field_release:gateway_protocol.Deployment.decision)
  if (_internal_has_decision()) {
    clear_has_Metadata();
    ::gateway_protocol::DecisionMetadata* temp = _impl_.Metadata_.decision_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Metadata_.decision_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gateway_protocol::DecisionMetadata& Deployment::_internal_decision() const {
  return _internal_has_decision()
      ? *_impl_.Metadata_.decision_
      : reinterpret_cast< ::gateway_protocol::DecisionMetadata&>(::gateway_protocol::_DecisionMetadata_default_instance_);
}
inline const ::gateway_protocol::DecisionMetadata& Deployment::decision() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.Deployment.decision)
  return _internal_decision();
}
inline ::gateway_protocol::DecisionMetadata* Deployment::unsafe_arena_release_decision() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gateway_protocol.Deployment.decision)
  if (_internal_has_decision()) {
    clear_has_Metadata();
    ::gateway_protocol::DecisionMetadata* temp = _impl_.Metadata_.decision_;
    _impl_.Metadata_.decision_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Deployment::unsafe_arena_set_allocated_decision(::gateway_protocol::DecisionMetadata* decision) {
  clear_Metadata();
  if (decision) {
    set_has_decision();
    _impl_.Metadata_.decision_ = decision;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gateway_protocol.Deployment.decision)
}
inline ::gateway_protocol::DecisionMetadata* Deployment::_internal_mutable_decision() {
  if (!_internal_has_decision()) {
    clear_Metadata();
    set_has_decision();
    _impl_.Metadata_.decision_ = CreateMaybeMessage< ::gateway_protocol::DecisionMetadata >(GetArenaForAllocation());
  }
  return _impl_.Metadata_.decision_;
}
inline ::gateway_protocol::DecisionMetadata* Deployment::mutable_decision() {
  ::gateway_protocol::DecisionMetadata* _msg = _internal_mutable_decision();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.Deployment.decision)
  return _msg;
}

// .gateway_protocol.DecisionRequirementsMetadata decisionRequirements = 3;
inline bool Deployment::_internal_has_decisionrequirements() const {
  return Metadata_case() == kDecisionRequirements;
}
inline bool Deployment::has_decisionrequirements() const {
  return _internal_has_decisionrequirements();
}
inline void Deployment::set_has_decisionrequirements() {
  _impl_._oneof_case_[0] = kDecisionRequirements;
}
inline void Deployment::clear_decisionrequirements() {
  if (_internal_has_decisionrequirements()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Metadata_.decisionrequirements_;
    }
    clear_has_Metadata();
  }
}
inline ::gateway_protocol::DecisionRequirementsMetadata* Deployment::release_decisionrequirements() {
  // @@protoc_insertion_point(field_release:gateway_protocol.Deployment.decisionRequirements)
  if (_internal_has_decisionrequirements()) {
    clear_has_Metadata();
    ::gateway_protocol::DecisionRequirementsMetadata* temp = _impl_.Metadata_.decisionrequirements_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Metadata_.decisionrequirements_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gateway_protocol::DecisionRequirementsMetadata& Deployment::_internal_decisionrequirements() const {
  return _internal_has_decisionrequirements()
      ? *_impl_.Metadata_.decisionrequirements_
      : reinterpret_cast< ::gateway_protocol::DecisionRequirementsMetadata&>(::gateway_protocol::_DecisionRequirementsMetadata_default_instance_);
}
inline const ::gateway_protocol::DecisionRequirementsMetadata& Deployment::decisionrequirements() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.Deployment.decisionRequirements)
  return _internal_decisionrequirements();
}
inline ::gateway_protocol::DecisionRequirementsMetadata* Deployment::unsafe_arena_release_decisionrequirements() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gateway_protocol.Deployment.decisionRequirements)
  if (_internal_has_decisionrequirements()) {
    clear_has_Metadata();
    ::gateway_protocol::DecisionRequirementsMetadata* temp = _impl_.Metadata_.decisionrequirements_;
    _impl_.Metadata_.decisionrequirements_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Deployment::unsafe_arena_set_allocated_decisionrequirements(::gateway_protocol::DecisionRequirementsMetadata* decisionrequirements) {
  clear_Metadata();
  if (decisionrequirements) {
    set_has_decisionrequirements();
    _impl_.Metadata_.decisionrequirements_ = decisionrequirements;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gateway_protocol.Deployment.decisionRequirements)
}
inline ::gateway_protocol::DecisionRequirementsMetadata* Deployment::_internal_mutable_decisionrequirements() {
  if (!_internal_has_decisionrequirements()) {
    clear_Metadata();
    set_has_decisionrequirements();
    _impl_.Metadata_.decisionrequirements_ = CreateMaybeMessage< ::gateway_protocol::DecisionRequirementsMetadata >(GetArenaForAllocation());
  }
  return _impl_.Metadata_.decisionrequirements_;
}
inline ::gateway_protocol::DecisionRequirementsMetadata* Deployment::mutable_decisionrequirements() {
  ::gateway_protocol::DecisionRequirementsMetadata* _msg = _internal_mutable_decisionrequirements();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.Deployment.decisionRequirements)
  return _msg;
}

inline bool Deployment::has_Metadata() const {
  return Metadata_case() != METADATA_NOT_SET;
}
inline void Deployment::clear_has_Metadata() {
  _impl_._oneof_case_[0] = METADATA_NOT_SET;
}
inline Deployment::MetadataCase Deployment::Metadata_case() const {
  return Deployment::MetadataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcessMetadata

// string bpmnProcessId = 1;
inline void ProcessMetadata::clear_bpmnprocessid() {
  _impl_.bpmnprocessid_.ClearToEmpty();
}
inline const std::string& ProcessMetadata::bpmnprocessid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ProcessMetadata.bpmnProcessId)
  return _internal_bpmnprocessid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessMetadata::set_bpmnprocessid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bpmnprocessid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ProcessMetadata.bpmnProcessId)
}
inline std::string* ProcessMetadata::mutable_bpmnprocessid() {
  std::string* _s = _internal_mutable_bpmnprocessid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ProcessMetadata.bpmnProcessId)
  return _s;
}
inline const std::string& ProcessMetadata::_internal_bpmnprocessid() const {
  return _impl_.bpmnprocessid_.Get();
}
inline void ProcessMetadata::_internal_set_bpmnprocessid(const std::string& value) {
  
  _impl_.bpmnprocessid_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessMetadata::_internal_mutable_bpmnprocessid() {
  
  return _impl_.bpmnprocessid_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessMetadata::release_bpmnprocessid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ProcessMetadata.bpmnProcessId)
  return _impl_.bpmnprocessid_.Release();
}
inline void ProcessMetadata::set_allocated_bpmnprocessid(std::string* bpmnprocessid) {
  if (bpmnprocessid != nullptr) {
    
  } else {
    
  }
  _impl_.bpmnprocessid_.SetAllocated(bpmnprocessid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bpmnprocessid_.IsDefault()) {
    _impl_.bpmnprocessid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ProcessMetadata.bpmnProcessId)
}

// int32 version = 2;
inline void ProcessMetadata::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t ProcessMetadata::_internal_version() const {
  return _impl_.version_;
}
inline int32_t ProcessMetadata::version() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ProcessMetadata.version)
  return _internal_version();
}
inline void ProcessMetadata::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void ProcessMetadata::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ProcessMetadata.version)
}

// int64 processDefinitionKey = 3;
inline void ProcessMetadata::clear_processdefinitionkey() {
  _impl_.processdefinitionkey_ = int64_t{0};
}
inline int64_t ProcessMetadata::_internal_processdefinitionkey() const {
  return _impl_.processdefinitionkey_;
}
inline int64_t ProcessMetadata::processdefinitionkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ProcessMetadata.processDefinitionKey)
  return _internal_processdefinitionkey();
}
inline void ProcessMetadata::_internal_set_processdefinitionkey(int64_t value) {
  
  _impl_.processdefinitionkey_ = value;
}
inline void ProcessMetadata::set_processdefinitionkey(int64_t value) {
  _internal_set_processdefinitionkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ProcessMetadata.processDefinitionKey)
}

// string resourceName = 4;
inline void ProcessMetadata::clear_resourcename() {
  _impl_.resourcename_.ClearToEmpty();
}
inline const std::string& ProcessMetadata::resourcename() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ProcessMetadata.resourceName)
  return _internal_resourcename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessMetadata::set_resourcename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resourcename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ProcessMetadata.resourceName)
}
inline std::string* ProcessMetadata::mutable_resourcename() {
  std::string* _s = _internal_mutable_resourcename();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ProcessMetadata.resourceName)
  return _s;
}
inline const std::string& ProcessMetadata::_internal_resourcename() const {
  return _impl_.resourcename_.Get();
}
inline void ProcessMetadata::_internal_set_resourcename(const std::string& value) {
  
  _impl_.resourcename_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessMetadata::_internal_mutable_resourcename() {
  
  return _impl_.resourcename_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessMetadata::release_resourcename() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ProcessMetadata.resourceName)
  return _impl_.resourcename_.Release();
}
inline void ProcessMetadata::set_allocated_resourcename(std::string* resourcename) {
  if (resourcename != nullptr) {
    
  } else {
    
  }
  _impl_.resourcename_.SetAllocated(resourcename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resourcename_.IsDefault()) {
    _impl_.resourcename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ProcessMetadata.resourceName)
}

// -------------------------------------------------------------------

// DecisionMetadata

// string dmnDecisionId = 1;
inline void DecisionMetadata::clear_dmndecisionid() {
  _impl_.dmndecisionid_.ClearToEmpty();
}
inline const std::string& DecisionMetadata::dmndecisionid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionMetadata.dmnDecisionId)
  return _internal_dmndecisionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecisionMetadata::set_dmndecisionid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dmndecisionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionMetadata.dmnDecisionId)
}
inline std::string* DecisionMetadata::mutable_dmndecisionid() {
  std::string* _s = _internal_mutable_dmndecisionid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DecisionMetadata.dmnDecisionId)
  return _s;
}
inline const std::string& DecisionMetadata::_internal_dmndecisionid() const {
  return _impl_.dmndecisionid_.Get();
}
inline void DecisionMetadata::_internal_set_dmndecisionid(const std::string& value) {
  
  _impl_.dmndecisionid_.Set(value, GetArenaForAllocation());
}
inline std::string* DecisionMetadata::_internal_mutable_dmndecisionid() {
  
  return _impl_.dmndecisionid_.Mutable(GetArenaForAllocation());
}
inline std::string* DecisionMetadata::release_dmndecisionid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.DecisionMetadata.dmnDecisionId)
  return _impl_.dmndecisionid_.Release();
}
inline void DecisionMetadata::set_allocated_dmndecisionid(std::string* dmndecisionid) {
  if (dmndecisionid != nullptr) {
    
  } else {
    
  }
  _impl_.dmndecisionid_.SetAllocated(dmndecisionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dmndecisionid_.IsDefault()) {
    _impl_.dmndecisionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.DecisionMetadata.dmnDecisionId)
}

// string dmnDecisionName = 2;
inline void DecisionMetadata::clear_dmndecisionname() {
  _impl_.dmndecisionname_.ClearToEmpty();
}
inline const std::string& DecisionMetadata::dmndecisionname() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionMetadata.dmnDecisionName)
  return _internal_dmndecisionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecisionMetadata::set_dmndecisionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dmndecisionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionMetadata.dmnDecisionName)
}
inline std::string* DecisionMetadata::mutable_dmndecisionname() {
  std::string* _s = _internal_mutable_dmndecisionname();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DecisionMetadata.dmnDecisionName)
  return _s;
}
inline const std::string& DecisionMetadata::_internal_dmndecisionname() const {
  return _impl_.dmndecisionname_.Get();
}
inline void DecisionMetadata::_internal_set_dmndecisionname(const std::string& value) {
  
  _impl_.dmndecisionname_.Set(value, GetArenaForAllocation());
}
inline std::string* DecisionMetadata::_internal_mutable_dmndecisionname() {
  
  return _impl_.dmndecisionname_.Mutable(GetArenaForAllocation());
}
inline std::string* DecisionMetadata::release_dmndecisionname() {
  // @@protoc_insertion_point(field_release:gateway_protocol.DecisionMetadata.dmnDecisionName)
  return _impl_.dmndecisionname_.Release();
}
inline void DecisionMetadata::set_allocated_dmndecisionname(std::string* dmndecisionname) {
  if (dmndecisionname != nullptr) {
    
  } else {
    
  }
  _impl_.dmndecisionname_.SetAllocated(dmndecisionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dmndecisionname_.IsDefault()) {
    _impl_.dmndecisionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.DecisionMetadata.dmnDecisionName)
}

// int32 version = 3;
inline void DecisionMetadata::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t DecisionMetadata::_internal_version() const {
  return _impl_.version_;
}
inline int32_t DecisionMetadata::version() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionMetadata.version)
  return _internal_version();
}
inline void DecisionMetadata::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void DecisionMetadata::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionMetadata.version)
}

// int64 decisionKey = 4;
inline void DecisionMetadata::clear_decisionkey() {
  _impl_.decisionkey_ = int64_t{0};
}
inline int64_t DecisionMetadata::_internal_decisionkey() const {
  return _impl_.decisionkey_;
}
inline int64_t DecisionMetadata::decisionkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionMetadata.decisionKey)
  return _internal_decisionkey();
}
inline void DecisionMetadata::_internal_set_decisionkey(int64_t value) {
  
  _impl_.decisionkey_ = value;
}
inline void DecisionMetadata::set_decisionkey(int64_t value) {
  _internal_set_decisionkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionMetadata.decisionKey)
}

// string dmnDecisionRequirementsId = 5;
inline void DecisionMetadata::clear_dmndecisionrequirementsid() {
  _impl_.dmndecisionrequirementsid_.ClearToEmpty();
}
inline const std::string& DecisionMetadata::dmndecisionrequirementsid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionMetadata.dmnDecisionRequirementsId)
  return _internal_dmndecisionrequirementsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecisionMetadata::set_dmndecisionrequirementsid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dmndecisionrequirementsid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionMetadata.dmnDecisionRequirementsId)
}
inline std::string* DecisionMetadata::mutable_dmndecisionrequirementsid() {
  std::string* _s = _internal_mutable_dmndecisionrequirementsid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DecisionMetadata.dmnDecisionRequirementsId)
  return _s;
}
inline const std::string& DecisionMetadata::_internal_dmndecisionrequirementsid() const {
  return _impl_.dmndecisionrequirementsid_.Get();
}
inline void DecisionMetadata::_internal_set_dmndecisionrequirementsid(const std::string& value) {
  
  _impl_.dmndecisionrequirementsid_.Set(value, GetArenaForAllocation());
}
inline std::string* DecisionMetadata::_internal_mutable_dmndecisionrequirementsid() {
  
  return _impl_.dmndecisionrequirementsid_.Mutable(GetArenaForAllocation());
}
inline std::string* DecisionMetadata::release_dmndecisionrequirementsid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.DecisionMetadata.dmnDecisionRequirementsId)
  return _impl_.dmndecisionrequirementsid_.Release();
}
inline void DecisionMetadata::set_allocated_dmndecisionrequirementsid(std::string* dmndecisionrequirementsid) {
  if (dmndecisionrequirementsid != nullptr) {
    
  } else {
    
  }
  _impl_.dmndecisionrequirementsid_.SetAllocated(dmndecisionrequirementsid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dmndecisionrequirementsid_.IsDefault()) {
    _impl_.dmndecisionrequirementsid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.DecisionMetadata.dmnDecisionRequirementsId)
}

// int64 decisionRequirementsKey = 6;
inline void DecisionMetadata::clear_decisionrequirementskey() {
  _impl_.decisionrequirementskey_ = int64_t{0};
}
inline int64_t DecisionMetadata::_internal_decisionrequirementskey() const {
  return _impl_.decisionrequirementskey_;
}
inline int64_t DecisionMetadata::decisionrequirementskey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionMetadata.decisionRequirementsKey)
  return _internal_decisionrequirementskey();
}
inline void DecisionMetadata::_internal_set_decisionrequirementskey(int64_t value) {
  
  _impl_.decisionrequirementskey_ = value;
}
inline void DecisionMetadata::set_decisionrequirementskey(int64_t value) {
  _internal_set_decisionrequirementskey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionMetadata.decisionRequirementsKey)
}

// -------------------------------------------------------------------

// DecisionRequirementsMetadata

// string dmnDecisionRequirementsId = 1;
inline void DecisionRequirementsMetadata::clear_dmndecisionrequirementsid() {
  _impl_.dmndecisionrequirementsid_.ClearToEmpty();
}
inline const std::string& DecisionRequirementsMetadata::dmndecisionrequirementsid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsId)
  return _internal_dmndecisionrequirementsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecisionRequirementsMetadata::set_dmndecisionrequirementsid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dmndecisionrequirementsid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsId)
}
inline std::string* DecisionRequirementsMetadata::mutable_dmndecisionrequirementsid() {
  std::string* _s = _internal_mutable_dmndecisionrequirementsid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsId)
  return _s;
}
inline const std::string& DecisionRequirementsMetadata::_internal_dmndecisionrequirementsid() const {
  return _impl_.dmndecisionrequirementsid_.Get();
}
inline void DecisionRequirementsMetadata::_internal_set_dmndecisionrequirementsid(const std::string& value) {
  
  _impl_.dmndecisionrequirementsid_.Set(value, GetArenaForAllocation());
}
inline std::string* DecisionRequirementsMetadata::_internal_mutable_dmndecisionrequirementsid() {
  
  return _impl_.dmndecisionrequirementsid_.Mutable(GetArenaForAllocation());
}
inline std::string* DecisionRequirementsMetadata::release_dmndecisionrequirementsid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsId)
  return _impl_.dmndecisionrequirementsid_.Release();
}
inline void DecisionRequirementsMetadata::set_allocated_dmndecisionrequirementsid(std::string* dmndecisionrequirementsid) {
  if (dmndecisionrequirementsid != nullptr) {
    
  } else {
    
  }
  _impl_.dmndecisionrequirementsid_.SetAllocated(dmndecisionrequirementsid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dmndecisionrequirementsid_.IsDefault()) {
    _impl_.dmndecisionrequirementsid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsId)
}

// string dmnDecisionRequirementsName = 2;
inline void DecisionRequirementsMetadata::clear_dmndecisionrequirementsname() {
  _impl_.dmndecisionrequirementsname_.ClearToEmpty();
}
inline const std::string& DecisionRequirementsMetadata::dmndecisionrequirementsname() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsName)
  return _internal_dmndecisionrequirementsname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecisionRequirementsMetadata::set_dmndecisionrequirementsname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dmndecisionrequirementsname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsName)
}
inline std::string* DecisionRequirementsMetadata::mutable_dmndecisionrequirementsname() {
  std::string* _s = _internal_mutable_dmndecisionrequirementsname();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsName)
  return _s;
}
inline const std::string& DecisionRequirementsMetadata::_internal_dmndecisionrequirementsname() const {
  return _impl_.dmndecisionrequirementsname_.Get();
}
inline void DecisionRequirementsMetadata::_internal_set_dmndecisionrequirementsname(const std::string& value) {
  
  _impl_.dmndecisionrequirementsname_.Set(value, GetArenaForAllocation());
}
inline std::string* DecisionRequirementsMetadata::_internal_mutable_dmndecisionrequirementsname() {
  
  return _impl_.dmndecisionrequirementsname_.Mutable(GetArenaForAllocation());
}
inline std::string* DecisionRequirementsMetadata::release_dmndecisionrequirementsname() {
  // @@protoc_insertion_point(field_release:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsName)
  return _impl_.dmndecisionrequirementsname_.Release();
}
inline void DecisionRequirementsMetadata::set_allocated_dmndecisionrequirementsname(std::string* dmndecisionrequirementsname) {
  if (dmndecisionrequirementsname != nullptr) {
    
  } else {
    
  }
  _impl_.dmndecisionrequirementsname_.SetAllocated(dmndecisionrequirementsname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dmndecisionrequirementsname_.IsDefault()) {
    _impl_.dmndecisionrequirementsname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.DecisionRequirementsMetadata.dmnDecisionRequirementsName)
}

// int32 version = 3;
inline void DecisionRequirementsMetadata::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t DecisionRequirementsMetadata::_internal_version() const {
  return _impl_.version_;
}
inline int32_t DecisionRequirementsMetadata::version() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionRequirementsMetadata.version)
  return _internal_version();
}
inline void DecisionRequirementsMetadata::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void DecisionRequirementsMetadata::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionRequirementsMetadata.version)
}

// int64 decisionRequirementsKey = 4;
inline void DecisionRequirementsMetadata::clear_decisionrequirementskey() {
  _impl_.decisionrequirementskey_ = int64_t{0};
}
inline int64_t DecisionRequirementsMetadata::_internal_decisionrequirementskey() const {
  return _impl_.decisionrequirementskey_;
}
inline int64_t DecisionRequirementsMetadata::decisionrequirementskey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionRequirementsMetadata.decisionRequirementsKey)
  return _internal_decisionrequirementskey();
}
inline void DecisionRequirementsMetadata::_internal_set_decisionrequirementskey(int64_t value) {
  
  _impl_.decisionrequirementskey_ = value;
}
inline void DecisionRequirementsMetadata::set_decisionrequirementskey(int64_t value) {
  _internal_set_decisionrequirementskey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionRequirementsMetadata.decisionRequirementsKey)
}

// string resourceName = 5;
inline void DecisionRequirementsMetadata::clear_resourcename() {
  _impl_.resourcename_.ClearToEmpty();
}
inline const std::string& DecisionRequirementsMetadata::resourcename() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.DecisionRequirementsMetadata.resourceName)
  return _internal_resourcename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecisionRequirementsMetadata::set_resourcename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resourcename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.DecisionRequirementsMetadata.resourceName)
}
inline std::string* DecisionRequirementsMetadata::mutable_resourcename() {
  std::string* _s = _internal_mutable_resourcename();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.DecisionRequirementsMetadata.resourceName)
  return _s;
}
inline const std::string& DecisionRequirementsMetadata::_internal_resourcename() const {
  return _impl_.resourcename_.Get();
}
inline void DecisionRequirementsMetadata::_internal_set_resourcename(const std::string& value) {
  
  _impl_.resourcename_.Set(value, GetArenaForAllocation());
}
inline std::string* DecisionRequirementsMetadata::_internal_mutable_resourcename() {
  
  return _impl_.resourcename_.Mutable(GetArenaForAllocation());
}
inline std::string* DecisionRequirementsMetadata::release_resourcename() {
  // @@protoc_insertion_point(field_release:gateway_protocol.DecisionRequirementsMetadata.resourceName)
  return _impl_.resourcename_.Release();
}
inline void DecisionRequirementsMetadata::set_allocated_resourcename(std::string* resourcename) {
  if (resourcename != nullptr) {
    
  } else {
    
  }
  _impl_.resourcename_.SetAllocated(resourcename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resourcename_.IsDefault()) {
    _impl_.resourcename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.DecisionRequirementsMetadata.resourceName)
}

// -------------------------------------------------------------------

// FailJobRequest

// int64 jobKey = 1;
inline void FailJobRequest::clear_jobkey() {
  _impl_.jobkey_ = int64_t{0};
}
inline int64_t FailJobRequest::_internal_jobkey() const {
  return _impl_.jobkey_;
}
inline int64_t FailJobRequest::jobkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.FailJobRequest.jobKey)
  return _internal_jobkey();
}
inline void FailJobRequest::_internal_set_jobkey(int64_t value) {
  
  _impl_.jobkey_ = value;
}
inline void FailJobRequest::set_jobkey(int64_t value) {
  _internal_set_jobkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.FailJobRequest.jobKey)
}

// int32 retries = 2;
inline void FailJobRequest::clear_retries() {
  _impl_.retries_ = 0;
}
inline int32_t FailJobRequest::_internal_retries() const {
  return _impl_.retries_;
}
inline int32_t FailJobRequest::retries() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.FailJobRequest.retries)
  return _internal_retries();
}
inline void FailJobRequest::_internal_set_retries(int32_t value) {
  
  _impl_.retries_ = value;
}
inline void FailJobRequest::set_retries(int32_t value) {
  _internal_set_retries(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.FailJobRequest.retries)
}

// string errorMessage = 3;
inline void FailJobRequest::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& FailJobRequest::errormessage() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.FailJobRequest.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FailJobRequest::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.FailJobRequest.errorMessage)
}
inline std::string* FailJobRequest::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.FailJobRequest.errorMessage)
  return _s;
}
inline const std::string& FailJobRequest::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void FailJobRequest::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* FailJobRequest::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* FailJobRequest::release_errormessage() {
  // @@protoc_insertion_point(field_release:gateway_protocol.FailJobRequest.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void FailJobRequest::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.FailJobRequest.errorMessage)
}

// int64 retryBackOff = 4;
inline void FailJobRequest::clear_retrybackoff() {
  _impl_.retrybackoff_ = int64_t{0};
}
inline int64_t FailJobRequest::_internal_retrybackoff() const {
  return _impl_.retrybackoff_;
}
inline int64_t FailJobRequest::retrybackoff() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.FailJobRequest.retryBackOff)
  return _internal_retrybackoff();
}
inline void FailJobRequest::_internal_set_retrybackoff(int64_t value) {
  
  _impl_.retrybackoff_ = value;
}
inline void FailJobRequest::set_retrybackoff(int64_t value) {
  _internal_set_retrybackoff(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.FailJobRequest.retryBackOff)
}

// -------------------------------------------------------------------

// FailJobResponse

// -------------------------------------------------------------------

// ThrowErrorRequest

// int64 jobKey = 1;
inline void ThrowErrorRequest::clear_jobkey() {
  _impl_.jobkey_ = int64_t{0};
}
inline int64_t ThrowErrorRequest::_internal_jobkey() const {
  return _impl_.jobkey_;
}
inline int64_t ThrowErrorRequest::jobkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ThrowErrorRequest.jobKey)
  return _internal_jobkey();
}
inline void ThrowErrorRequest::_internal_set_jobkey(int64_t value) {
  
  _impl_.jobkey_ = value;
}
inline void ThrowErrorRequest::set_jobkey(int64_t value) {
  _internal_set_jobkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ThrowErrorRequest.jobKey)
}

// string errorCode = 2;
inline void ThrowErrorRequest::clear_errorcode() {
  _impl_.errorcode_.ClearToEmpty();
}
inline const std::string& ThrowErrorRequest::errorcode() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ThrowErrorRequest.errorCode)
  return _internal_errorcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThrowErrorRequest::set_errorcode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errorcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ThrowErrorRequest.errorCode)
}
inline std::string* ThrowErrorRequest::mutable_errorcode() {
  std::string* _s = _internal_mutable_errorcode();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ThrowErrorRequest.errorCode)
  return _s;
}
inline const std::string& ThrowErrorRequest::_internal_errorcode() const {
  return _impl_.errorcode_.Get();
}
inline void ThrowErrorRequest::_internal_set_errorcode(const std::string& value) {
  
  _impl_.errorcode_.Set(value, GetArenaForAllocation());
}
inline std::string* ThrowErrorRequest::_internal_mutable_errorcode() {
  
  return _impl_.errorcode_.Mutable(GetArenaForAllocation());
}
inline std::string* ThrowErrorRequest::release_errorcode() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ThrowErrorRequest.errorCode)
  return _impl_.errorcode_.Release();
}
inline void ThrowErrorRequest::set_allocated_errorcode(std::string* errorcode) {
  if (errorcode != nullptr) {
    
  } else {
    
  }
  _impl_.errorcode_.SetAllocated(errorcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errorcode_.IsDefault()) {
    _impl_.errorcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ThrowErrorRequest.errorCode)
}

// string errorMessage = 3;
inline void ThrowErrorRequest::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& ThrowErrorRequest::errormessage() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ThrowErrorRequest.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThrowErrorRequest::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ThrowErrorRequest.errorMessage)
}
inline std::string* ThrowErrorRequest::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ThrowErrorRequest.errorMessage)
  return _s;
}
inline const std::string& ThrowErrorRequest::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void ThrowErrorRequest::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* ThrowErrorRequest::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* ThrowErrorRequest::release_errormessage() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ThrowErrorRequest.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void ThrowErrorRequest::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ThrowErrorRequest.errorMessage)
}

// -------------------------------------------------------------------

// ThrowErrorResponse

// -------------------------------------------------------------------

// PublishMessageRequest

// string name = 1;
inline void PublishMessageRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PublishMessageRequest::name() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.PublishMessageRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishMessageRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.PublishMessageRequest.name)
}
inline std::string* PublishMessageRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.PublishMessageRequest.name)
  return _s;
}
inline const std::string& PublishMessageRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PublishMessageRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishMessageRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishMessageRequest::release_name() {
  // @@protoc_insertion_point(field_release:gateway_protocol.PublishMessageRequest.name)
  return _impl_.name_.Release();
}
inline void PublishMessageRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.PublishMessageRequest.name)
}

// string correlationKey = 2;
inline void PublishMessageRequest::clear_correlationkey() {
  _impl_.correlationkey_.ClearToEmpty();
}
inline const std::string& PublishMessageRequest::correlationkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.PublishMessageRequest.correlationKey)
  return _internal_correlationkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishMessageRequest::set_correlationkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.correlationkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.PublishMessageRequest.correlationKey)
}
inline std::string* PublishMessageRequest::mutable_correlationkey() {
  std::string* _s = _internal_mutable_correlationkey();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.PublishMessageRequest.correlationKey)
  return _s;
}
inline const std::string& PublishMessageRequest::_internal_correlationkey() const {
  return _impl_.correlationkey_.Get();
}
inline void PublishMessageRequest::_internal_set_correlationkey(const std::string& value) {
  
  _impl_.correlationkey_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishMessageRequest::_internal_mutable_correlationkey() {
  
  return _impl_.correlationkey_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishMessageRequest::release_correlationkey() {
  // @@protoc_insertion_point(field_release:gateway_protocol.PublishMessageRequest.correlationKey)
  return _impl_.correlationkey_.Release();
}
inline void PublishMessageRequest::set_allocated_correlationkey(std::string* correlationkey) {
  if (correlationkey != nullptr) {
    
  } else {
    
  }
  _impl_.correlationkey_.SetAllocated(correlationkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.correlationkey_.IsDefault()) {
    _impl_.correlationkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.PublishMessageRequest.correlationKey)
}

// int64 timeToLive = 3;
inline void PublishMessageRequest::clear_timetolive() {
  _impl_.timetolive_ = int64_t{0};
}
inline int64_t PublishMessageRequest::_internal_timetolive() const {
  return _impl_.timetolive_;
}
inline int64_t PublishMessageRequest::timetolive() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.PublishMessageRequest.timeToLive)
  return _internal_timetolive();
}
inline void PublishMessageRequest::_internal_set_timetolive(int64_t value) {
  
  _impl_.timetolive_ = value;
}
inline void PublishMessageRequest::set_timetolive(int64_t value) {
  _internal_set_timetolive(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.PublishMessageRequest.timeToLive)
}

// string messageId = 4;
inline void PublishMessageRequest::clear_messageid() {
  _impl_.messageid_.ClearToEmpty();
}
inline const std::string& PublishMessageRequest::messageid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.PublishMessageRequest.messageId)
  return _internal_messageid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishMessageRequest::set_messageid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.messageid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.PublishMessageRequest.messageId)
}
inline std::string* PublishMessageRequest::mutable_messageid() {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.PublishMessageRequest.messageId)
  return _s;
}
inline const std::string& PublishMessageRequest::_internal_messageid() const {
  return _impl_.messageid_.Get();
}
inline void PublishMessageRequest::_internal_set_messageid(const std::string& value) {
  
  _impl_.messageid_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishMessageRequest::_internal_mutable_messageid() {
  
  return _impl_.messageid_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishMessageRequest::release_messageid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.PublishMessageRequest.messageId)
  return _impl_.messageid_.Release();
}
inline void PublishMessageRequest::set_allocated_messageid(std::string* messageid) {
  if (messageid != nullptr) {
    
  } else {
    
  }
  _impl_.messageid_.SetAllocated(messageid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.messageid_.IsDefault()) {
    _impl_.messageid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.PublishMessageRequest.messageId)
}

// string variables = 5;
inline void PublishMessageRequest::clear_variables() {
  _impl_.variables_.ClearToEmpty();
}
inline const std::string& PublishMessageRequest::variables() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.PublishMessageRequest.variables)
  return _internal_variables();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishMessageRequest::set_variables(ArgT0&& arg0, ArgT... args) {
 
 _impl_.variables_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.PublishMessageRequest.variables)
}
inline std::string* PublishMessageRequest::mutable_variables() {
  std::string* _s = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.PublishMessageRequest.variables)
  return _s;
}
inline const std::string& PublishMessageRequest::_internal_variables() const {
  return _impl_.variables_.Get();
}
inline void PublishMessageRequest::_internal_set_variables(const std::string& value) {
  
  _impl_.variables_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishMessageRequest::_internal_mutable_variables() {
  
  return _impl_.variables_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishMessageRequest::release_variables() {
  // @@protoc_insertion_point(field_release:gateway_protocol.PublishMessageRequest.variables)
  return _impl_.variables_.Release();
}
inline void PublishMessageRequest::set_allocated_variables(std::string* variables) {
  if (variables != nullptr) {
    
  } else {
    
  }
  _impl_.variables_.SetAllocated(variables, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.variables_.IsDefault()) {
    _impl_.variables_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.PublishMessageRequest.variables)
}

// -------------------------------------------------------------------

// PublishMessageResponse

// int64 key = 1;
inline void PublishMessageResponse::clear_key() {
  _impl_.key_ = int64_t{0};
}
inline int64_t PublishMessageResponse::_internal_key() const {
  return _impl_.key_;
}
inline int64_t PublishMessageResponse::key() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.PublishMessageResponse.key)
  return _internal_key();
}
inline void PublishMessageResponse::_internal_set_key(int64_t value) {
  
  _impl_.key_ = value;
}
inline void PublishMessageResponse::set_key(int64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.PublishMessageResponse.key)
}

// -------------------------------------------------------------------

// ResolveIncidentRequest

// int64 incidentKey = 1;
inline void ResolveIncidentRequest::clear_incidentkey() {
  _impl_.incidentkey_ = int64_t{0};
}
inline int64_t ResolveIncidentRequest::_internal_incidentkey() const {
  return _impl_.incidentkey_;
}
inline int64_t ResolveIncidentRequest::incidentkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ResolveIncidentRequest.incidentKey)
  return _internal_incidentkey();
}
inline void ResolveIncidentRequest::_internal_set_incidentkey(int64_t value) {
  
  _impl_.incidentkey_ = value;
}
inline void ResolveIncidentRequest::set_incidentkey(int64_t value) {
  _internal_set_incidentkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ResolveIncidentRequest.incidentKey)
}

// -------------------------------------------------------------------

// ResolveIncidentResponse

// -------------------------------------------------------------------

// TopologyRequest

// -------------------------------------------------------------------

// TopologyResponse

// repeated .gateway_protocol.BrokerInfo brokers = 1;
inline int TopologyResponse::_internal_brokers_size() const {
  return _impl_.brokers_.size();
}
inline int TopologyResponse::brokers_size() const {
  return _internal_brokers_size();
}
inline void TopologyResponse::clear_brokers() {
  _impl_.brokers_.Clear();
}
inline ::gateway_protocol::BrokerInfo* TopologyResponse::mutable_brokers(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.TopologyResponse.brokers)
  return _impl_.brokers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::BrokerInfo >*
TopologyResponse::mutable_brokers() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.TopologyResponse.brokers)
  return &_impl_.brokers_;
}
inline const ::gateway_protocol::BrokerInfo& TopologyResponse::_internal_brokers(int index) const {
  return _impl_.brokers_.Get(index);
}
inline const ::gateway_protocol::BrokerInfo& TopologyResponse::brokers(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.TopologyResponse.brokers)
  return _internal_brokers(index);
}
inline ::gateway_protocol::BrokerInfo* TopologyResponse::_internal_add_brokers() {
  return _impl_.brokers_.Add();
}
inline ::gateway_protocol::BrokerInfo* TopologyResponse::add_brokers() {
  ::gateway_protocol::BrokerInfo* _add = _internal_add_brokers();
  // @@protoc_insertion_point(field_add:gateway_protocol.TopologyResponse.brokers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::BrokerInfo >&
TopologyResponse::brokers() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.TopologyResponse.brokers)
  return _impl_.brokers_;
}

// int32 clusterSize = 2;
inline void TopologyResponse::clear_clustersize() {
  _impl_.clustersize_ = 0;
}
inline int32_t TopologyResponse::_internal_clustersize() const {
  return _impl_.clustersize_;
}
inline int32_t TopologyResponse::clustersize() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.TopologyResponse.clusterSize)
  return _internal_clustersize();
}
inline void TopologyResponse::_internal_set_clustersize(int32_t value) {
  
  _impl_.clustersize_ = value;
}
inline void TopologyResponse::set_clustersize(int32_t value) {
  _internal_set_clustersize(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.TopologyResponse.clusterSize)
}

// int32 partitionsCount = 3;
inline void TopologyResponse::clear_partitionscount() {
  _impl_.partitionscount_ = 0;
}
inline int32_t TopologyResponse::_internal_partitionscount() const {
  return _impl_.partitionscount_;
}
inline int32_t TopologyResponse::partitionscount() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.TopologyResponse.partitionsCount)
  return _internal_partitionscount();
}
inline void TopologyResponse::_internal_set_partitionscount(int32_t value) {
  
  _impl_.partitionscount_ = value;
}
inline void TopologyResponse::set_partitionscount(int32_t value) {
  _internal_set_partitionscount(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.TopologyResponse.partitionsCount)
}

// int32 replicationFactor = 4;
inline void TopologyResponse::clear_replicationfactor() {
  _impl_.replicationfactor_ = 0;
}
inline int32_t TopologyResponse::_internal_replicationfactor() const {
  return _impl_.replicationfactor_;
}
inline int32_t TopologyResponse::replicationfactor() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.TopologyResponse.replicationFactor)
  return _internal_replicationfactor();
}
inline void TopologyResponse::_internal_set_replicationfactor(int32_t value) {
  
  _impl_.replicationfactor_ = value;
}
inline void TopologyResponse::set_replicationfactor(int32_t value) {
  _internal_set_replicationfactor(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.TopologyResponse.replicationFactor)
}

// string gatewayVersion = 5;
inline void TopologyResponse::clear_gatewayversion() {
  _impl_.gatewayversion_.ClearToEmpty();
}
inline const std::string& TopologyResponse::gatewayversion() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.TopologyResponse.gatewayVersion)
  return _internal_gatewayversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopologyResponse::set_gatewayversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gatewayversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.TopologyResponse.gatewayVersion)
}
inline std::string* TopologyResponse::mutable_gatewayversion() {
  std::string* _s = _internal_mutable_gatewayversion();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.TopologyResponse.gatewayVersion)
  return _s;
}
inline const std::string& TopologyResponse::_internal_gatewayversion() const {
  return _impl_.gatewayversion_.Get();
}
inline void TopologyResponse::_internal_set_gatewayversion(const std::string& value) {
  
  _impl_.gatewayversion_.Set(value, GetArenaForAllocation());
}
inline std::string* TopologyResponse::_internal_mutable_gatewayversion() {
  
  return _impl_.gatewayversion_.Mutable(GetArenaForAllocation());
}
inline std::string* TopologyResponse::release_gatewayversion() {
  // @@protoc_insertion_point(field_release:gateway_protocol.TopologyResponse.gatewayVersion)
  return _impl_.gatewayversion_.Release();
}
inline void TopologyResponse::set_allocated_gatewayversion(std::string* gatewayversion) {
  if (gatewayversion != nullptr) {
    
  } else {
    
  }
  _impl_.gatewayversion_.SetAllocated(gatewayversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gatewayversion_.IsDefault()) {
    _impl_.gatewayversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.TopologyResponse.gatewayVersion)
}

// -------------------------------------------------------------------

// BrokerInfo

// int32 nodeId = 1;
inline void BrokerInfo::clear_nodeid() {
  _impl_.nodeid_ = 0;
}
inline int32_t BrokerInfo::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int32_t BrokerInfo::nodeid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.BrokerInfo.nodeId)
  return _internal_nodeid();
}
inline void BrokerInfo::_internal_set_nodeid(int32_t value) {
  
  _impl_.nodeid_ = value;
}
inline void BrokerInfo::set_nodeid(int32_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.BrokerInfo.nodeId)
}

// string host = 2;
inline void BrokerInfo::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& BrokerInfo::host() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.BrokerInfo.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerInfo::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.BrokerInfo.host)
}
inline std::string* BrokerInfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.BrokerInfo.host)
  return _s;
}
inline const std::string& BrokerInfo::_internal_host() const {
  return _impl_.host_.Get();
}
inline void BrokerInfo::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerInfo::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerInfo::release_host() {
  // @@protoc_insertion_point(field_release:gateway_protocol.BrokerInfo.host)
  return _impl_.host_.Release();
}
inline void BrokerInfo::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.BrokerInfo.host)
}

// int32 port = 3;
inline void BrokerInfo::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t BrokerInfo::_internal_port() const {
  return _impl_.port_;
}
inline int32_t BrokerInfo::port() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.BrokerInfo.port)
  return _internal_port();
}
inline void BrokerInfo::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void BrokerInfo::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.BrokerInfo.port)
}

// repeated .gateway_protocol.Partition partitions = 4;
inline int BrokerInfo::_internal_partitions_size() const {
  return _impl_.partitions_.size();
}
inline int BrokerInfo::partitions_size() const {
  return _internal_partitions_size();
}
inline void BrokerInfo::clear_partitions() {
  _impl_.partitions_.Clear();
}
inline ::gateway_protocol::Partition* BrokerInfo::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.BrokerInfo.partitions)
  return _impl_.partitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Partition >*
BrokerInfo::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.BrokerInfo.partitions)
  return &_impl_.partitions_;
}
inline const ::gateway_protocol::Partition& BrokerInfo::_internal_partitions(int index) const {
  return _impl_.partitions_.Get(index);
}
inline const ::gateway_protocol::Partition& BrokerInfo::partitions(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.BrokerInfo.partitions)
  return _internal_partitions(index);
}
inline ::gateway_protocol::Partition* BrokerInfo::_internal_add_partitions() {
  return _impl_.partitions_.Add();
}
inline ::gateway_protocol::Partition* BrokerInfo::add_partitions() {
  ::gateway_protocol::Partition* _add = _internal_add_partitions();
  // @@protoc_insertion_point(field_add:gateway_protocol.BrokerInfo.partitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::Partition >&
BrokerInfo::partitions() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.BrokerInfo.partitions)
  return _impl_.partitions_;
}

// string version = 5;
inline void BrokerInfo::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& BrokerInfo::version() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.BrokerInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.BrokerInfo.version)
}
inline std::string* BrokerInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.BrokerInfo.version)
  return _s;
}
inline const std::string& BrokerInfo::_internal_version() const {
  return _impl_.version_.Get();
}
inline void BrokerInfo::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* BrokerInfo::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* BrokerInfo::release_version() {
  // @@protoc_insertion_point(field_release:gateway_protocol.BrokerInfo.version)
  return _impl_.version_.Release();
}
inline void BrokerInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.BrokerInfo.version)
}

// -------------------------------------------------------------------

// Partition

// int32 partitionId = 1;
inline void Partition::clear_partitionid() {
  _impl_.partitionid_ = 0;
}
inline int32_t Partition::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int32_t Partition::partitionid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.Partition.partitionId)
  return _internal_partitionid();
}
inline void Partition::_internal_set_partitionid(int32_t value) {
  
  _impl_.partitionid_ = value;
}
inline void Partition::set_partitionid(int32_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.Partition.partitionId)
}

// .gateway_protocol.Partition.PartitionBrokerRole role = 2;
inline void Partition::clear_role() {
  _impl_.role_ = 0;
}
inline ::gateway_protocol::Partition_PartitionBrokerRole Partition::_internal_role() const {
  return static_cast< ::gateway_protocol::Partition_PartitionBrokerRole >(_impl_.role_);
}
inline ::gateway_protocol::Partition_PartitionBrokerRole Partition::role() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.Partition.role)
  return _internal_role();
}
inline void Partition::_internal_set_role(::gateway_protocol::Partition_PartitionBrokerRole value) {
  
  _impl_.role_ = value;
}
inline void Partition::set_role(::gateway_protocol::Partition_PartitionBrokerRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.Partition.role)
}

// .gateway_protocol.Partition.PartitionBrokerHealth health = 3;
inline void Partition::clear_health() {
  _impl_.health_ = 0;
}
inline ::gateway_protocol::Partition_PartitionBrokerHealth Partition::_internal_health() const {
  return static_cast< ::gateway_protocol::Partition_PartitionBrokerHealth >(_impl_.health_);
}
inline ::gateway_protocol::Partition_PartitionBrokerHealth Partition::health() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.Partition.health)
  return _internal_health();
}
inline void Partition::_internal_set_health(::gateway_protocol::Partition_PartitionBrokerHealth value) {
  
  _impl_.health_ = value;
}
inline void Partition::set_health(::gateway_protocol::Partition_PartitionBrokerHealth value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.Partition.health)
}

// -------------------------------------------------------------------

// UpdateJobRetriesRequest

// int64 jobKey = 1;
inline void UpdateJobRetriesRequest::clear_jobkey() {
  _impl_.jobkey_ = int64_t{0};
}
inline int64_t UpdateJobRetriesRequest::_internal_jobkey() const {
  return _impl_.jobkey_;
}
inline int64_t UpdateJobRetriesRequest::jobkey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.UpdateJobRetriesRequest.jobKey)
  return _internal_jobkey();
}
inline void UpdateJobRetriesRequest::_internal_set_jobkey(int64_t value) {
  
  _impl_.jobkey_ = value;
}
inline void UpdateJobRetriesRequest::set_jobkey(int64_t value) {
  _internal_set_jobkey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.UpdateJobRetriesRequest.jobKey)
}

// int32 retries = 2;
inline void UpdateJobRetriesRequest::clear_retries() {
  _impl_.retries_ = 0;
}
inline int32_t UpdateJobRetriesRequest::_internal_retries() const {
  return _impl_.retries_;
}
inline int32_t UpdateJobRetriesRequest::retries() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.UpdateJobRetriesRequest.retries)
  return _internal_retries();
}
inline void UpdateJobRetriesRequest::_internal_set_retries(int32_t value) {
  
  _impl_.retries_ = value;
}
inline void UpdateJobRetriesRequest::set_retries(int32_t value) {
  _internal_set_retries(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.UpdateJobRetriesRequest.retries)
}

// -------------------------------------------------------------------

// UpdateJobRetriesResponse

// -------------------------------------------------------------------

// SetVariablesRequest

// int64 elementInstanceKey = 1;
inline void SetVariablesRequest::clear_elementinstancekey() {
  _impl_.elementinstancekey_ = int64_t{0};
}
inline int64_t SetVariablesRequest::_internal_elementinstancekey() const {
  return _impl_.elementinstancekey_;
}
inline int64_t SetVariablesRequest::elementinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.SetVariablesRequest.elementInstanceKey)
  return _internal_elementinstancekey();
}
inline void SetVariablesRequest::_internal_set_elementinstancekey(int64_t value) {
  
  _impl_.elementinstancekey_ = value;
}
inline void SetVariablesRequest::set_elementinstancekey(int64_t value) {
  _internal_set_elementinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.SetVariablesRequest.elementInstanceKey)
}

// string variables = 2;
inline void SetVariablesRequest::clear_variables() {
  _impl_.variables_.ClearToEmpty();
}
inline const std::string& SetVariablesRequest::variables() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.SetVariablesRequest.variables)
  return _internal_variables();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetVariablesRequest::set_variables(ArgT0&& arg0, ArgT... args) {
 
 _impl_.variables_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.SetVariablesRequest.variables)
}
inline std::string* SetVariablesRequest::mutable_variables() {
  std::string* _s = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.SetVariablesRequest.variables)
  return _s;
}
inline const std::string& SetVariablesRequest::_internal_variables() const {
  return _impl_.variables_.Get();
}
inline void SetVariablesRequest::_internal_set_variables(const std::string& value) {
  
  _impl_.variables_.Set(value, GetArenaForAllocation());
}
inline std::string* SetVariablesRequest::_internal_mutable_variables() {
  
  return _impl_.variables_.Mutable(GetArenaForAllocation());
}
inline std::string* SetVariablesRequest::release_variables() {
  // @@protoc_insertion_point(field_release:gateway_protocol.SetVariablesRequest.variables)
  return _impl_.variables_.Release();
}
inline void SetVariablesRequest::set_allocated_variables(std::string* variables) {
  if (variables != nullptr) {
    
  } else {
    
  }
  _impl_.variables_.SetAllocated(variables, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.variables_.IsDefault()) {
    _impl_.variables_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.SetVariablesRequest.variables)
}

// bool local = 3;
inline void SetVariablesRequest::clear_local() {
  _impl_.local_ = false;
}
inline bool SetVariablesRequest::_internal_local() const {
  return _impl_.local_;
}
inline bool SetVariablesRequest::local() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.SetVariablesRequest.local)
  return _internal_local();
}
inline void SetVariablesRequest::_internal_set_local(bool value) {
  
  _impl_.local_ = value;
}
inline void SetVariablesRequest::set_local(bool value) {
  _internal_set_local(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.SetVariablesRequest.local)
}

// -------------------------------------------------------------------

// SetVariablesResponse

// int64 key = 1;
inline void SetVariablesResponse::clear_key() {
  _impl_.key_ = int64_t{0};
}
inline int64_t SetVariablesResponse::_internal_key() const {
  return _impl_.key_;
}
inline int64_t SetVariablesResponse::key() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.SetVariablesResponse.key)
  return _internal_key();
}
inline void SetVariablesResponse::_internal_set_key(int64_t value) {
  
  _impl_.key_ = value;
}
inline void SetVariablesResponse::set_key(int64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.SetVariablesResponse.key)
}

// -------------------------------------------------------------------

// ModifyProcessInstanceRequest_ActivateInstruction

// string elementId = 1;
inline void ModifyProcessInstanceRequest_ActivateInstruction::clear_elementid() {
  _impl_.elementid_.ClearToEmpty();
}
inline const std::string& ModifyProcessInstanceRequest_ActivateInstruction::elementid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.elementId)
  return _internal_elementid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModifyProcessInstanceRequest_ActivateInstruction::set_elementid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.elementid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.elementId)
}
inline std::string* ModifyProcessInstanceRequest_ActivateInstruction::mutable_elementid() {
  std::string* _s = _internal_mutable_elementid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.elementId)
  return _s;
}
inline const std::string& ModifyProcessInstanceRequest_ActivateInstruction::_internal_elementid() const {
  return _impl_.elementid_.Get();
}
inline void ModifyProcessInstanceRequest_ActivateInstruction::_internal_set_elementid(const std::string& value) {
  
  _impl_.elementid_.Set(value, GetArenaForAllocation());
}
inline std::string* ModifyProcessInstanceRequest_ActivateInstruction::_internal_mutable_elementid() {
  
  return _impl_.elementid_.Mutable(GetArenaForAllocation());
}
inline std::string* ModifyProcessInstanceRequest_ActivateInstruction::release_elementid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.elementId)
  return _impl_.elementid_.Release();
}
inline void ModifyProcessInstanceRequest_ActivateInstruction::set_allocated_elementid(std::string* elementid) {
  if (elementid != nullptr) {
    
  } else {
    
  }
  _impl_.elementid_.SetAllocated(elementid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.elementid_.IsDefault()) {
    _impl_.elementid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.elementId)
}

// int64 ancestorElementInstanceKey = 2;
inline void ModifyProcessInstanceRequest_ActivateInstruction::clear_ancestorelementinstancekey() {
  _impl_.ancestorelementinstancekey_ = int64_t{0};
}
inline int64_t ModifyProcessInstanceRequest_ActivateInstruction::_internal_ancestorelementinstancekey() const {
  return _impl_.ancestorelementinstancekey_;
}
inline int64_t ModifyProcessInstanceRequest_ActivateInstruction::ancestorelementinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.ancestorElementInstanceKey)
  return _internal_ancestorelementinstancekey();
}
inline void ModifyProcessInstanceRequest_ActivateInstruction::_internal_set_ancestorelementinstancekey(int64_t value) {
  
  _impl_.ancestorelementinstancekey_ = value;
}
inline void ModifyProcessInstanceRequest_ActivateInstruction::set_ancestorelementinstancekey(int64_t value) {
  _internal_set_ancestorelementinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.ancestorElementInstanceKey)
}

// repeated .gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction variableInstructions = 3;
inline int ModifyProcessInstanceRequest_ActivateInstruction::_internal_variableinstructions_size() const {
  return _impl_.variableinstructions_.size();
}
inline int ModifyProcessInstanceRequest_ActivateInstruction::variableinstructions_size() const {
  return _internal_variableinstructions_size();
}
inline void ModifyProcessInstanceRequest_ActivateInstruction::clear_variableinstructions() {
  _impl_.variableinstructions_.Clear();
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction* ModifyProcessInstanceRequest_ActivateInstruction::mutable_variableinstructions(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.variableInstructions)
  return _impl_.variableinstructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction >*
ModifyProcessInstanceRequest_ActivateInstruction::mutable_variableinstructions() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.variableInstructions)
  return &_impl_.variableinstructions_;
}
inline const ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction& ModifyProcessInstanceRequest_ActivateInstruction::_internal_variableinstructions(int index) const {
  return _impl_.variableinstructions_.Get(index);
}
inline const ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction& ModifyProcessInstanceRequest_ActivateInstruction::variableinstructions(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.variableInstructions)
  return _internal_variableinstructions(index);
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction* ModifyProcessInstanceRequest_ActivateInstruction::_internal_add_variableinstructions() {
  return _impl_.variableinstructions_.Add();
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction* ModifyProcessInstanceRequest_ActivateInstruction::add_variableinstructions() {
  ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction* _add = _internal_add_variableinstructions();
  // @@protoc_insertion_point(field_add:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.variableInstructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_VariableInstruction >&
ModifyProcessInstanceRequest_ActivateInstruction::variableinstructions() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction.variableInstructions)
  return _impl_.variableinstructions_;
}

// -------------------------------------------------------------------

// ModifyProcessInstanceRequest_VariableInstruction

// string variables = 1;
inline void ModifyProcessInstanceRequest_VariableInstruction::clear_variables() {
  _impl_.variables_.ClearToEmpty();
}
inline const std::string& ModifyProcessInstanceRequest_VariableInstruction::variables() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.variables)
  return _internal_variables();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModifyProcessInstanceRequest_VariableInstruction::set_variables(ArgT0&& arg0, ArgT... args) {
 
 _impl_.variables_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.variables)
}
inline std::string* ModifyProcessInstanceRequest_VariableInstruction::mutable_variables() {
  std::string* _s = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.variables)
  return _s;
}
inline const std::string& ModifyProcessInstanceRequest_VariableInstruction::_internal_variables() const {
  return _impl_.variables_.Get();
}
inline void ModifyProcessInstanceRequest_VariableInstruction::_internal_set_variables(const std::string& value) {
  
  _impl_.variables_.Set(value, GetArenaForAllocation());
}
inline std::string* ModifyProcessInstanceRequest_VariableInstruction::_internal_mutable_variables() {
  
  return _impl_.variables_.Mutable(GetArenaForAllocation());
}
inline std::string* ModifyProcessInstanceRequest_VariableInstruction::release_variables() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.variables)
  return _impl_.variables_.Release();
}
inline void ModifyProcessInstanceRequest_VariableInstruction::set_allocated_variables(std::string* variables) {
  if (variables != nullptr) {
    
  } else {
    
  }
  _impl_.variables_.SetAllocated(variables, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.variables_.IsDefault()) {
    _impl_.variables_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.variables)
}

// string scopeId = 2;
inline void ModifyProcessInstanceRequest_VariableInstruction::clear_scopeid() {
  _impl_.scopeid_.ClearToEmpty();
}
inline const std::string& ModifyProcessInstanceRequest_VariableInstruction::scopeid() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.scopeId)
  return _internal_scopeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModifyProcessInstanceRequest_VariableInstruction::set_scopeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.scopeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.scopeId)
}
inline std::string* ModifyProcessInstanceRequest_VariableInstruction::mutable_scopeid() {
  std::string* _s = _internal_mutable_scopeid();
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.scopeId)
  return _s;
}
inline const std::string& ModifyProcessInstanceRequest_VariableInstruction::_internal_scopeid() const {
  return _impl_.scopeid_.Get();
}
inline void ModifyProcessInstanceRequest_VariableInstruction::_internal_set_scopeid(const std::string& value) {
  
  _impl_.scopeid_.Set(value, GetArenaForAllocation());
}
inline std::string* ModifyProcessInstanceRequest_VariableInstruction::_internal_mutable_scopeid() {
  
  return _impl_.scopeid_.Mutable(GetArenaForAllocation());
}
inline std::string* ModifyProcessInstanceRequest_VariableInstruction::release_scopeid() {
  // @@protoc_insertion_point(field_release:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.scopeId)
  return _impl_.scopeid_.Release();
}
inline void ModifyProcessInstanceRequest_VariableInstruction::set_allocated_scopeid(std::string* scopeid) {
  if (scopeid != nullptr) {
    
  } else {
    
  }
  _impl_.scopeid_.SetAllocated(scopeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scopeid_.IsDefault()) {
    _impl_.scopeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gateway_protocol.ModifyProcessInstanceRequest.VariableInstruction.scopeId)
}

// -------------------------------------------------------------------

// ModifyProcessInstanceRequest_TerminateInstruction

// int64 elementInstanceKey = 1;
inline void ModifyProcessInstanceRequest_TerminateInstruction::clear_elementinstancekey() {
  _impl_.elementinstancekey_ = int64_t{0};
}
inline int64_t ModifyProcessInstanceRequest_TerminateInstruction::_internal_elementinstancekey() const {
  return _impl_.elementinstancekey_;
}
inline int64_t ModifyProcessInstanceRequest_TerminateInstruction::elementinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.TerminateInstruction.elementInstanceKey)
  return _internal_elementinstancekey();
}
inline void ModifyProcessInstanceRequest_TerminateInstruction::_internal_set_elementinstancekey(int64_t value) {
  
  _impl_.elementinstancekey_ = value;
}
inline void ModifyProcessInstanceRequest_TerminateInstruction::set_elementinstancekey(int64_t value) {
  _internal_set_elementinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ModifyProcessInstanceRequest.TerminateInstruction.elementInstanceKey)
}

// -------------------------------------------------------------------

// ModifyProcessInstanceRequest

// int64 processInstanceKey = 1;
inline void ModifyProcessInstanceRequest::clear_processinstancekey() {
  _impl_.processinstancekey_ = int64_t{0};
}
inline int64_t ModifyProcessInstanceRequest::_internal_processinstancekey() const {
  return _impl_.processinstancekey_;
}
inline int64_t ModifyProcessInstanceRequest::processinstancekey() const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.processInstanceKey)
  return _internal_processinstancekey();
}
inline void ModifyProcessInstanceRequest::_internal_set_processinstancekey(int64_t value) {
  
  _impl_.processinstancekey_ = value;
}
inline void ModifyProcessInstanceRequest::set_processinstancekey(int64_t value) {
  _internal_set_processinstancekey(value);
  // @@protoc_insertion_point(field_set:gateway_protocol.ModifyProcessInstanceRequest.processInstanceKey)
}

// repeated .gateway_protocol.ModifyProcessInstanceRequest.ActivateInstruction activateInstructions = 2;
inline int ModifyProcessInstanceRequest::_internal_activateinstructions_size() const {
  return _impl_.activateinstructions_.size();
}
inline int ModifyProcessInstanceRequest::activateinstructions_size() const {
  return _internal_activateinstructions_size();
}
inline void ModifyProcessInstanceRequest::clear_activateinstructions() {
  _impl_.activateinstructions_.Clear();
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction* ModifyProcessInstanceRequest::mutable_activateinstructions(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ModifyProcessInstanceRequest.activateInstructions)
  return _impl_.activateinstructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction >*
ModifyProcessInstanceRequest::mutable_activateinstructions() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.ModifyProcessInstanceRequest.activateInstructions)
  return &_impl_.activateinstructions_;
}
inline const ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction& ModifyProcessInstanceRequest::_internal_activateinstructions(int index) const {
  return _impl_.activateinstructions_.Get(index);
}
inline const ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction& ModifyProcessInstanceRequest::activateinstructions(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.activateInstructions)
  return _internal_activateinstructions(index);
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction* ModifyProcessInstanceRequest::_internal_add_activateinstructions() {
  return _impl_.activateinstructions_.Add();
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction* ModifyProcessInstanceRequest::add_activateinstructions() {
  ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction* _add = _internal_add_activateinstructions();
  // @@protoc_insertion_point(field_add:gateway_protocol.ModifyProcessInstanceRequest.activateInstructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_ActivateInstruction >&
ModifyProcessInstanceRequest::activateinstructions() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.ModifyProcessInstanceRequest.activateInstructions)
  return _impl_.activateinstructions_;
}

// repeated .gateway_protocol.ModifyProcessInstanceRequest.TerminateInstruction terminateInstructions = 3;
inline int ModifyProcessInstanceRequest::_internal_terminateinstructions_size() const {
  return _impl_.terminateinstructions_.size();
}
inline int ModifyProcessInstanceRequest::terminateinstructions_size() const {
  return _internal_terminateinstructions_size();
}
inline void ModifyProcessInstanceRequest::clear_terminateinstructions() {
  _impl_.terminateinstructions_.Clear();
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction* ModifyProcessInstanceRequest::mutable_terminateinstructions(int index) {
  // @@protoc_insertion_point(field_mutable:gateway_protocol.ModifyProcessInstanceRequest.terminateInstructions)
  return _impl_.terminateinstructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction >*
ModifyProcessInstanceRequest::mutable_terminateinstructions() {
  // @@protoc_insertion_point(field_mutable_list:gateway_protocol.ModifyProcessInstanceRequest.terminateInstructions)
  return &_impl_.terminateinstructions_;
}
inline const ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction& ModifyProcessInstanceRequest::_internal_terminateinstructions(int index) const {
  return _impl_.terminateinstructions_.Get(index);
}
inline const ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction& ModifyProcessInstanceRequest::terminateinstructions(int index) const {
  // @@protoc_insertion_point(field_get:gateway_protocol.ModifyProcessInstanceRequest.terminateInstructions)
  return _internal_terminateinstructions(index);
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction* ModifyProcessInstanceRequest::_internal_add_terminateinstructions() {
  return _impl_.terminateinstructions_.Add();
}
inline ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction* ModifyProcessInstanceRequest::add_terminateinstructions() {
  ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction* _add = _internal_add_terminateinstructions();
  // @@protoc_insertion_point(field_add:gateway_protocol.ModifyProcessInstanceRequest.terminateInstructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gateway_protocol::ModifyProcessInstanceRequest_TerminateInstruction >&
ModifyProcessInstanceRequest::terminateinstructions() const {
  // @@protoc_insertion_point(field_list:gateway_protocol.ModifyProcessInstanceRequest.terminateInstructions)
  return _impl_.terminateinstructions_;
}

// -------------------------------------------------------------------

// ModifyProcessInstanceResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gateway_protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gateway_protocol::Partition_PartitionBrokerRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gateway_protocol::Partition_PartitionBrokerRole>() {
  return ::gateway_protocol::Partition_PartitionBrokerRole_descriptor();
}
template <> struct is_proto_enum< ::gateway_protocol::Partition_PartitionBrokerHealth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gateway_protocol::Partition_PartitionBrokerHealth>() {
  return ::gateway_protocol::Partition_PartitionBrokerHealth_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto
